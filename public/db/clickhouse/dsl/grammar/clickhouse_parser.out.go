// Code generated from ClickHouseParser.g4 by ANTLR 4.13.2. DO NOT EDIT.

package grammar // ClickHouseParser
import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr4-go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type ClickHouseParser struct {
	*antlr.BaseParser
}

var ClickHouseParserParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func clickhouseparserParserInit() {
	staticData := &ClickHouseParserParserStaticData
	staticData.LiteralNames = []string{
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "'false'", "'true'", "", "",
		"", "", "", "", "'->'", "'*'", "'`'", "'\\'", "':'", "'::'", "','",
		"'||'", "'-'", "'.'", "'=='", "'='", "'>='", "'>'", "'{'", "'['", "'<='",
		"'('", "'<'", "", "'%'", "'+'", "'?'", "'\"'", "'''", "'}'", "']'",
		"')'", "';'", "'/'", "'_'", "'$'",
	}
	staticData.SymbolicNames = []string{
		"", "ADD", "AFTER", "ALIAS", "ALL", "ALTER", "AND", "ANTI", "ANY", "ARRAY",
		"AS", "ASCENDING", "ASOF", "AST", "ASYNC", "ATTACH", "BETWEEN", "BOTH",
		"BY", "CASE", "CAST", "CHECK", "CLEAR", "CLUSTER", "CODEC", "COLLATE",
		"COLUMN", "COMMENT", "CONSTRAINT", "CREATE", "CROSS", "CUBE", "CURRENT",
		"DATABASE", "DATABASES", "DATE", "DAY", "DEDUPLICATE", "DEFAULT", "DELAY",
		"DELETE", "DESC", "DESCENDING", "DESCRIBE", "DETACH", "DICTIONARIES",
		"DICTIONARY", "DISK", "DISTINCT", "DISTRIBUTED", "DROP", "ELSE", "END",
		"ENGINE", "EVENTS", "EXCEPT", "EXISTS", "EXPLAIN", "EXPRESSION", "EXTRACT",
		"FETCHES", "FINAL", "FIRST", "FLUSH", "FOLLOWING", "FOR", "FORMAT",
		"FREEZE", "FROM", "FULL", "FUNCTION", "GLOBAL", "GRANULARITY", "GROUP",
		"HAVING", "HIERARCHICAL", "HOUR", "ID", "IF", "ILIKE", "IN", "INDEX",
		"INF", "INJECTIVE", "INNER", "INSERT", "INTERSECT", "INTERVAL", "INTO",
		"IS", "IS_OBJECT_ID", "JOIN", "KEY", "KILL", "LAST", "LAYOUT", "LEADING",
		"LEFT", "LIFETIME", "LIKE", "LIMIT", "LIVE", "LOCAL", "LOGS", "MATERIALIZE",
		"MATERIALIZED", "MAX", "MERGES", "MIN", "MINUTE", "MODIFY", "MONTH",
		"MOVE", "MUTATION", "NAN_SQL", "NO", "NOT", "NULL_SQL", "NULLS", "OFFSET",
		"ON", "OPTIMIZE", "OR", "ORDER", "OUTER", "OUTFILE", "OVER", "PARTITION",
		"POPULATE", "PRECEDING", "PREWHERE", "PRIMARY", "PROJECTION", "QUALIFY",
		"QUARTER", "RANGE", "RELOAD", "REMOVE", "RENAME", "REPLACE", "REPLICA",
		"REPLICATED", "RIGHT", "ROLLUP", "ROW", "ROWS", "SAMPLE", "SECOND",
		"SELECT", "SEMI", "SENDS", "SET", "SETTINGS", "SHOW", "SOURCE", "START",
		"STOP", "SUBSTRING", "SYNC", "SYNTAX", "SYSTEM", "TABLE", "TABLES",
		"TEMPORARY", "TEST", "THEN", "TIES", "TIMEOUT", "TIMESTAMP", "TO", "TOP",
		"TOTALS", "TRAILING", "TRIM", "TRUNCATE", "TTL", "TYPE", "UNBOUNDED",
		"UNION", "UPDATE", "USE", "USING", "UUID", "VALUES", "VIEW", "VOLUME",
		"WATCH", "WEEK", "WHEN", "WHERE", "WINDOW", "WITH", "YEAR", "FILL",
		"STEP", "STALENESS", "INTERPOLATE", "JSON_FALSE", "JSON_TRUE", "IDENTIFIER",
		"FLOATING_LITERAL", "OCTAL_LITERAL", "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL",
		"STRING_LITERAL", "ARROW", "ASTERISK", "BACKQUOTE", "BACKSLASH", "COLON",
		"DOUBLE_COLON", "COMMA", "CONCAT", "DASH", "DOT", "EQ_DOUBLE", "EQ_SINGLE",
		"GE", "GT", "LBRACE", "LBRACKET", "LE", "LPAREN", "LT", "NOT_EQ", "PERCENT",
		"PLUS", "QUERY", "QUOTE_DOUBLE", "QUOTE_SINGLE", "RBRACE", "RBRACKET",
		"RPAREN", "SEMICOLON", "SLASH", "UNDERSCORE", "DOLLAR", "MULTI_LINE_COMMENT",
		"SINGLE_LINE_COMMENT", "WHITESPACE",
	}
	staticData.RuleNames = []string{
		"queryStmt", "query", "ctes", "namedQuery", "columnAliases", "selectUnionStmt",
		"selectUnionStmtItem", "selectStmtWithParens", "selectStmt", "projectionClause",
		"withClause", "topClause", "fromClause", "arrayJoinClause", "windowClause",
		"qualifyClause", "prewhereClause", "whereClause", "groupByClause", "havingClause",
		"interpolateExprs", "orderByClause", "limitByClause", "limitClause",
		"settingsClause", "joinExpr", "joinOp", "joinOpCross", "joinConstraintClause",
		"sampleClause", "limitExpr", "orderExprList", "orderExpr", "ratioExpr",
		"settingExprList", "settingExpr", "windowExpr", "winPartitionByClause",
		"winOrderByClause", "winFrameClause", "winFrameExtend", "winFrameBound",
		"setStmt", "columnTypeExpr", "columnExprList", "columnsExpr", "columnExpr",
		"columnArgList", "columnArgExpr", "columnLambdaExpr", "columnIdentifier",
		"nestedIdentifier", "tableExpr", "tableFunctionExpr", "tableIdentifier",
		"tableArgList", "tableArgExpr", "databaseIdentifier", "paramSlot", "floatingLiteral",
		"numberLiteral", "literal", "interval", "keyword", "keywordForAlias",
		"alias", "identifier", "identifierOrNull", "enumValue",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 239, 999, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7,
		4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7,
		10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15,
		2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2,
		21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26,
		7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7,
		31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36,
		2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2,
		42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47,
		7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7,
		52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7, 57,
		2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 2,
		63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2, 68,
		7, 68, 1, 0, 1, 0, 1, 0, 1, 0, 3, 0, 143, 8, 0, 1, 0, 1, 0, 3, 0, 147,
		8, 0, 1, 0, 3, 0, 150, 8, 0, 1, 0, 1, 0, 1, 1, 5, 1, 155, 8, 1, 10, 1,
		12, 1, 158, 9, 1, 1, 1, 3, 1, 161, 8, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
		1, 2, 5, 2, 169, 8, 2, 10, 2, 12, 2, 172, 9, 2, 1, 3, 1, 3, 3, 3, 176,
		8, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 4, 1, 4, 1, 4, 1, 4, 5, 4, 187,
		8, 4, 10, 4, 12, 4, 190, 9, 4, 1, 4, 1, 4, 1, 5, 1, 5, 5, 5, 196, 8, 5,
		10, 5, 12, 5, 199, 9, 5, 1, 6, 1, 6, 3, 6, 203, 8, 6, 1, 6, 1, 6, 1, 7,
		1, 7, 1, 7, 1, 7, 1, 7, 3, 7, 212, 8, 7, 1, 8, 3, 8, 215, 8, 8, 1, 8, 1,
		8, 3, 8, 219, 8, 8, 1, 8, 3, 8, 222, 8, 8, 1, 8, 3, 8, 225, 8, 8, 1, 8,
		3, 8, 228, 8, 8, 1, 8, 3, 8, 231, 8, 8, 1, 8, 3, 8, 234, 8, 8, 1, 8, 3,
		8, 237, 8, 8, 1, 8, 3, 8, 240, 8, 8, 1, 8, 3, 8, 243, 8, 8, 1, 8, 3, 8,
		246, 8, 8, 1, 8, 3, 8, 249, 8, 8, 1, 8, 3, 8, 252, 8, 8, 1, 9, 1, 9, 3,
		9, 256, 8, 9, 1, 9, 3, 9, 259, 8, 9, 1, 9, 1, 9, 1, 10, 1, 10, 1, 10, 1,
		11, 1, 11, 1, 11, 1, 11, 3, 11, 270, 8, 11, 1, 12, 1, 12, 1, 12, 1, 13,
		3, 13, 276, 8, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1,
		14, 1, 14, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 17,
		1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 3,
		18, 306, 8, 18, 1, 18, 1, 18, 3, 18, 310, 8, 18, 1, 18, 1, 18, 3, 18, 314,
		8, 18, 1, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 3, 20, 322, 8, 20, 1,
		20, 1, 20, 1, 20, 1, 20, 3, 20, 328, 8, 20, 5, 20, 330, 8, 20, 10, 20,
		12, 20, 333, 9, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 3,
		21, 342, 8, 21, 1, 21, 1, 21, 3, 21, 346, 8, 21, 1, 21, 1, 21, 3, 21, 350,
		8, 21, 1, 21, 1, 21, 3, 21, 354, 8, 21, 1, 21, 1, 21, 3, 21, 358, 8, 21,
		3, 21, 360, 8, 21, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1,
		23, 1, 23, 3, 23, 371, 8, 23, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25,
		3, 25, 379, 8, 25, 1, 25, 3, 25, 382, 8, 25, 1, 25, 1, 25, 1, 25, 1, 25,
		3, 25, 388, 8, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 3, 25, 396,
		8, 25, 1, 25, 3, 25, 399, 8, 25, 1, 25, 1, 25, 1, 25, 1, 25, 5, 25, 405,
		8, 25, 10, 25, 12, 25, 408, 9, 25, 1, 26, 3, 26, 411, 8, 26, 1, 26, 1,
		26, 1, 26, 3, 26, 416, 8, 26, 1, 26, 3, 26, 419, 8, 26, 1, 26, 3, 26, 422,
		8, 26, 1, 26, 1, 26, 3, 26, 426, 8, 26, 1, 26, 1, 26, 3, 26, 430, 8, 26,
		1, 26, 3, 26, 433, 8, 26, 3, 26, 435, 8, 26, 1, 26, 3, 26, 438, 8, 26,
		1, 26, 1, 26, 3, 26, 442, 8, 26, 1, 26, 1, 26, 3, 26, 446, 8, 26, 1, 26,
		3, 26, 449, 8, 26, 3, 26, 451, 8, 26, 3, 26, 453, 8, 26, 1, 27, 3, 27,
		456, 8, 27, 1, 27, 1, 27, 1, 27, 3, 27, 461, 8, 27, 1, 28, 1, 28, 1, 28,
		1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 3, 28, 472, 8, 28, 1, 29, 1,
		29, 1, 29, 1, 29, 3, 29, 478, 8, 29, 1, 30, 1, 30, 1, 30, 3, 30, 483, 8,
		30, 1, 31, 1, 31, 1, 31, 5, 31, 488, 8, 31, 10, 31, 12, 31, 491, 9, 31,
		1, 32, 1, 32, 3, 32, 495, 8, 32, 1, 32, 1, 32, 3, 32, 499, 8, 32, 1, 32,
		1, 32, 3, 32, 503, 8, 32, 1, 33, 1, 33, 1, 33, 3, 33, 508, 8, 33, 1, 34,
		1, 34, 1, 34, 5, 34, 513, 8, 34, 10, 34, 12, 34, 516, 9, 34, 1, 35, 1,
		35, 1, 35, 1, 35, 1, 36, 3, 36, 523, 8, 36, 1, 36, 3, 36, 526, 8, 36, 1,
		36, 3, 36, 529, 8, 36, 1, 37, 1, 37, 1, 37, 1, 37, 1, 38, 1, 38, 1, 38,
		1, 38, 1, 39, 1, 39, 1, 39, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 3,
		40, 548, 8, 40, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41,
		1, 41, 1, 41, 1, 41, 1, 41, 3, 41, 562, 8, 41, 1, 42, 1, 42, 1, 42, 1,
		42, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 5, 43,
		577, 8, 43, 10, 43, 12, 43, 580, 9, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1,
		43, 1, 43, 1, 43, 5, 43, 589, 8, 43, 10, 43, 12, 43, 592, 9, 43, 1, 43,
		1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 5, 43, 601, 8, 43, 10, 43, 12,
		43, 604, 9, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 3, 43, 611, 8, 43, 1,
		43, 1, 43, 3, 43, 615, 8, 43, 1, 44, 1, 44, 1, 44, 5, 44, 620, 8, 44, 10,
		44, 12, 44, 623, 9, 44, 1, 45, 1, 45, 1, 45, 3, 45, 628, 8, 45, 1, 45,
		1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 3, 45, 636, 8, 45, 1, 46, 1, 46, 1,
		46, 3, 46, 641, 8, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 4, 46, 648, 8,
		46, 11, 46, 12, 46, 649, 1, 46, 1, 46, 3, 46, 654, 8, 46, 1, 46, 1, 46,
		1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1,
		46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46,
		1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 3, 46, 685, 8, 46, 1, 46, 1,
		46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46,
		1, 46, 1, 46, 1, 46, 3, 46, 702, 8, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1,
		46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 3, 46, 714, 8, 46, 1, 46, 1, 46,
		1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 3, 46, 724, 8, 46, 1, 46, 3,
		46, 727, 8, 46, 1, 46, 1, 46, 3, 46, 731, 8, 46, 1, 46, 3, 46, 734, 8,
		46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46,
		1, 46, 3, 46, 747, 8, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1,
		46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 3, 46, 764,
		8, 46, 1, 46, 1, 46, 3, 46, 768, 8, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1,
		46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46,
		3, 46, 785, 8, 46, 1, 46, 3, 46, 788, 8, 46, 1, 46, 1, 46, 3, 46, 792,
		8, 46, 1, 46, 3, 46, 795, 8, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1,
		46, 1, 46, 1, 46, 1, 46, 3, 46, 806, 8, 46, 1, 46, 1, 46, 1, 46, 1, 46,
		1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1,
		46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46,
		3, 46, 833, 8, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 3, 46, 840, 8, 46,
		5, 46, 842, 8, 46, 10, 46, 12, 46, 845, 9, 46, 1, 47, 1, 47, 1, 47, 5,
		47, 850, 8, 47, 10, 47, 12, 47, 853, 9, 47, 1, 48, 1, 48, 3, 48, 857, 8,
		48, 1, 49, 1, 49, 1, 49, 1, 49, 5, 49, 863, 8, 49, 10, 49, 12, 49, 866,
		9, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 5, 49, 873, 8, 49, 10, 49, 12,
		49, 876, 9, 49, 3, 49, 878, 8, 49, 1, 49, 1, 49, 1, 49, 1, 50, 1, 50, 1,
		50, 3, 50, 886, 8, 50, 1, 50, 1, 50, 1, 51, 1, 51, 1, 51, 3, 51, 893, 8,
		51, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 3, 52, 902, 8, 52,
		1, 52, 1, 52, 1, 52, 1, 52, 3, 52, 908, 8, 52, 5, 52, 910, 8, 52, 10, 52,
		12, 52, 913, 9, 52, 1, 53, 1, 53, 1, 53, 3, 53, 918, 8, 53, 1, 53, 1, 53,
		1, 54, 1, 54, 1, 54, 3, 54, 925, 8, 54, 1, 54, 1, 54, 1, 55, 1, 55, 1,
		55, 5, 55, 932, 8, 55, 10, 55, 12, 55, 935, 9, 55, 1, 56, 1, 56, 1, 56,
		3, 56, 940, 8, 56, 1, 57, 1, 57, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1,
		58, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 3, 59, 956, 8, 59, 3, 59,
		958, 8, 59, 1, 60, 3, 60, 961, 8, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60,
		1, 60, 3, 60, 969, 8, 60, 1, 61, 1, 61, 1, 61, 3, 61, 974, 8, 61, 1, 62,
		1, 62, 1, 63, 1, 63, 1, 64, 1, 64, 1, 65, 1, 65, 3, 65, 984, 8, 65, 1,
		66, 1, 66, 1, 66, 3, 66, 989, 8, 66, 1, 67, 1, 67, 3, 67, 993, 8, 67, 1,
		68, 1, 68, 1, 68, 1, 68, 1, 68, 0, 3, 50, 92, 104, 69, 0, 2, 4, 6, 8, 10,
		12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46,
		48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82,
		84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114,
		116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 0, 22, 3, 0, 55,
		55, 86, 86, 178, 178, 2, 0, 4, 4, 48, 48, 2, 0, 84, 84, 97, 97, 2, 0, 31,
		31, 143, 143, 2, 0, 71, 71, 102, 102, 3, 0, 4, 4, 8, 8, 12, 12, 4, 0, 4,
		4, 7, 8, 12, 12, 149, 149, 2, 0, 97, 97, 142, 142, 2, 0, 4, 4, 8, 8, 2,
		0, 119, 119, 211, 211, 2, 0, 11, 11, 41, 42, 2, 0, 62, 62, 94, 94, 2, 0,
		135, 135, 145, 145, 3, 0, 17, 17, 96, 96, 172, 172, 3, 0, 206, 206, 225,
		225, 234, 234, 2, 0, 212, 213, 226, 226, 2, 0, 79, 79, 99, 99, 1, 0, 201,
		202, 2, 0, 213, 213, 226, 226, 8, 0, 36, 36, 76, 76, 109, 109, 111, 111,
		134, 134, 147, 147, 187, 187, 192, 192, 12, 0, 2, 35, 37, 75, 77, 81, 83,
		108, 110, 110, 112, 113, 115, 116, 118, 131, 135, 146, 148, 186, 188, 191,
		193, 198, 39, 0, 2, 3, 5, 5, 11, 11, 13, 15, 17, 29, 31, 35, 37, 47, 49,
		54, 56, 60, 62, 65, 67, 67, 70, 70, 72, 72, 75, 75, 77, 78, 81, 81, 83,
		83, 85, 85, 87, 87, 90, 90, 92, 96, 98, 98, 101, 108, 110, 110, 112, 113,
		115, 115, 118, 118, 121, 121, 124, 129, 131, 131, 135, 141, 143, 145, 148,
		148, 150, 151, 153, 169, 171, 177, 179, 180, 182, 186, 188, 188, 1114,
		0, 138, 1, 0, 0, 0, 2, 156, 1, 0, 0, 0, 4, 164, 1, 0, 0, 0, 6, 173, 1,
		0, 0, 0, 8, 182, 1, 0, 0, 0, 10, 193, 1, 0, 0, 0, 12, 200, 1, 0, 0, 0,
		14, 211, 1, 0, 0, 0, 16, 214, 1, 0, 0, 0, 18, 253, 1, 0, 0, 0, 20, 262,
		1, 0, 0, 0, 22, 265, 1, 0, 0, 0, 24, 271, 1, 0, 0, 0, 26, 275, 1, 0, 0,
		0, 28, 281, 1, 0, 0, 0, 30, 288, 1, 0, 0, 0, 32, 291, 1, 0, 0, 0, 34, 294,
		1, 0, 0, 0, 36, 297, 1, 0, 0, 0, 38, 315, 1, 0, 0, 0, 40, 318, 1, 0, 0,
		0, 42, 334, 1, 0, 0, 0, 44, 361, 1, 0, 0, 0, 46, 366, 1, 0, 0, 0, 48, 372,
		1, 0, 0, 0, 50, 387, 1, 0, 0, 0, 52, 452, 1, 0, 0, 0, 54, 460, 1, 0, 0,
		0, 56, 471, 1, 0, 0, 0, 58, 473, 1, 0, 0, 0, 60, 479, 1, 0, 0, 0, 62, 484,
		1, 0, 0, 0, 64, 492, 1, 0, 0, 0, 66, 504, 1, 0, 0, 0, 68, 509, 1, 0, 0,
		0, 70, 517, 1, 0, 0, 0, 72, 522, 1, 0, 0, 0, 74, 530, 1, 0, 0, 0, 76, 534,
		1, 0, 0, 0, 78, 538, 1, 0, 0, 0, 80, 547, 1, 0, 0, 0, 82, 561, 1, 0, 0,
		0, 84, 563, 1, 0, 0, 0, 86, 614, 1, 0, 0, 0, 88, 616, 1, 0, 0, 0, 90, 635,
		1, 0, 0, 0, 92, 767, 1, 0, 0, 0, 94, 846, 1, 0, 0, 0, 96, 856, 1, 0, 0,
		0, 98, 877, 1, 0, 0, 0, 100, 885, 1, 0, 0, 0, 102, 889, 1, 0, 0, 0, 104,
		901, 1, 0, 0, 0, 106, 914, 1, 0, 0, 0, 108, 924, 1, 0, 0, 0, 110, 928,
		1, 0, 0, 0, 112, 939, 1, 0, 0, 0, 114, 941, 1, 0, 0, 0, 116, 943, 1, 0,
		0, 0, 118, 957, 1, 0, 0, 0, 120, 960, 1, 0, 0, 0, 122, 973, 1, 0, 0, 0,
		124, 975, 1, 0, 0, 0, 126, 977, 1, 0, 0, 0, 128, 979, 1, 0, 0, 0, 130,
		983, 1, 0, 0, 0, 132, 988, 1, 0, 0, 0, 134, 992, 1, 0, 0, 0, 136, 994,
		1, 0, 0, 0, 138, 142, 3, 2, 1, 0, 139, 140, 5, 88, 0, 0, 140, 141, 5, 125,
		0, 0, 141, 143, 5, 204, 0, 0, 142, 139, 1, 0, 0, 0, 142, 143, 1, 0, 0,
		0, 143, 146, 1, 0, 0, 0, 144, 145, 5, 66, 0, 0, 145, 147, 3, 134, 67, 0,
		146, 144, 1, 0, 0, 0, 146, 147, 1, 0, 0, 0, 147, 149, 1, 0, 0, 0, 148,
		150, 5, 233, 0, 0, 149, 148, 1, 0, 0, 0, 149, 150, 1, 0, 0, 0, 150, 151,
		1, 0, 0, 0, 151, 152, 5, 0, 0, 1, 152, 1, 1, 0, 0, 0, 153, 155, 3, 84,
		42, 0, 154, 153, 1, 0, 0, 0, 155, 158, 1, 0, 0, 0, 156, 154, 1, 0, 0, 0,
		156, 157, 1, 0, 0, 0, 157, 160, 1, 0, 0, 0, 158, 156, 1, 0, 0, 0, 159,
		161, 3, 4, 2, 0, 160, 159, 1, 0, 0, 0, 160, 161, 1, 0, 0, 0, 161, 162,
		1, 0, 0, 0, 162, 163, 3, 10, 5, 0, 163, 3, 1, 0, 0, 0, 164, 165, 5, 191,
		0, 0, 165, 170, 3, 6, 3, 0, 166, 167, 5, 211, 0, 0, 167, 169, 3, 6, 3,
		0, 168, 166, 1, 0, 0, 0, 169, 172, 1, 0, 0, 0, 170, 168, 1, 0, 0, 0, 170,
		171, 1, 0, 0, 0, 171, 5, 1, 0, 0, 0, 172, 170, 1, 0, 0, 0, 173, 175, 3,
		132, 66, 0, 174, 176, 3, 8, 4, 0, 175, 174, 1, 0, 0, 0, 175, 176, 1, 0,
		0, 0, 176, 177, 1, 0, 0, 0, 177, 178, 5, 10, 0, 0, 178, 179, 5, 222, 0,
		0, 179, 180, 3, 2, 1, 0, 180, 181, 5, 232, 0, 0, 181, 7, 1, 0, 0, 0, 182,
		183, 5, 222, 0, 0, 183, 188, 3, 132, 66, 0, 184, 185, 5, 211, 0, 0, 185,
		187, 3, 132, 66, 0, 186, 184, 1, 0, 0, 0, 187, 190, 1, 0, 0, 0, 188, 186,
		1, 0, 0, 0, 188, 189, 1, 0, 0, 0, 189, 191, 1, 0, 0, 0, 190, 188, 1, 0,
		0, 0, 191, 192, 5, 232, 0, 0, 192, 9, 1, 0, 0, 0, 193, 197, 3, 14, 7, 0,
		194, 196, 3, 12, 6, 0, 195, 194, 1, 0, 0, 0, 196, 199, 1, 0, 0, 0, 197,
		195, 1, 0, 0, 0, 197, 198, 1, 0, 0, 0, 198, 11, 1, 0, 0, 0, 199, 197, 1,
		0, 0, 0, 200, 202, 7, 0, 0, 0, 201, 203, 7, 1, 0, 0, 202, 201, 1, 0, 0,
		0, 202, 203, 1, 0, 0, 0, 203, 204, 1, 0, 0, 0, 204, 205, 3, 14, 7, 0, 205,
		13, 1, 0, 0, 0, 206, 212, 3, 16, 8, 0, 207, 208, 5, 222, 0, 0, 208, 209,
		3, 10, 5, 0, 209, 210, 5, 232, 0, 0, 210, 212, 1, 0, 0, 0, 211, 206, 1,
		0, 0, 0, 211, 207, 1, 0, 0, 0, 212, 15, 1, 0, 0, 0, 213, 215, 3, 20, 10,
		0, 214, 213, 1, 0, 0, 0, 214, 215, 1, 0, 0, 0, 215, 216, 1, 0, 0, 0, 216,
		218, 3, 18, 9, 0, 217, 219, 3, 24, 12, 0, 218, 217, 1, 0, 0, 0, 218, 219,
		1, 0, 0, 0, 219, 221, 1, 0, 0, 0, 220, 222, 3, 26, 13, 0, 221, 220, 1,
		0, 0, 0, 221, 222, 1, 0, 0, 0, 222, 224, 1, 0, 0, 0, 223, 225, 3, 28, 14,
		0, 224, 223, 1, 0, 0, 0, 224, 225, 1, 0, 0, 0, 225, 227, 1, 0, 0, 0, 226,
		228, 3, 30, 15, 0, 227, 226, 1, 0, 0, 0, 227, 228, 1, 0, 0, 0, 228, 230,
		1, 0, 0, 0, 229, 231, 3, 32, 16, 0, 230, 229, 1, 0, 0, 0, 230, 231, 1,
		0, 0, 0, 231, 233, 1, 0, 0, 0, 232, 234, 3, 34, 17, 0, 233, 232, 1, 0,
		0, 0, 233, 234, 1, 0, 0, 0, 234, 236, 1, 0, 0, 0, 235, 237, 3, 36, 18,
		0, 236, 235, 1, 0, 0, 0, 236, 237, 1, 0, 0, 0, 237, 239, 1, 0, 0, 0, 238,
		240, 3, 38, 19, 0, 239, 238, 1, 0, 0, 0, 239, 240, 1, 0, 0, 0, 240, 242,
		1, 0, 0, 0, 241, 243, 3, 42, 21, 0, 242, 241, 1, 0, 0, 0, 242, 243, 1,
		0, 0, 0, 243, 245, 1, 0, 0, 0, 244, 246, 3, 44, 22, 0, 245, 244, 1, 0,
		0, 0, 245, 246, 1, 0, 0, 0, 246, 248, 1, 0, 0, 0, 247, 249, 3, 46, 23,
		0, 248, 247, 1, 0, 0, 0, 248, 249, 1, 0, 0, 0, 249, 251, 1, 0, 0, 0, 250,
		252, 3, 48, 24, 0, 251, 250, 1, 0, 0, 0, 251, 252, 1, 0, 0, 0, 252, 17,
		1, 0, 0, 0, 253, 255, 5, 148, 0, 0, 254, 256, 5, 48, 0, 0, 255, 254, 1,
		0, 0, 0, 255, 256, 1, 0, 0, 0, 256, 258, 1, 0, 0, 0, 257, 259, 3, 22, 11,
		0, 258, 257, 1, 0, 0, 0, 258, 259, 1, 0, 0, 0, 259, 260, 1, 0, 0, 0, 260,
		261, 3, 88, 44, 0, 261, 19, 1, 0, 0, 0, 262, 263, 5, 191, 0, 0, 263, 264,
		3, 88, 44, 0, 264, 21, 1, 0, 0, 0, 265, 266, 5, 170, 0, 0, 266, 269, 5,
		202, 0, 0, 267, 268, 5, 191, 0, 0, 268, 270, 5, 166, 0, 0, 269, 267, 1,
		0, 0, 0, 269, 270, 1, 0, 0, 0, 270, 23, 1, 0, 0, 0, 271, 272, 5, 68, 0,
		0, 272, 273, 3, 50, 25, 0, 273, 25, 1, 0, 0, 0, 274, 276, 7, 2, 0, 0, 275,
		274, 1, 0, 0, 0, 275, 276, 1, 0, 0, 0, 276, 277, 1, 0, 0, 0, 277, 278,
		5, 9, 0, 0, 278, 279, 5, 91, 0, 0, 279, 280, 3, 88, 44, 0, 280, 27, 1,
		0, 0, 0, 281, 282, 5, 190, 0, 0, 282, 283, 3, 132, 66, 0, 283, 284, 5,
		10, 0, 0, 284, 285, 5, 222, 0, 0, 285, 286, 3, 72, 36, 0, 286, 287, 5,
		232, 0, 0, 287, 29, 1, 0, 0, 0, 288, 289, 5, 133, 0, 0, 289, 290, 3, 92,
		46, 0, 290, 31, 1, 0, 0, 0, 291, 292, 5, 130, 0, 0, 292, 293, 3, 92, 46,
		0, 293, 33, 1, 0, 0, 0, 294, 295, 5, 189, 0, 0, 295, 296, 3, 92, 46, 0,
		296, 35, 1, 0, 0, 0, 297, 298, 5, 73, 0, 0, 298, 305, 5, 18, 0, 0, 299,
		300, 7, 3, 0, 0, 300, 301, 5, 222, 0, 0, 301, 302, 3, 88, 44, 0, 302, 303,
		5, 232, 0, 0, 303, 306, 1, 0, 0, 0, 304, 306, 3, 88, 44, 0, 305, 299, 1,
		0, 0, 0, 305, 304, 1, 0, 0, 0, 306, 309, 1, 0, 0, 0, 307, 308, 5, 191,
		0, 0, 308, 310, 7, 3, 0, 0, 309, 307, 1, 0, 0, 0, 309, 310, 1, 0, 0, 0,
		310, 313, 1, 0, 0, 0, 311, 312, 5, 191, 0, 0, 312, 314, 5, 171, 0, 0, 313,
		311, 1, 0, 0, 0, 313, 314, 1, 0, 0, 0, 314, 37, 1, 0, 0, 0, 315, 316, 5,
		74, 0, 0, 316, 317, 3, 92, 46, 0, 317, 39, 1, 0, 0, 0, 318, 321, 3, 92,
		46, 0, 319, 320, 5, 10, 0, 0, 320, 322, 3, 92, 46, 0, 321, 319, 1, 0, 0,
		0, 321, 322, 1, 0, 0, 0, 322, 331, 1, 0, 0, 0, 323, 324, 5, 211, 0, 0,
		324, 327, 3, 92, 46, 0, 325, 326, 5, 10, 0, 0, 326, 328, 3, 92, 46, 0,
		327, 325, 1, 0, 0, 0, 327, 328, 1, 0, 0, 0, 328, 330, 1, 0, 0, 0, 329,
		323, 1, 0, 0, 0, 330, 333, 1, 0, 0, 0, 331, 329, 1, 0, 0, 0, 331, 332,
		1, 0, 0, 0, 332, 41, 1, 0, 0, 0, 333, 331, 1, 0, 0, 0, 334, 335, 5, 123,
		0, 0, 335, 336, 5, 18, 0, 0, 336, 359, 3, 62, 31, 0, 337, 338, 5, 191,
		0, 0, 338, 341, 5, 193, 0, 0, 339, 340, 5, 68, 0, 0, 340, 342, 3, 92, 46,
		0, 341, 339, 1, 0, 0, 0, 341, 342, 1, 0, 0, 0, 342, 345, 1, 0, 0, 0, 343,
		344, 5, 169, 0, 0, 344, 346, 3, 92, 46, 0, 345, 343, 1, 0, 0, 0, 345, 346,
		1, 0, 0, 0, 346, 349, 1, 0, 0, 0, 347, 348, 5, 194, 0, 0, 348, 350, 3,
		92, 46, 0, 349, 347, 1, 0, 0, 0, 349, 350, 1, 0, 0, 0, 350, 353, 1, 0,
		0, 0, 351, 352, 5, 195, 0, 0, 352, 354, 3, 92, 46, 0, 353, 351, 1, 0, 0,
		0, 353, 354, 1, 0, 0, 0, 354, 357, 1, 0, 0, 0, 355, 356, 5, 196, 0, 0,
		356, 358, 3, 40, 20, 0, 357, 355, 1, 0, 0, 0, 357, 358, 1, 0, 0, 0, 358,
		360, 1, 0, 0, 0, 359, 337, 1, 0, 0, 0, 359, 360, 1, 0, 0, 0, 360, 43, 1,
		0, 0, 0, 361, 362, 5, 100, 0, 0, 362, 363, 3, 60, 30, 0, 363, 364, 5, 18,
		0, 0, 364, 365, 3, 88, 44, 0, 365, 45, 1, 0, 0, 0, 366, 367, 5, 100, 0,
		0, 367, 370, 3, 60, 30, 0, 368, 369, 5, 191, 0, 0, 369, 371, 5, 166, 0,
		0, 370, 368, 1, 0, 0, 0, 370, 371, 1, 0, 0, 0, 371, 47, 1, 0, 0, 0, 372,
		373, 5, 152, 0, 0, 373, 374, 3, 68, 34, 0, 374, 49, 1, 0, 0, 0, 375, 376,
		6, 25, -1, 0, 376, 378, 3, 104, 52, 0, 377, 379, 5, 61, 0, 0, 378, 377,
		1, 0, 0, 0, 378, 379, 1, 0, 0, 0, 379, 381, 1, 0, 0, 0, 380, 382, 3, 58,
		29, 0, 381, 380, 1, 0, 0, 0, 381, 382, 1, 0, 0, 0, 382, 388, 1, 0, 0, 0,
		383, 384, 5, 222, 0, 0, 384, 385, 3, 50, 25, 0, 385, 386, 5, 232, 0, 0,
		386, 388, 1, 0, 0, 0, 387, 375, 1, 0, 0, 0, 387, 383, 1, 0, 0, 0, 388,
		406, 1, 0, 0, 0, 389, 390, 10, 3, 0, 0, 390, 391, 3, 54, 27, 0, 391, 392,
		3, 50, 25, 4, 392, 405, 1, 0, 0, 0, 393, 395, 10, 4, 0, 0, 394, 396, 7,
		4, 0, 0, 395, 394, 1, 0, 0, 0, 395, 396, 1, 0, 0, 0, 396, 398, 1, 0, 0,
		0, 397, 399, 3, 52, 26, 0, 398, 397, 1, 0, 0, 0, 398, 399, 1, 0, 0, 0,
		399, 400, 1, 0, 0, 0, 400, 401, 5, 91, 0, 0, 401, 402, 3, 50, 25, 0, 402,
		403, 3, 56, 28, 0, 403, 405, 1, 0, 0, 0, 404, 389, 1, 0, 0, 0, 404, 393,
		1, 0, 0, 0, 405, 408, 1, 0, 0, 0, 406, 404, 1, 0, 0, 0, 406, 407, 1, 0,
		0, 0, 407, 51, 1, 0, 0, 0, 408, 406, 1, 0, 0, 0, 409, 411, 7, 5, 0, 0,
		410, 409, 1, 0, 0, 0, 410, 411, 1, 0, 0, 0, 411, 412, 1, 0, 0, 0, 412,
		419, 5, 84, 0, 0, 413, 415, 5, 84, 0, 0, 414, 416, 7, 5, 0, 0, 415, 414,
		1, 0, 0, 0, 415, 416, 1, 0, 0, 0, 416, 419, 1, 0, 0, 0, 417, 419, 7, 5,
		0, 0, 418, 410, 1, 0, 0, 0, 418, 413, 1, 0, 0, 0, 418, 417, 1, 0, 0, 0,
		419, 453, 1, 0, 0, 0, 420, 422, 7, 6, 0, 0, 421, 420, 1, 0, 0, 0, 421,
		422, 1, 0, 0, 0, 422, 423, 1, 0, 0, 0, 423, 425, 7, 7, 0, 0, 424, 426,
		5, 124, 0, 0, 425, 424, 1, 0, 0, 0, 425, 426, 1, 0, 0, 0, 426, 435, 1,
		0, 0, 0, 427, 429, 7, 7, 0, 0, 428, 430, 5, 124, 0, 0, 429, 428, 1, 0,
		0, 0, 429, 430, 1, 0, 0, 0, 430, 432, 1, 0, 0, 0, 431, 433, 7, 6, 0, 0,
		432, 431, 1, 0, 0, 0, 432, 433, 1, 0, 0, 0, 433, 435, 1, 0, 0, 0, 434,
		421, 1, 0, 0, 0, 434, 427, 1, 0, 0, 0, 435, 453, 1, 0, 0, 0, 436, 438,
		7, 8, 0, 0, 437, 436, 1, 0, 0, 0, 437, 438, 1, 0, 0, 0, 438, 439, 1, 0,
		0, 0, 439, 441, 5, 69, 0, 0, 440, 442, 5, 124, 0, 0, 441, 440, 1, 0, 0,
		0, 441, 442, 1, 0, 0, 0, 442, 451, 1, 0, 0, 0, 443, 445, 5, 69, 0, 0, 444,
		446, 5, 124, 0, 0, 445, 444, 1, 0, 0, 0, 445, 446, 1, 0, 0, 0, 446, 448,
		1, 0, 0, 0, 447, 449, 7, 8, 0, 0, 448, 447, 1, 0, 0, 0, 448, 449, 1, 0,
		0, 0, 449, 451, 1, 0, 0, 0, 450, 437, 1, 0, 0, 0, 450, 443, 1, 0, 0, 0,
		451, 453, 1, 0, 0, 0, 452, 418, 1, 0, 0, 0, 452, 434, 1, 0, 0, 0, 452,
		450, 1, 0, 0, 0, 453, 53, 1, 0, 0, 0, 454, 456, 7, 4, 0, 0, 455, 454, 1,
		0, 0, 0, 455, 456, 1, 0, 0, 0, 456, 457, 1, 0, 0, 0, 457, 458, 5, 30, 0,
		0, 458, 461, 5, 91, 0, 0, 459, 461, 5, 211, 0, 0, 460, 455, 1, 0, 0, 0,
		460, 459, 1, 0, 0, 0, 461, 55, 1, 0, 0, 0, 462, 463, 5, 120, 0, 0, 463,
		472, 3, 88, 44, 0, 464, 465, 5, 181, 0, 0, 465, 466, 5, 222, 0, 0, 466,
		467, 3, 88, 44, 0, 467, 468, 5, 232, 0, 0, 468, 472, 1, 0, 0, 0, 469, 470,
		5, 181, 0, 0, 470, 472, 3, 88, 44, 0, 471, 462, 1, 0, 0, 0, 471, 464, 1,
		0, 0, 0, 471, 469, 1, 0, 0, 0, 472, 57, 1, 0, 0, 0, 473, 474, 5, 146, 0,
		0, 474, 477, 3, 66, 33, 0, 475, 476, 5, 119, 0, 0, 476, 478, 3, 66, 33,
		0, 477, 475, 1, 0, 0, 0, 477, 478, 1, 0, 0, 0, 478, 59, 1, 0, 0, 0, 479,
		482, 3, 92, 46, 0, 480, 481, 7, 9, 0, 0, 481, 483, 3, 92, 46, 0, 482, 480,
		1, 0, 0, 0, 482, 483, 1, 0, 0, 0, 483, 61, 1, 0, 0, 0, 484, 489, 3, 64,
		32, 0, 485, 486, 5, 211, 0, 0, 486, 488, 3, 64, 32, 0, 487, 485, 1, 0,
		0, 0, 488, 491, 1, 0, 0, 0, 489, 487, 1, 0, 0, 0, 489, 490, 1, 0, 0, 0,
		490, 63, 1, 0, 0, 0, 491, 489, 1, 0, 0, 0, 492, 494, 3, 92, 46, 0, 493,
		495, 7, 10, 0, 0, 494, 493, 1, 0, 0, 0, 494, 495, 1, 0, 0, 0, 495, 498,
		1, 0, 0, 0, 496, 497, 5, 118, 0, 0, 497, 499, 7, 11, 0, 0, 498, 496, 1,
		0, 0, 0, 498, 499, 1, 0, 0, 0, 499, 502, 1, 0, 0, 0, 500, 501, 5, 25, 0,
		0, 501, 503, 5, 204, 0, 0, 502, 500, 1, 0, 0, 0, 502, 503, 1, 0, 0, 0,
		503, 65, 1, 0, 0, 0, 504, 507, 3, 120, 60, 0, 505, 506, 5, 234, 0, 0, 506,
		508, 3, 120, 60, 0, 507, 505, 1, 0, 0, 0, 507, 508, 1, 0, 0, 0, 508, 67,
		1, 0, 0, 0, 509, 514, 3, 70, 35, 0, 510, 511, 5, 211, 0, 0, 511, 513, 3,
		70, 35, 0, 512, 510, 1, 0, 0, 0, 513, 516, 1, 0, 0, 0, 514, 512, 1, 0,
		0, 0, 514, 515, 1, 0, 0, 0, 515, 69, 1, 0, 0, 0, 516, 514, 1, 0, 0, 0,
		517, 518, 3, 132, 66, 0, 518, 519, 5, 216, 0, 0, 519, 520, 3, 122, 61,
		0, 520, 71, 1, 0, 0, 0, 521, 523, 3, 74, 37, 0, 522, 521, 1, 0, 0, 0, 522,
		523, 1, 0, 0, 0, 523, 525, 1, 0, 0, 0, 524, 526, 3, 76, 38, 0, 525, 524,
		1, 0, 0, 0, 525, 526, 1, 0, 0, 0, 526, 528, 1, 0, 0, 0, 527, 529, 3, 78,
		39, 0, 528, 527, 1, 0, 0, 0, 528, 529, 1, 0, 0, 0, 529, 73, 1, 0, 0, 0,
		530, 531, 5, 127, 0, 0, 531, 532, 5, 18, 0, 0, 532, 533, 3, 88, 44, 0,
		533, 75, 1, 0, 0, 0, 534, 535, 5, 123, 0, 0, 535, 536, 5, 18, 0, 0, 536,
		537, 3, 62, 31, 0, 537, 77, 1, 0, 0, 0, 538, 539, 7, 12, 0, 0, 539, 540,
		3, 80, 40, 0, 540, 79, 1, 0, 0, 0, 541, 548, 3, 82, 41, 0, 542, 543, 5,
		16, 0, 0, 543, 544, 3, 82, 41, 0, 544, 545, 5, 6, 0, 0, 545, 546, 3, 82,
		41, 0, 546, 548, 1, 0, 0, 0, 547, 541, 1, 0, 0, 0, 547, 542, 1, 0, 0, 0,
		548, 81, 1, 0, 0, 0, 549, 550, 5, 32, 0, 0, 550, 562, 5, 144, 0, 0, 551,
		552, 5, 177, 0, 0, 552, 562, 5, 129, 0, 0, 553, 554, 5, 177, 0, 0, 554,
		562, 5, 64, 0, 0, 555, 556, 3, 120, 60, 0, 556, 557, 5, 129, 0, 0, 557,
		562, 1, 0, 0, 0, 558, 559, 3, 120, 60, 0, 559, 560, 5, 64, 0, 0, 560, 562,
		1, 0, 0, 0, 561, 549, 1, 0, 0, 0, 561, 551, 1, 0, 0, 0, 561, 553, 1, 0,
		0, 0, 561, 555, 1, 0, 0, 0, 561, 558, 1, 0, 0, 0, 562, 83, 1, 0, 0, 0,
		563, 564, 5, 151, 0, 0, 564, 565, 3, 68, 34, 0, 565, 566, 5, 233, 0, 0,
		566, 85, 1, 0, 0, 0, 567, 615, 3, 132, 66, 0, 568, 569, 3, 132, 66, 0,
		569, 570, 5, 222, 0, 0, 570, 571, 3, 132, 66, 0, 571, 578, 3, 86, 43, 0,
		572, 573, 5, 211, 0, 0, 573, 574, 3, 132, 66, 0, 574, 575, 3, 86, 43, 0,
		575, 577, 1, 0, 0, 0, 576, 572, 1, 0, 0, 0, 577, 580, 1, 0, 0, 0, 578,
		576, 1, 0, 0, 0, 578, 579, 1, 0, 0, 0, 579, 581, 1, 0, 0, 0, 580, 578,
		1, 0, 0, 0, 581, 582, 5, 232, 0, 0, 582, 615, 1, 0, 0, 0, 583, 584, 3,
		132, 66, 0, 584, 585, 5, 222, 0, 0, 585, 590, 3, 136, 68, 0, 586, 587,
		5, 211, 0, 0, 587, 589, 3, 136, 68, 0, 588, 586, 1, 0, 0, 0, 589, 592,
		1, 0, 0, 0, 590, 588, 1, 0, 0, 0, 590, 591, 1, 0, 0, 0, 591, 593, 1, 0,
		0, 0, 592, 590, 1, 0, 0, 0, 593, 594, 5, 232, 0, 0, 594, 615, 1, 0, 0,
		0, 595, 596, 3, 132, 66, 0, 596, 597, 5, 222, 0, 0, 597, 602, 3, 86, 43,
		0, 598, 599, 5, 211, 0, 0, 599, 601, 3, 86, 43, 0, 600, 598, 1, 0, 0, 0,
		601, 604, 1, 0, 0, 0, 602, 600, 1, 0, 0, 0, 602, 603, 1, 0, 0, 0, 603,
		605, 1, 0, 0, 0, 604, 602, 1, 0, 0, 0, 605, 606, 5, 232, 0, 0, 606, 615,
		1, 0, 0, 0, 607, 608, 3, 132, 66, 0, 608, 610, 5, 222, 0, 0, 609, 611,
		3, 88, 44, 0, 610, 609, 1, 0, 0, 0, 610, 611, 1, 0, 0, 0, 611, 612, 1,
		0, 0, 0, 612, 613, 5, 232, 0, 0, 613, 615, 1, 0, 0, 0, 614, 567, 1, 0,
		0, 0, 614, 568, 1, 0, 0, 0, 614, 583, 1, 0, 0, 0, 614, 595, 1, 0, 0, 0,
		614, 607, 1, 0, 0, 0, 615, 87, 1, 0, 0, 0, 616, 621, 3, 90, 45, 0, 617,
		618, 5, 211, 0, 0, 618, 620, 3, 90, 45, 0, 619, 617, 1, 0, 0, 0, 620, 623,
		1, 0, 0, 0, 621, 619, 1, 0, 0, 0, 621, 622, 1, 0, 0, 0, 622, 89, 1, 0,
		0, 0, 623, 621, 1, 0, 0, 0, 624, 625, 3, 108, 54, 0, 625, 626, 5, 214,
		0, 0, 626, 628, 1, 0, 0, 0, 627, 624, 1, 0, 0, 0, 627, 628, 1, 0, 0, 0,
		628, 629, 1, 0, 0, 0, 629, 636, 5, 206, 0, 0, 630, 631, 5, 222, 0, 0, 631,
		632, 3, 10, 5, 0, 632, 633, 5, 232, 0, 0, 633, 636, 1, 0, 0, 0, 634, 636,
		3, 92, 46, 0, 635, 627, 1, 0, 0, 0, 635, 630, 1, 0, 0, 0, 635, 634, 1,
		0, 0, 0, 636, 91, 1, 0, 0, 0, 637, 638, 6, 46, -1, 0, 638, 640, 5, 19,
		0, 0, 639, 641, 3, 92, 46, 0, 640, 639, 1, 0, 0, 0, 640, 641, 1, 0, 0,
		0, 641, 647, 1, 0, 0, 0, 642, 643, 5, 188, 0, 0, 643, 644, 3, 92, 46, 0,
		644, 645, 5, 165, 0, 0, 645, 646, 3, 92, 46, 0, 646, 648, 1, 0, 0, 0, 647,
		642, 1, 0, 0, 0, 648, 649, 1, 0, 0, 0, 649, 647, 1, 0, 0, 0, 649, 650,
		1, 0, 0, 0, 650, 653, 1, 0, 0, 0, 651, 652, 5, 51, 0, 0, 652, 654, 3, 92,
		46, 0, 653, 651, 1, 0, 0, 0, 653, 654, 1, 0, 0, 0, 654, 655, 1, 0, 0, 0,
		655, 656, 5, 52, 0, 0, 656, 768, 1, 0, 0, 0, 657, 658, 5, 20, 0, 0, 658,
		659, 5, 222, 0, 0, 659, 660, 3, 92, 46, 0, 660, 661, 5, 10, 0, 0, 661,
		662, 3, 86, 43, 0, 662, 663, 5, 232, 0, 0, 663, 768, 1, 0, 0, 0, 664, 665,
		5, 35, 0, 0, 665, 768, 5, 204, 0, 0, 666, 667, 5, 59, 0, 0, 667, 668, 5,
		222, 0, 0, 668, 669, 3, 124, 62, 0, 669, 670, 5, 68, 0, 0, 670, 671, 3,
		92, 46, 0, 671, 672, 5, 232, 0, 0, 672, 768, 1, 0, 0, 0, 673, 674, 5, 87,
		0, 0, 674, 675, 3, 92, 46, 0, 675, 676, 3, 124, 62, 0, 676, 768, 1, 0,
		0, 0, 677, 678, 5, 157, 0, 0, 678, 679, 5, 222, 0, 0, 679, 680, 3, 92,
		46, 0, 680, 681, 5, 68, 0, 0, 681, 684, 3, 92, 46, 0, 682, 683, 5, 65,
		0, 0, 683, 685, 3, 92, 46, 0, 684, 682, 1, 0, 0, 0, 684, 685, 1, 0, 0,
		0, 685, 686, 1, 0, 0, 0, 686, 687, 5, 232, 0, 0, 687, 768, 1, 0, 0, 0,
		688, 689, 5, 168, 0, 0, 689, 768, 5, 204, 0, 0, 690, 691, 5, 173, 0, 0,
		691, 692, 5, 222, 0, 0, 692, 693, 7, 13, 0, 0, 693, 694, 5, 204, 0, 0,
		694, 695, 5, 68, 0, 0, 695, 696, 3, 92, 46, 0, 696, 697, 5, 232, 0, 0,
		697, 768, 1, 0, 0, 0, 698, 699, 3, 132, 66, 0, 699, 701, 5, 222, 0, 0,
		700, 702, 3, 88, 44, 0, 701, 700, 1, 0, 0, 0, 701, 702, 1, 0, 0, 0, 702,
		703, 1, 0, 0, 0, 703, 704, 5, 232, 0, 0, 704, 705, 1, 0, 0, 0, 705, 706,
		5, 126, 0, 0, 706, 707, 5, 222, 0, 0, 707, 708, 3, 72, 36, 0, 708, 709,
		5, 232, 0, 0, 709, 768, 1, 0, 0, 0, 710, 711, 3, 132, 66, 0, 711, 713,
		5, 222, 0, 0, 712, 714, 3, 88, 44, 0, 713, 712, 1, 0, 0, 0, 713, 714, 1,
		0, 0, 0, 714, 715, 1, 0, 0, 0, 715, 716, 5, 232, 0, 0, 716, 717, 1, 0,
		0, 0, 717, 718, 5, 126, 0, 0, 718, 719, 3, 132, 66, 0, 719, 768, 1, 0,
		0, 0, 720, 726, 3, 132, 66, 0, 721, 723, 5, 222, 0, 0, 722, 724, 3, 88,
		44, 0, 723, 722, 1, 0, 0, 0, 723, 724, 1, 0, 0, 0, 724, 725, 1, 0, 0, 0,
		725, 727, 5, 232, 0, 0, 726, 721, 1, 0, 0, 0, 726, 727, 1, 0, 0, 0, 727,
		728, 1, 0, 0, 0, 728, 730, 5, 222, 0, 0, 729, 731, 5, 48, 0, 0, 730, 729,
		1, 0, 0, 0, 730, 731, 1, 0, 0, 0, 731, 733, 1, 0, 0, 0, 732, 734, 3, 94,
		47, 0, 733, 732, 1, 0, 0, 0, 733, 734, 1, 0, 0, 0, 734, 735, 1, 0, 0, 0,
		735, 736, 5, 232, 0, 0, 736, 768, 1, 0, 0, 0, 737, 768, 3, 122, 61, 0,
		738, 768, 3, 116, 58, 0, 739, 740, 5, 213, 0, 0, 740, 768, 3, 92, 46, 17,
		741, 742, 5, 116, 0, 0, 742, 768, 3, 92, 46, 12, 743, 744, 3, 108, 54,
		0, 744, 745, 5, 214, 0, 0, 745, 747, 1, 0, 0, 0, 746, 743, 1, 0, 0, 0,
		746, 747, 1, 0, 0, 0, 747, 748, 1, 0, 0, 0, 748, 768, 5, 206, 0, 0, 749,
		750, 5, 222, 0, 0, 750, 751, 3, 10, 5, 0, 751, 752, 5, 232, 0, 0, 752,
		768, 1, 0, 0, 0, 753, 754, 5, 222, 0, 0, 754, 755, 3, 92, 46, 0, 755, 756,
		5, 232, 0, 0, 756, 768, 1, 0, 0, 0, 757, 758, 5, 222, 0, 0, 758, 759, 3,
		88, 44, 0, 759, 760, 5, 232, 0, 0, 760, 768, 1, 0, 0, 0, 761, 763, 5, 220,
		0, 0, 762, 764, 3, 88, 44, 0, 763, 762, 1, 0, 0, 0, 763, 764, 1, 0, 0,
		0, 764, 765, 1, 0, 0, 0, 765, 768, 5, 231, 0, 0, 766, 768, 3, 100, 50,
		0, 767, 637, 1, 0, 0, 0, 767, 657, 1, 0, 0, 0, 767, 664, 1, 0, 0, 0, 767,
		666, 1, 0, 0, 0, 767, 673, 1, 0, 0, 0, 767, 677, 1, 0, 0, 0, 767, 688,
		1, 0, 0, 0, 767, 690, 1, 0, 0, 0, 767, 698, 1, 0, 0, 0, 767, 710, 1, 0,
		0, 0, 767, 720, 1, 0, 0, 0, 767, 737, 1, 0, 0, 0, 767, 738, 1, 0, 0, 0,
		767, 739, 1, 0, 0, 0, 767, 741, 1, 0, 0, 0, 767, 746, 1, 0, 0, 0, 767,
		749, 1, 0, 0, 0, 767, 753, 1, 0, 0, 0, 767, 757, 1, 0, 0, 0, 767, 761,
		1, 0, 0, 0, 767, 766, 1, 0, 0, 0, 768, 843, 1, 0, 0, 0, 769, 770, 10, 16,
		0, 0, 770, 771, 7, 14, 0, 0, 771, 842, 3, 92, 46, 17, 772, 773, 10, 15,
		0, 0, 773, 774, 7, 15, 0, 0, 774, 842, 3, 92, 46, 16, 775, 794, 10, 14,
		0, 0, 776, 795, 5, 215, 0, 0, 777, 795, 5, 216, 0, 0, 778, 795, 5, 224,
		0, 0, 779, 795, 5, 221, 0, 0, 780, 795, 5, 217, 0, 0, 781, 795, 5, 223,
		0, 0, 782, 795, 5, 218, 0, 0, 783, 785, 5, 71, 0, 0, 784, 783, 1, 0, 0,
		0, 784, 785, 1, 0, 0, 0, 785, 787, 1, 0, 0, 0, 786, 788, 5, 116, 0, 0,
		787, 786, 1, 0, 0, 0, 787, 788, 1, 0, 0, 0, 788, 789, 1, 0, 0, 0, 789,
		795, 5, 80, 0, 0, 790, 792, 5, 116, 0, 0, 791, 790, 1, 0, 0, 0, 791, 792,
		1, 0, 0, 0, 792, 793, 1, 0, 0, 0, 793, 795, 7, 16, 0, 0, 794, 776, 1, 0,
		0, 0, 794, 777, 1, 0, 0, 0, 794, 778, 1, 0, 0, 0, 794, 779, 1, 0, 0, 0,
		794, 780, 1, 0, 0, 0, 794, 781, 1, 0, 0, 0, 794, 782, 1, 0, 0, 0, 794,
		784, 1, 0, 0, 0, 794, 791, 1, 0, 0, 0, 795, 796, 1, 0, 0, 0, 796, 842,
		3, 92, 46, 15, 797, 798, 10, 11, 0, 0, 798, 799, 5, 6, 0, 0, 799, 842,
		3, 92, 46, 12, 800, 801, 10, 10, 0, 0, 801, 802, 5, 122, 0, 0, 802, 842,
		3, 92, 46, 11, 803, 805, 10, 9, 0, 0, 804, 806, 5, 116, 0, 0, 805, 804,
		1, 0, 0, 0, 805, 806, 1, 0, 0, 0, 806, 807, 1, 0, 0, 0, 807, 808, 5, 16,
		0, 0, 808, 809, 3, 92, 46, 0, 809, 810, 5, 6, 0, 0, 810, 811, 3, 92, 46,
		10, 811, 842, 1, 0, 0, 0, 812, 813, 10, 8, 0, 0, 813, 814, 5, 227, 0, 0,
		814, 815, 3, 92, 46, 0, 815, 816, 5, 209, 0, 0, 816, 817, 3, 92, 46, 8,
		817, 842, 1, 0, 0, 0, 818, 819, 10, 31, 0, 0, 819, 820, 5, 210, 0, 0, 820,
		842, 3, 86, 43, 0, 821, 822, 10, 19, 0, 0, 822, 823, 5, 220, 0, 0, 823,
		824, 3, 92, 46, 0, 824, 825, 5, 231, 0, 0, 825, 842, 1, 0, 0, 0, 826, 827,
		10, 18, 0, 0, 827, 828, 5, 214, 0, 0, 828, 842, 5, 202, 0, 0, 829, 830,
		10, 13, 0, 0, 830, 832, 5, 89, 0, 0, 831, 833, 5, 116, 0, 0, 832, 831,
		1, 0, 0, 0, 832, 833, 1, 0, 0, 0, 833, 834, 1, 0, 0, 0, 834, 842, 5, 117,
		0, 0, 835, 839, 10, 7, 0, 0, 836, 840, 3, 130, 65, 0, 837, 838, 5, 10,
		0, 0, 838, 840, 3, 132, 66, 0, 839, 836, 1, 0, 0, 0, 839, 837, 1, 0, 0,
		0, 840, 842, 1, 0, 0, 0, 841, 769, 1, 0, 0, 0, 841, 772, 1, 0, 0, 0, 841,
		775, 1, 0, 0, 0, 841, 797, 1, 0, 0, 0, 841, 800, 1, 0, 0, 0, 841, 803,
		1, 0, 0, 0, 841, 812, 1, 0, 0, 0, 841, 818, 1, 0, 0, 0, 841, 821, 1, 0,
		0, 0, 841, 826, 1, 0, 0, 0, 841, 829, 1, 0, 0, 0, 841, 835, 1, 0, 0, 0,
		842, 845, 1, 0, 0, 0, 843, 841, 1, 0, 0, 0, 843, 844, 1, 0, 0, 0, 844,
		93, 1, 0, 0, 0, 845, 843, 1, 0, 0, 0, 846, 851, 3, 96, 48, 0, 847, 848,
		5, 211, 0, 0, 848, 850, 3, 96, 48, 0, 849, 847, 1, 0, 0, 0, 850, 853, 1,
		0, 0, 0, 851, 849, 1, 0, 0, 0, 851, 852, 1, 0, 0, 0, 852, 95, 1, 0, 0,
		0, 853, 851, 1, 0, 0, 0, 854, 857, 3, 98, 49, 0, 855, 857, 3, 92, 46, 0,
		856, 854, 1, 0, 0, 0, 856, 855, 1, 0, 0, 0, 857, 97, 1, 0, 0, 0, 858, 859,
		5, 222, 0, 0, 859, 864, 3, 132, 66, 0, 860, 861, 5, 211, 0, 0, 861, 863,
		3, 132, 66, 0, 862, 860, 1, 0, 0, 0, 863, 866, 1, 0, 0, 0, 864, 862, 1,
		0, 0, 0, 864, 865, 1, 0, 0, 0, 865, 867, 1, 0, 0, 0, 866, 864, 1, 0, 0,
		0, 867, 868, 5, 232, 0, 0, 868, 878, 1, 0, 0, 0, 869, 874, 3, 132, 66,
		0, 870, 871, 5, 211, 0, 0, 871, 873, 3, 132, 66, 0, 872, 870, 1, 0, 0,
		0, 873, 876, 1, 0, 0, 0, 874, 872, 1, 0, 0, 0, 874, 875, 1, 0, 0, 0, 875,
		878, 1, 0, 0, 0, 876, 874, 1, 0, 0, 0, 877, 858, 1, 0, 0, 0, 877, 869,
		1, 0, 0, 0, 878, 879, 1, 0, 0, 0, 879, 880, 5, 205, 0, 0, 880, 881, 3,
		92, 46, 0, 881, 99, 1, 0, 0, 0, 882, 883, 3, 108, 54, 0, 883, 884, 5, 214,
		0, 0, 884, 886, 1, 0, 0, 0, 885, 882, 1, 0, 0, 0, 885, 886, 1, 0, 0, 0,
		886, 887, 1, 0, 0, 0, 887, 888, 3, 102, 51, 0, 888, 101, 1, 0, 0, 0, 889,
		892, 3, 132, 66, 0, 890, 891, 5, 214, 0, 0, 891, 893, 3, 132, 66, 0, 892,
		890, 1, 0, 0, 0, 892, 893, 1, 0, 0, 0, 893, 103, 1, 0, 0, 0, 894, 895,
		6, 52, -1, 0, 895, 902, 3, 108, 54, 0, 896, 902, 3, 106, 53, 0, 897, 898,
		5, 222, 0, 0, 898, 899, 3, 10, 5, 0, 899, 900, 5, 232, 0, 0, 900, 902,
		1, 0, 0, 0, 901, 894, 1, 0, 0, 0, 901, 896, 1, 0, 0, 0, 901, 897, 1, 0,
		0, 0, 902, 911, 1, 0, 0, 0, 903, 907, 10, 1, 0, 0, 904, 908, 3, 130, 65,
		0, 905, 906, 5, 10, 0, 0, 906, 908, 3, 132, 66, 0, 907, 904, 1, 0, 0, 0,
		907, 905, 1, 0, 0, 0, 908, 910, 1, 0, 0, 0, 909, 903, 1, 0, 0, 0, 910,
		913, 1, 0, 0, 0, 911, 909, 1, 0, 0, 0, 911, 912, 1, 0, 0, 0, 912, 105,
		1, 0, 0, 0, 913, 911, 1, 0, 0, 0, 914, 915, 3, 132, 66, 0, 915, 917, 5,
		222, 0, 0, 916, 918, 3, 110, 55, 0, 917, 916, 1, 0, 0, 0, 917, 918, 1,
		0, 0, 0, 918, 919, 1, 0, 0, 0, 919, 920, 5, 232, 0, 0, 920, 107, 1, 0,
		0, 0, 921, 922, 3, 114, 57, 0, 922, 923, 5, 214, 0, 0, 923, 925, 1, 0,
		0, 0, 924, 921, 1, 0, 0, 0, 924, 925, 1, 0, 0, 0, 925, 926, 1, 0, 0, 0,
		926, 927, 3, 132, 66, 0, 927, 109, 1, 0, 0, 0, 928, 933, 3, 112, 56, 0,
		929, 930, 5, 211, 0, 0, 930, 932, 3, 112, 56, 0, 931, 929, 1, 0, 0, 0,
		932, 935, 1, 0, 0, 0, 933, 931, 1, 0, 0, 0, 933, 934, 1, 0, 0, 0, 934,
		111, 1, 0, 0, 0, 935, 933, 1, 0, 0, 0, 936, 940, 3, 102, 51, 0, 937, 940,
		3, 106, 53, 0, 938, 940, 3, 122, 61, 0, 939, 936, 1, 0, 0, 0, 939, 937,
		1, 0, 0, 0, 939, 938, 1, 0, 0, 0, 940, 113, 1, 0, 0, 0, 941, 942, 3, 132,
		66, 0, 942, 115, 1, 0, 0, 0, 943, 944, 5, 219, 0, 0, 944, 945, 3, 132,
		66, 0, 945, 946, 5, 209, 0, 0, 946, 947, 3, 86, 43, 0, 947, 948, 5, 230,
		0, 0, 948, 117, 1, 0, 0, 0, 949, 958, 5, 200, 0, 0, 950, 951, 5, 214, 0,
		0, 951, 958, 7, 17, 0, 0, 952, 953, 5, 202, 0, 0, 953, 955, 5, 214, 0,
		0, 954, 956, 7, 17, 0, 0, 955, 954, 1, 0, 0, 0, 955, 956, 1, 0, 0, 0, 956,
		958, 1, 0, 0, 0, 957, 949, 1, 0, 0, 0, 957, 950, 1, 0, 0, 0, 957, 952,
		1, 0, 0, 0, 958, 119, 1, 0, 0, 0, 959, 961, 7, 18, 0, 0, 960, 959, 1, 0,
		0, 0, 960, 961, 1, 0, 0, 0, 961, 968, 1, 0, 0, 0, 962, 969, 3, 118, 59,
		0, 963, 969, 5, 201, 0, 0, 964, 969, 5, 202, 0, 0, 965, 969, 5, 203, 0,
		0, 966, 969, 5, 82, 0, 0, 967, 969, 5, 114, 0, 0, 968, 962, 1, 0, 0, 0,
		968, 963, 1, 0, 0, 0, 968, 964, 1, 0, 0, 0, 968, 965, 1, 0, 0, 0, 968,
		966, 1, 0, 0, 0, 968, 967, 1, 0, 0, 0, 969, 121, 1, 0, 0, 0, 970, 974,
		3, 120, 60, 0, 971, 974, 5, 204, 0, 0, 972, 974, 5, 117, 0, 0, 973, 970,
		1, 0, 0, 0, 973, 971, 1, 0, 0, 0, 973, 972, 1, 0, 0, 0, 974, 123, 1, 0,
		0, 0, 975, 976, 7, 19, 0, 0, 976, 125, 1, 0, 0, 0, 977, 978, 7, 20, 0,
		0, 978, 127, 1, 0, 0, 0, 979, 980, 7, 21, 0, 0, 980, 129, 1, 0, 0, 0, 981,
		984, 5, 199, 0, 0, 982, 984, 3, 128, 64, 0, 983, 981, 1, 0, 0, 0, 983,
		982, 1, 0, 0, 0, 984, 131, 1, 0, 0, 0, 985, 989, 5, 199, 0, 0, 986, 989,
		3, 124, 62, 0, 987, 989, 3, 126, 63, 0, 988, 985, 1, 0, 0, 0, 988, 986,
		1, 0, 0, 0, 988, 987, 1, 0, 0, 0, 989, 133, 1, 0, 0, 0, 990, 993, 3, 132,
		66, 0, 991, 993, 5, 117, 0, 0, 992, 990, 1, 0, 0, 0, 992, 991, 1, 0, 0,
		0, 993, 135, 1, 0, 0, 0, 994, 995, 5, 204, 0, 0, 995, 996, 5, 216, 0, 0,
		996, 997, 3, 120, 60, 0, 997, 137, 1, 0, 0, 0, 130, 142, 146, 149, 156,
		160, 170, 175, 188, 197, 202, 211, 214, 218, 221, 224, 227, 230, 233, 236,
		239, 242, 245, 248, 251, 255, 258, 269, 275, 305, 309, 313, 321, 327, 331,
		341, 345, 349, 353, 357, 359, 370, 378, 381, 387, 395, 398, 404, 406, 410,
		415, 418, 421, 425, 429, 432, 434, 437, 441, 445, 448, 450, 452, 455, 460,
		471, 477, 482, 489, 494, 498, 502, 507, 514, 522, 525, 528, 547, 561, 578,
		590, 602, 610, 614, 621, 627, 635, 640, 649, 653, 684, 701, 713, 723, 726,
		730, 733, 746, 763, 767, 784, 787, 791, 794, 805, 832, 839, 841, 843, 851,
		856, 864, 874, 877, 885, 892, 901, 907, 911, 917, 924, 933, 939, 955, 957,
		960, 968, 973, 983, 988, 992,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// ClickHouseParserInit initializes any static state used to implement ClickHouseParser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewClickHouseParser(). You can call this function if you wish to initialize the static state ahead
// of time.
func ClickHouseParserInit() {
	staticData := &ClickHouseParserParserStaticData
	staticData.once.Do(clickhouseparserParserInit)
}

// NewClickHouseParser produces a new parser instance for the optional input antlr.TokenStream.
func NewClickHouseParser(input antlr.TokenStream) *ClickHouseParser {
	ClickHouseParserInit()
	this := new(ClickHouseParser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &ClickHouseParserParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	this.RuleNames = staticData.RuleNames
	this.LiteralNames = staticData.LiteralNames
	this.SymbolicNames = staticData.SymbolicNames
	this.GrammarFileName = "ClickHouseParser.g4"

	return this
}

// ClickHouseParser tokens.
const (
	ClickHouseParserEOF                 = antlr.TokenEOF
	ClickHouseParserADD                 = 1
	ClickHouseParserAFTER               = 2
	ClickHouseParserALIAS               = 3
	ClickHouseParserALL                 = 4
	ClickHouseParserALTER               = 5
	ClickHouseParserAND                 = 6
	ClickHouseParserANTI                = 7
	ClickHouseParserANY                 = 8
	ClickHouseParserARRAY               = 9
	ClickHouseParserAS                  = 10
	ClickHouseParserASCENDING           = 11
	ClickHouseParserASOF                = 12
	ClickHouseParserAST                 = 13
	ClickHouseParserASYNC               = 14
	ClickHouseParserATTACH              = 15
	ClickHouseParserBETWEEN             = 16
	ClickHouseParserBOTH                = 17
	ClickHouseParserBY                  = 18
	ClickHouseParserCASE                = 19
	ClickHouseParserCAST                = 20
	ClickHouseParserCHECK               = 21
	ClickHouseParserCLEAR               = 22
	ClickHouseParserCLUSTER             = 23
	ClickHouseParserCODEC               = 24
	ClickHouseParserCOLLATE             = 25
	ClickHouseParserCOLUMN              = 26
	ClickHouseParserCOMMENT             = 27
	ClickHouseParserCONSTRAINT          = 28
	ClickHouseParserCREATE              = 29
	ClickHouseParserCROSS               = 30
	ClickHouseParserCUBE                = 31
	ClickHouseParserCURRENT             = 32
	ClickHouseParserDATABASE            = 33
	ClickHouseParserDATABASES           = 34
	ClickHouseParserDATE                = 35
	ClickHouseParserDAY                 = 36
	ClickHouseParserDEDUPLICATE         = 37
	ClickHouseParserDEFAULT             = 38
	ClickHouseParserDELAY               = 39
	ClickHouseParserDELETE              = 40
	ClickHouseParserDESC                = 41
	ClickHouseParserDESCENDING          = 42
	ClickHouseParserDESCRIBE            = 43
	ClickHouseParserDETACH              = 44
	ClickHouseParserDICTIONARIES        = 45
	ClickHouseParserDICTIONARY          = 46
	ClickHouseParserDISK                = 47
	ClickHouseParserDISTINCT            = 48
	ClickHouseParserDISTRIBUTED         = 49
	ClickHouseParserDROP                = 50
	ClickHouseParserELSE                = 51
	ClickHouseParserEND                 = 52
	ClickHouseParserENGINE              = 53
	ClickHouseParserEVENTS              = 54
	ClickHouseParserEXCEPT              = 55
	ClickHouseParserEXISTS              = 56
	ClickHouseParserEXPLAIN             = 57
	ClickHouseParserEXPRESSION          = 58
	ClickHouseParserEXTRACT             = 59
	ClickHouseParserFETCHES             = 60
	ClickHouseParserFINAL               = 61
	ClickHouseParserFIRST               = 62
	ClickHouseParserFLUSH               = 63
	ClickHouseParserFOLLOWING           = 64
	ClickHouseParserFOR                 = 65
	ClickHouseParserFORMAT              = 66
	ClickHouseParserFREEZE              = 67
	ClickHouseParserFROM                = 68
	ClickHouseParserFULL                = 69
	ClickHouseParserFUNCTION            = 70
	ClickHouseParserGLOBAL              = 71
	ClickHouseParserGRANULARITY         = 72
	ClickHouseParserGROUP               = 73
	ClickHouseParserHAVING              = 74
	ClickHouseParserHIERARCHICAL        = 75
	ClickHouseParserHOUR                = 76
	ClickHouseParserID                  = 77
	ClickHouseParserIF                  = 78
	ClickHouseParserILIKE               = 79
	ClickHouseParserIN                  = 80
	ClickHouseParserINDEX               = 81
	ClickHouseParserINF                 = 82
	ClickHouseParserINJECTIVE           = 83
	ClickHouseParserINNER               = 84
	ClickHouseParserINSERT              = 85
	ClickHouseParserINTERSECT           = 86
	ClickHouseParserINTERVAL            = 87
	ClickHouseParserINTO                = 88
	ClickHouseParserIS                  = 89
	ClickHouseParserIS_OBJECT_ID        = 90
	ClickHouseParserJOIN                = 91
	ClickHouseParserKEY                 = 92
	ClickHouseParserKILL                = 93
	ClickHouseParserLAST                = 94
	ClickHouseParserLAYOUT              = 95
	ClickHouseParserLEADING             = 96
	ClickHouseParserLEFT                = 97
	ClickHouseParserLIFETIME            = 98
	ClickHouseParserLIKE                = 99
	ClickHouseParserLIMIT               = 100
	ClickHouseParserLIVE                = 101
	ClickHouseParserLOCAL               = 102
	ClickHouseParserLOGS                = 103
	ClickHouseParserMATERIALIZE         = 104
	ClickHouseParserMATERIALIZED        = 105
	ClickHouseParserMAX                 = 106
	ClickHouseParserMERGES              = 107
	ClickHouseParserMIN                 = 108
	ClickHouseParserMINUTE              = 109
	ClickHouseParserMODIFY              = 110
	ClickHouseParserMONTH               = 111
	ClickHouseParserMOVE                = 112
	ClickHouseParserMUTATION            = 113
	ClickHouseParserNAN_SQL             = 114
	ClickHouseParserNO                  = 115
	ClickHouseParserNOT                 = 116
	ClickHouseParserNULL_SQL            = 117
	ClickHouseParserNULLS               = 118
	ClickHouseParserOFFSET              = 119
	ClickHouseParserON                  = 120
	ClickHouseParserOPTIMIZE            = 121
	ClickHouseParserOR                  = 122
	ClickHouseParserORDER               = 123
	ClickHouseParserOUTER               = 124
	ClickHouseParserOUTFILE             = 125
	ClickHouseParserOVER                = 126
	ClickHouseParserPARTITION           = 127
	ClickHouseParserPOPULATE            = 128
	ClickHouseParserPRECEDING           = 129
	ClickHouseParserPREWHERE            = 130
	ClickHouseParserPRIMARY             = 131
	ClickHouseParserPROJECTION          = 132
	ClickHouseParserQUALIFY             = 133
	ClickHouseParserQUARTER             = 134
	ClickHouseParserRANGE               = 135
	ClickHouseParserRELOAD              = 136
	ClickHouseParserREMOVE              = 137
	ClickHouseParserRENAME              = 138
	ClickHouseParserREPLACE             = 139
	ClickHouseParserREPLICA             = 140
	ClickHouseParserREPLICATED          = 141
	ClickHouseParserRIGHT               = 142
	ClickHouseParserROLLUP              = 143
	ClickHouseParserROW                 = 144
	ClickHouseParserROWS                = 145
	ClickHouseParserSAMPLE              = 146
	ClickHouseParserSECOND              = 147
	ClickHouseParserSELECT              = 148
	ClickHouseParserSEMI                = 149
	ClickHouseParserSENDS               = 150
	ClickHouseParserSET                 = 151
	ClickHouseParserSETTINGS            = 152
	ClickHouseParserSHOW                = 153
	ClickHouseParserSOURCE              = 154
	ClickHouseParserSTART               = 155
	ClickHouseParserSTOP                = 156
	ClickHouseParserSUBSTRING           = 157
	ClickHouseParserSYNC                = 158
	ClickHouseParserSYNTAX              = 159
	ClickHouseParserSYSTEM              = 160
	ClickHouseParserTABLE               = 161
	ClickHouseParserTABLES              = 162
	ClickHouseParserTEMPORARY           = 163
	ClickHouseParserTEST                = 164
	ClickHouseParserTHEN                = 165
	ClickHouseParserTIES                = 166
	ClickHouseParserTIMEOUT             = 167
	ClickHouseParserTIMESTAMP           = 168
	ClickHouseParserTO                  = 169
	ClickHouseParserTOP                 = 170
	ClickHouseParserTOTALS              = 171
	ClickHouseParserTRAILING            = 172
	ClickHouseParserTRIM                = 173
	ClickHouseParserTRUNCATE            = 174
	ClickHouseParserTTL                 = 175
	ClickHouseParserTYPE                = 176
	ClickHouseParserUNBOUNDED           = 177
	ClickHouseParserUNION               = 178
	ClickHouseParserUPDATE              = 179
	ClickHouseParserUSE                 = 180
	ClickHouseParserUSING               = 181
	ClickHouseParserUUID                = 182
	ClickHouseParserVALUES              = 183
	ClickHouseParserVIEW                = 184
	ClickHouseParserVOLUME              = 185
	ClickHouseParserWATCH               = 186
	ClickHouseParserWEEK                = 187
	ClickHouseParserWHEN                = 188
	ClickHouseParserWHERE               = 189
	ClickHouseParserWINDOW              = 190
	ClickHouseParserWITH                = 191
	ClickHouseParserYEAR                = 192
	ClickHouseParserFILL                = 193
	ClickHouseParserSTEP                = 194
	ClickHouseParserSTALENESS           = 195
	ClickHouseParserINTERPOLATE         = 196
	ClickHouseParserJSON_FALSE          = 197
	ClickHouseParserJSON_TRUE           = 198
	ClickHouseParserIDENTIFIER          = 199
	ClickHouseParserFLOATING_LITERAL    = 200
	ClickHouseParserOCTAL_LITERAL       = 201
	ClickHouseParserDECIMAL_LITERAL     = 202
	ClickHouseParserHEXADECIMAL_LITERAL = 203
	ClickHouseParserSTRING_LITERAL      = 204
	ClickHouseParserARROW               = 205
	ClickHouseParserASTERISK            = 206
	ClickHouseParserBACKQUOTE           = 207
	ClickHouseParserBACKSLASH           = 208
	ClickHouseParserCOLON               = 209
	ClickHouseParserDOUBLE_COLON        = 210
	ClickHouseParserCOMMA               = 211
	ClickHouseParserCONCAT              = 212
	ClickHouseParserDASH                = 213
	ClickHouseParserDOT                 = 214
	ClickHouseParserEQ_DOUBLE           = 215
	ClickHouseParserEQ_SINGLE           = 216
	ClickHouseParserGE                  = 217
	ClickHouseParserGT                  = 218
	ClickHouseParserLBRACE              = 219
	ClickHouseParserLBRACKET            = 220
	ClickHouseParserLE                  = 221
	ClickHouseParserLPAREN              = 222
	ClickHouseParserLT                  = 223
	ClickHouseParserNOT_EQ              = 224
	ClickHouseParserPERCENT             = 225
	ClickHouseParserPLUS                = 226
	ClickHouseParserQUERY               = 227
	ClickHouseParserQUOTE_DOUBLE        = 228
	ClickHouseParserQUOTE_SINGLE        = 229
	ClickHouseParserRBRACE              = 230
	ClickHouseParserRBRACKET            = 231
	ClickHouseParserRPAREN              = 232
	ClickHouseParserSEMICOLON           = 233
	ClickHouseParserSLASH               = 234
	ClickHouseParserUNDERSCORE          = 235
	ClickHouseParserDOLLAR              = 236
	ClickHouseParserMULTI_LINE_COMMENT  = 237
	ClickHouseParserSINGLE_LINE_COMMENT = 238
	ClickHouseParserWHITESPACE          = 239
)

// ClickHouseParser rules.
const (
	ClickHouseParserRULE_queryStmt            = 0
	ClickHouseParserRULE_query                = 1
	ClickHouseParserRULE_ctes                 = 2
	ClickHouseParserRULE_namedQuery           = 3
	ClickHouseParserRULE_columnAliases        = 4
	ClickHouseParserRULE_selectUnionStmt      = 5
	ClickHouseParserRULE_selectUnionStmtItem  = 6
	ClickHouseParserRULE_selectStmtWithParens = 7
	ClickHouseParserRULE_selectStmt           = 8
	ClickHouseParserRULE_projectionClause     = 9
	ClickHouseParserRULE_withClause           = 10
	ClickHouseParserRULE_topClause            = 11
	ClickHouseParserRULE_fromClause           = 12
	ClickHouseParserRULE_arrayJoinClause      = 13
	ClickHouseParserRULE_windowClause         = 14
	ClickHouseParserRULE_qualifyClause        = 15
	ClickHouseParserRULE_prewhereClause       = 16
	ClickHouseParserRULE_whereClause          = 17
	ClickHouseParserRULE_groupByClause        = 18
	ClickHouseParserRULE_havingClause         = 19
	ClickHouseParserRULE_interpolateExprs     = 20
	ClickHouseParserRULE_orderByClause        = 21
	ClickHouseParserRULE_limitByClause        = 22
	ClickHouseParserRULE_limitClause          = 23
	ClickHouseParserRULE_settingsClause       = 24
	ClickHouseParserRULE_joinExpr             = 25
	ClickHouseParserRULE_joinOp               = 26
	ClickHouseParserRULE_joinOpCross          = 27
	ClickHouseParserRULE_joinConstraintClause = 28
	ClickHouseParserRULE_sampleClause         = 29
	ClickHouseParserRULE_limitExpr            = 30
	ClickHouseParserRULE_orderExprList        = 31
	ClickHouseParserRULE_orderExpr            = 32
	ClickHouseParserRULE_ratioExpr            = 33
	ClickHouseParserRULE_settingExprList      = 34
	ClickHouseParserRULE_settingExpr          = 35
	ClickHouseParserRULE_windowExpr           = 36
	ClickHouseParserRULE_winPartitionByClause = 37
	ClickHouseParserRULE_winOrderByClause     = 38
	ClickHouseParserRULE_winFrameClause       = 39
	ClickHouseParserRULE_winFrameExtend       = 40
	ClickHouseParserRULE_winFrameBound        = 41
	ClickHouseParserRULE_setStmt              = 42
	ClickHouseParserRULE_columnTypeExpr       = 43
	ClickHouseParserRULE_columnExprList       = 44
	ClickHouseParserRULE_columnsExpr          = 45
	ClickHouseParserRULE_columnExpr           = 46
	ClickHouseParserRULE_columnArgList        = 47
	ClickHouseParserRULE_columnArgExpr        = 48
	ClickHouseParserRULE_columnLambdaExpr     = 49
	ClickHouseParserRULE_columnIdentifier     = 50
	ClickHouseParserRULE_nestedIdentifier     = 51
	ClickHouseParserRULE_tableExpr            = 52
	ClickHouseParserRULE_tableFunctionExpr    = 53
	ClickHouseParserRULE_tableIdentifier      = 54
	ClickHouseParserRULE_tableArgList         = 55
	ClickHouseParserRULE_tableArgExpr         = 56
	ClickHouseParserRULE_databaseIdentifier   = 57
	ClickHouseParserRULE_paramSlot            = 58
	ClickHouseParserRULE_floatingLiteral      = 59
	ClickHouseParserRULE_numberLiteral        = 60
	ClickHouseParserRULE_literal              = 61
	ClickHouseParserRULE_interval             = 62
	ClickHouseParserRULE_keyword              = 63
	ClickHouseParserRULE_keywordForAlias      = 64
	ClickHouseParserRULE_alias                = 65
	ClickHouseParserRULE_identifier           = 66
	ClickHouseParserRULE_identifierOrNull     = 67
	ClickHouseParserRULE_enumValue            = 68
)

// IQueryStmtContext is an interface to support dynamic dispatch.
type IQueryStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Query() IQueryContext
	EOF() antlr.TerminalNode
	INTO() antlr.TerminalNode
	OUTFILE() antlr.TerminalNode
	STRING_LITERAL() antlr.TerminalNode
	FORMAT() antlr.TerminalNode
	IdentifierOrNull() IIdentifierOrNullContext
	SEMICOLON() antlr.TerminalNode

	// IsQueryStmtContext differentiates from other interfaces.
	IsQueryStmtContext()
}

type QueryStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQueryStmtContext() *QueryStmtContext {
	var p = new(QueryStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_queryStmt
	return p
}

func InitEmptyQueryStmtContext(p *QueryStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_queryStmt
}

func (*QueryStmtContext) IsQueryStmtContext() {}

func NewQueryStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QueryStmtContext {
	var p = new(QueryStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_queryStmt

	return p
}

func (s *QueryStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *QueryStmtContext) Query() IQueryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQueryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *QueryStmtContext) EOF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEOF, 0)
}

func (s *QueryStmtContext) INTO() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINTO, 0)
}

func (s *QueryStmtContext) OUTFILE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOUTFILE, 0)
}

func (s *QueryStmtContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTRING_LITERAL, 0)
}

func (s *QueryStmtContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFORMAT, 0)
}

func (s *QueryStmtContext) IdentifierOrNull() IIdentifierOrNullContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierOrNullContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierOrNullContext)
}

func (s *QueryStmtContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSEMICOLON, 0)
}

func (s *QueryStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QueryStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitQueryStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) QueryStmt() (localctx IQueryStmtContext) {
	localctx = NewQueryStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, ClickHouseParserRULE_queryStmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(138)
		p.Query()
	}
	p.SetState(142)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserINTO {
		{
			p.SetState(139)
			p.Match(ClickHouseParserINTO)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(140)
			p.Match(ClickHouseParserOUTFILE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(141)
			p.Match(ClickHouseParserSTRING_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(146)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserFORMAT {
		{
			p.SetState(144)
			p.Match(ClickHouseParserFORMAT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(145)
			p.IdentifierOrNull()
		}

	}
	p.SetState(149)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserSEMICOLON {
		{
			p.SetState(148)
			p.Match(ClickHouseParserSEMICOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(151)
		p.Match(ClickHouseParserEOF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQueryContext is an interface to support dynamic dispatch.
type IQueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SelectUnionStmt() ISelectUnionStmtContext
	AllSetStmt() []ISetStmtContext
	SetStmt(i int) ISetStmtContext
	Ctes() ICtesContext

	// IsQueryContext differentiates from other interfaces.
	IsQueryContext()
}

type QueryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQueryContext() *QueryContext {
	var p = new(QueryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_query
	return p
}

func InitEmptyQueryContext(p *QueryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_query
}

func (*QueryContext) IsQueryContext() {}

func NewQueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QueryContext {
	var p = new(QueryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_query

	return p
}

func (s *QueryContext) GetParser() antlr.Parser { return s.parser }

func (s *QueryContext) SelectUnionStmt() ISelectUnionStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectUnionStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectUnionStmtContext)
}

func (s *QueryContext) AllSetStmt() []ISetStmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISetStmtContext); ok {
			len++
		}
	}

	tst := make([]ISetStmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISetStmtContext); ok {
			tst[i] = t.(ISetStmtContext)
			i++
		}
	}

	return tst
}

func (s *QueryContext) SetStmt(i int) ISetStmtContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISetStmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISetStmtContext)
}

func (s *QueryContext) Ctes() ICtesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICtesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICtesContext)
}

func (s *QueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QueryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitQuery(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) Query() (localctx IQueryContext) {
	localctx = NewQueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, ClickHouseParserRULE_query)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(156)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ClickHouseParserSET {
		{
			p.SetState(153)
			p.SetStmt()
		}

		p.SetState(158)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(160)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 4, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(159)
			p.Ctes()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(162)
		p.SelectUnionStmt()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICtesContext is an interface to support dynamic dispatch.
type ICtesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WITH() antlr.TerminalNode
	AllNamedQuery() []INamedQueryContext
	NamedQuery(i int) INamedQueryContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsCtesContext differentiates from other interfaces.
	IsCtesContext()
}

type CtesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCtesContext() *CtesContext {
	var p = new(CtesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_ctes
	return p
}

func InitEmptyCtesContext(p *CtesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_ctes
}

func (*CtesContext) IsCtesContext() {}

func NewCtesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CtesContext {
	var p = new(CtesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_ctes

	return p
}

func (s *CtesContext) GetParser() antlr.Parser { return s.parser }

func (s *CtesContext) WITH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWITH, 0)
}

func (s *CtesContext) AllNamedQuery() []INamedQueryContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INamedQueryContext); ok {
			len++
		}
	}

	tst := make([]INamedQueryContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INamedQueryContext); ok {
			tst[i] = t.(INamedQueryContext)
			i++
		}
	}

	return tst
}

func (s *CtesContext) NamedQuery(i int) INamedQueryContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamedQueryContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamedQueryContext)
}

func (s *CtesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *CtesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *CtesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CtesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CtesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitCtes(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) Ctes() (localctx ICtesContext) {
	localctx = NewCtesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, ClickHouseParserRULE_ctes)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(164)
		p.Match(ClickHouseParserWITH)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(165)
		p.NamedQuery()
	}
	p.SetState(170)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ClickHouseParserCOMMA {
		{
			p.SetState(166)
			p.Match(ClickHouseParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(167)
			p.NamedQuery()
		}

		p.SetState(172)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INamedQueryContext is an interface to support dynamic dispatch.
type INamedQueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// Getter signatures
	AS() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	Query() IQueryContext
	RPAREN() antlr.TerminalNode
	Identifier() IIdentifierContext
	ColumnAliases() IColumnAliasesContext

	// IsNamedQueryContext differentiates from other interfaces.
	IsNamedQueryContext()
}

type NamedQueryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyNamedQueryContext() *NamedQueryContext {
	var p = new(NamedQueryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_namedQuery
	return p
}

func InitEmptyNamedQueryContext(p *NamedQueryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_namedQuery
}

func (*NamedQueryContext) IsNamedQueryContext() {}

func NewNamedQueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamedQueryContext {
	var p = new(NamedQueryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_namedQuery

	return p
}

func (s *NamedQueryContext) GetParser() antlr.Parser { return s.parser }

func (s *NamedQueryContext) GetName() IIdentifierContext { return s.name }

func (s *NamedQueryContext) SetName(v IIdentifierContext) { s.name = v }

func (s *NamedQueryContext) AS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAS, 0)
}

func (s *NamedQueryContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *NamedQueryContext) Query() IQueryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQueryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *NamedQueryContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *NamedQueryContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *NamedQueryContext) ColumnAliases() IColumnAliasesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnAliasesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnAliasesContext)
}

func (s *NamedQueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamedQueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamedQueryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitNamedQuery(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) NamedQuery() (localctx INamedQueryContext) {
	localctx = NewNamedQueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, ClickHouseParserRULE_namedQuery)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(173)

		var _x = p.Identifier()

		localctx.(*NamedQueryContext).name = _x
	}
	p.SetState(175)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserLPAREN {
		{
			p.SetState(174)
			p.ColumnAliases()
		}

	}
	{
		p.SetState(177)
		p.Match(ClickHouseParserAS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(178)
		p.Match(ClickHouseParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(179)
		p.Query()
	}
	{
		p.SetState(180)
		p.Match(ClickHouseParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumnAliasesContext is an interface to support dynamic dispatch.
type IColumnAliasesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LPAREN() antlr.TerminalNode
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	RPAREN() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsColumnAliasesContext differentiates from other interfaces.
	IsColumnAliasesContext()
}

type ColumnAliasesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnAliasesContext() *ColumnAliasesContext {
	var p = new(ColumnAliasesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnAliases
	return p
}

func InitEmptyColumnAliasesContext(p *ColumnAliasesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnAliases
}

func (*ColumnAliasesContext) IsColumnAliasesContext() {}

func NewColumnAliasesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnAliasesContext {
	var p = new(ColumnAliasesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_columnAliases

	return p
}

func (s *ColumnAliasesContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnAliasesContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnAliasesContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *ColumnAliasesContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnAliasesContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnAliasesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *ColumnAliasesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *ColumnAliasesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnAliasesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnAliasesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnAliases(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) ColumnAliases() (localctx IColumnAliasesContext) {
	localctx = NewColumnAliasesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, ClickHouseParserRULE_columnAliases)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(182)
		p.Match(ClickHouseParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(183)
		p.Identifier()
	}
	p.SetState(188)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ClickHouseParserCOMMA {
		{
			p.SetState(184)
			p.Match(ClickHouseParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(185)
			p.Identifier()
		}

		p.SetState(190)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(191)
		p.Match(ClickHouseParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelectUnionStmtContext is an interface to support dynamic dispatch.
type ISelectUnionStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SelectStmtWithParens() ISelectStmtWithParensContext
	AllSelectUnionStmtItem() []ISelectUnionStmtItemContext
	SelectUnionStmtItem(i int) ISelectUnionStmtItemContext

	// IsSelectUnionStmtContext differentiates from other interfaces.
	IsSelectUnionStmtContext()
}

type SelectUnionStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectUnionStmtContext() *SelectUnionStmtContext {
	var p = new(SelectUnionStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_selectUnionStmt
	return p
}

func InitEmptySelectUnionStmtContext(p *SelectUnionStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_selectUnionStmt
}

func (*SelectUnionStmtContext) IsSelectUnionStmtContext() {}

func NewSelectUnionStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectUnionStmtContext {
	var p = new(SelectUnionStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_selectUnionStmt

	return p
}

func (s *SelectUnionStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectUnionStmtContext) SelectStmtWithParens() ISelectStmtWithParensContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectStmtWithParensContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectStmtWithParensContext)
}

func (s *SelectUnionStmtContext) AllSelectUnionStmtItem() []ISelectUnionStmtItemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISelectUnionStmtItemContext); ok {
			len++
		}
	}

	tst := make([]ISelectUnionStmtItemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISelectUnionStmtItemContext); ok {
			tst[i] = t.(ISelectUnionStmtItemContext)
			i++
		}
	}

	return tst
}

func (s *SelectUnionStmtContext) SelectUnionStmtItem(i int) ISelectUnionStmtItemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectUnionStmtItemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectUnionStmtItemContext)
}

func (s *SelectUnionStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectUnionStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectUnionStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitSelectUnionStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) SelectUnionStmt() (localctx ISelectUnionStmtContext) {
	localctx = NewSelectUnionStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, ClickHouseParserRULE_selectUnionStmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(193)
		p.SelectStmtWithParens()
	}
	p.SetState(197)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ClickHouseParserEXCEPT || _la == ClickHouseParserINTERSECT || _la == ClickHouseParserUNION {
		{
			p.SetState(194)
			p.SelectUnionStmtItem()
		}

		p.SetState(199)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelectUnionStmtItemContext is an interface to support dynamic dispatch.
type ISelectUnionStmtItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SelectStmtWithParens() ISelectStmtWithParensContext
	UNION() antlr.TerminalNode
	EXCEPT() antlr.TerminalNode
	INTERSECT() antlr.TerminalNode
	ALL() antlr.TerminalNode
	DISTINCT() antlr.TerminalNode

	// IsSelectUnionStmtItemContext differentiates from other interfaces.
	IsSelectUnionStmtItemContext()
}

type SelectUnionStmtItemContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectUnionStmtItemContext() *SelectUnionStmtItemContext {
	var p = new(SelectUnionStmtItemContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_selectUnionStmtItem
	return p
}

func InitEmptySelectUnionStmtItemContext(p *SelectUnionStmtItemContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_selectUnionStmtItem
}

func (*SelectUnionStmtItemContext) IsSelectUnionStmtItemContext() {}

func NewSelectUnionStmtItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectUnionStmtItemContext {
	var p = new(SelectUnionStmtItemContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_selectUnionStmtItem

	return p
}

func (s *SelectUnionStmtItemContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectUnionStmtItemContext) SelectStmtWithParens() ISelectStmtWithParensContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectStmtWithParensContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectStmtWithParensContext)
}

func (s *SelectUnionStmtItemContext) UNION() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserUNION, 0)
}

func (s *SelectUnionStmtItemContext) EXCEPT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXCEPT, 0)
}

func (s *SelectUnionStmtItemContext) INTERSECT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINTERSECT, 0)
}

func (s *SelectUnionStmtItemContext) ALL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserALL, 0)
}

func (s *SelectUnionStmtItemContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDISTINCT, 0)
}

func (s *SelectUnionStmtItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectUnionStmtItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectUnionStmtItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitSelectUnionStmtItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) SelectUnionStmtItem() (localctx ISelectUnionStmtItemContext) {
	localctx = NewSelectUnionStmtItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, ClickHouseParserRULE_selectUnionStmtItem)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(200)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ClickHouseParserEXCEPT || _la == ClickHouseParserINTERSECT || _la == ClickHouseParserUNION) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(202)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserALL || _la == ClickHouseParserDISTINCT {
		{
			p.SetState(201)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ClickHouseParserALL || _la == ClickHouseParserDISTINCT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(204)
		p.SelectStmtWithParens()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelectStmtWithParensContext is an interface to support dynamic dispatch.
type ISelectStmtWithParensContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SelectStmt() ISelectStmtContext
	LPAREN() antlr.TerminalNode
	SelectUnionStmt() ISelectUnionStmtContext
	RPAREN() antlr.TerminalNode

	// IsSelectStmtWithParensContext differentiates from other interfaces.
	IsSelectStmtWithParensContext()
}

type SelectStmtWithParensContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectStmtWithParensContext() *SelectStmtWithParensContext {
	var p = new(SelectStmtWithParensContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_selectStmtWithParens
	return p
}

func InitEmptySelectStmtWithParensContext(p *SelectStmtWithParensContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_selectStmtWithParens
}

func (*SelectStmtWithParensContext) IsSelectStmtWithParensContext() {}

func NewSelectStmtWithParensContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectStmtWithParensContext {
	var p = new(SelectStmtWithParensContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_selectStmtWithParens

	return p
}

func (s *SelectStmtWithParensContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectStmtWithParensContext) SelectStmt() ISelectStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectStmtContext)
}

func (s *SelectStmtWithParensContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *SelectStmtWithParensContext) SelectUnionStmt() ISelectUnionStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectUnionStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectUnionStmtContext)
}

func (s *SelectStmtWithParensContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *SelectStmtWithParensContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectStmtWithParensContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectStmtWithParensContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitSelectStmtWithParens(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) SelectStmtWithParens() (localctx ISelectStmtWithParensContext) {
	localctx = NewSelectStmtWithParensContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, ClickHouseParserRULE_selectStmtWithParens)
	p.SetState(211)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ClickHouseParserSELECT, ClickHouseParserWITH:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(206)
			p.SelectStmt()
		}

	case ClickHouseParserLPAREN:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(207)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(208)
			p.SelectUnionStmt()
		}
		{
			p.SetState(209)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelectStmtContext is an interface to support dynamic dispatch.
type ISelectStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ProjectionClause() IProjectionClauseContext
	WithClause() IWithClauseContext
	FromClause() IFromClauseContext
	ArrayJoinClause() IArrayJoinClauseContext
	WindowClause() IWindowClauseContext
	QualifyClause() IQualifyClauseContext
	PrewhereClause() IPrewhereClauseContext
	WhereClause() IWhereClauseContext
	GroupByClause() IGroupByClauseContext
	HavingClause() IHavingClauseContext
	OrderByClause() IOrderByClauseContext
	LimitByClause() ILimitByClauseContext
	LimitClause() ILimitClauseContext
	SettingsClause() ISettingsClauseContext

	// IsSelectStmtContext differentiates from other interfaces.
	IsSelectStmtContext()
}

type SelectStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectStmtContext() *SelectStmtContext {
	var p = new(SelectStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_selectStmt
	return p
}

func InitEmptySelectStmtContext(p *SelectStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_selectStmt
}

func (*SelectStmtContext) IsSelectStmtContext() {}

func NewSelectStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectStmtContext {
	var p = new(SelectStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_selectStmt

	return p
}

func (s *SelectStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectStmtContext) ProjectionClause() IProjectionClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProjectionClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProjectionClauseContext)
}

func (s *SelectStmtContext) WithClause() IWithClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWithClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWithClauseContext)
}

func (s *SelectStmtContext) FromClause() IFromClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFromClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFromClauseContext)
}

func (s *SelectStmtContext) ArrayJoinClause() IArrayJoinClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayJoinClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayJoinClauseContext)
}

func (s *SelectStmtContext) WindowClause() IWindowClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindowClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindowClauseContext)
}

func (s *SelectStmtContext) QualifyClause() IQualifyClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualifyClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualifyClauseContext)
}

func (s *SelectStmtContext) PrewhereClause() IPrewhereClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrewhereClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrewhereClauseContext)
}

func (s *SelectStmtContext) WhereClause() IWhereClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhereClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhereClauseContext)
}

func (s *SelectStmtContext) GroupByClause() IGroupByClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGroupByClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGroupByClauseContext)
}

func (s *SelectStmtContext) HavingClause() IHavingClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHavingClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHavingClauseContext)
}

func (s *SelectStmtContext) OrderByClause() IOrderByClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrderByClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrderByClauseContext)
}

func (s *SelectStmtContext) LimitByClause() ILimitByClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILimitByClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILimitByClauseContext)
}

func (s *SelectStmtContext) LimitClause() ILimitClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILimitClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILimitClauseContext)
}

func (s *SelectStmtContext) SettingsClause() ISettingsClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISettingsClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISettingsClauseContext)
}

func (s *SelectStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitSelectStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) SelectStmt() (localctx ISelectStmtContext) {
	localctx = NewSelectStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, ClickHouseParserRULE_selectStmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(214)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserWITH {
		{
			p.SetState(213)
			p.WithClause()
		}

	}
	{
		p.SetState(216)
		p.ProjectionClause()
	}
	p.SetState(218)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserFROM {
		{
			p.SetState(217)
			p.FromClause()
		}

	}
	p.SetState(221)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserARRAY || _la == ClickHouseParserINNER || _la == ClickHouseParserLEFT {
		{
			p.SetState(220)
			p.ArrayJoinClause()
		}

	}
	p.SetState(224)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserWINDOW {
		{
			p.SetState(223)
			p.WindowClause()
		}

	}
	p.SetState(227)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserQUALIFY {
		{
			p.SetState(226)
			p.QualifyClause()
		}

	}
	p.SetState(230)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserPREWHERE {
		{
			p.SetState(229)
			p.PrewhereClause()
		}

	}
	p.SetState(233)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserWHERE {
		{
			p.SetState(232)
			p.WhereClause()
		}

	}
	p.SetState(236)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserGROUP {
		{
			p.SetState(235)
			p.GroupByClause()
		}

	}
	p.SetState(239)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserHAVING {
		{
			p.SetState(238)
			p.HavingClause()
		}

	}
	p.SetState(242)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserORDER {
		{
			p.SetState(241)
			p.OrderByClause()
		}

	}
	p.SetState(245)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 21, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(244)
			p.LimitByClause()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(248)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserLIMIT {
		{
			p.SetState(247)
			p.LimitClause()
		}

	}
	p.SetState(251)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserSETTINGS {
		{
			p.SetState(250)
			p.SettingsClause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IProjectionClauseContext is an interface to support dynamic dispatch.
type IProjectionClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SELECT() antlr.TerminalNode
	ColumnExprList() IColumnExprListContext
	DISTINCT() antlr.TerminalNode
	TopClause() ITopClauseContext

	// IsProjectionClauseContext differentiates from other interfaces.
	IsProjectionClauseContext()
}

type ProjectionClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProjectionClauseContext() *ProjectionClauseContext {
	var p = new(ProjectionClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_projectionClause
	return p
}

func InitEmptyProjectionClauseContext(p *ProjectionClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_projectionClause
}

func (*ProjectionClauseContext) IsProjectionClauseContext() {}

func NewProjectionClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProjectionClauseContext {
	var p = new(ProjectionClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_projectionClause

	return p
}

func (s *ProjectionClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ProjectionClauseContext) SELECT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSELECT, 0)
}

func (s *ProjectionClauseContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *ProjectionClauseContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDISTINCT, 0)
}

func (s *ProjectionClauseContext) TopClause() ITopClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITopClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITopClauseContext)
}

func (s *ProjectionClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProjectionClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProjectionClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitProjectionClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) ProjectionClause() (localctx IProjectionClauseContext) {
	localctx = NewProjectionClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, ClickHouseParserRULE_projectionClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(253)
		p.Match(ClickHouseParserSELECT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(255)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 24, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(254)
			p.Match(ClickHouseParserDISTINCT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(258)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 25, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(257)
			p.TopClause()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(260)
		p.ColumnExprList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWithClauseContext is an interface to support dynamic dispatch.
type IWithClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WITH() antlr.TerminalNode
	ColumnExprList() IColumnExprListContext

	// IsWithClauseContext differentiates from other interfaces.
	IsWithClauseContext()
}

type WithClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWithClauseContext() *WithClauseContext {
	var p = new(WithClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_withClause
	return p
}

func InitEmptyWithClauseContext(p *WithClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_withClause
}

func (*WithClauseContext) IsWithClauseContext() {}

func NewWithClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WithClauseContext {
	var p = new(WithClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_withClause

	return p
}

func (s *WithClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *WithClauseContext) WITH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWITH, 0)
}

func (s *WithClauseContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *WithClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WithClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WithClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitWithClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) WithClause() (localctx IWithClauseContext) {
	localctx = NewWithClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, ClickHouseParserRULE_withClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(262)
		p.Match(ClickHouseParserWITH)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(263)
		p.ColumnExprList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITopClauseContext is an interface to support dynamic dispatch.
type ITopClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TOP() antlr.TerminalNode
	DECIMAL_LITERAL() antlr.TerminalNode
	WITH() antlr.TerminalNode
	TIES() antlr.TerminalNode

	// IsTopClauseContext differentiates from other interfaces.
	IsTopClauseContext()
}

type TopClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTopClauseContext() *TopClauseContext {
	var p = new(TopClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_topClause
	return p
}

func InitEmptyTopClauseContext(p *TopClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_topClause
}

func (*TopClauseContext) IsTopClauseContext() {}

func NewTopClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TopClauseContext {
	var p = new(TopClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_topClause

	return p
}

func (s *TopClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *TopClauseContext) TOP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTOP, 0)
}

func (s *TopClauseContext) DECIMAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDECIMAL_LITERAL, 0)
}

func (s *TopClauseContext) WITH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWITH, 0)
}

func (s *TopClauseContext) TIES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTIES, 0)
}

func (s *TopClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TopClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TopClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitTopClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) TopClause() (localctx ITopClauseContext) {
	localctx = NewTopClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, ClickHouseParserRULE_topClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(265)
		p.Match(ClickHouseParserTOP)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(266)
		p.Match(ClickHouseParserDECIMAL_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(269)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 26, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(267)
			p.Match(ClickHouseParserWITH)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(268)
			p.Match(ClickHouseParserTIES)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFromClauseContext is an interface to support dynamic dispatch.
type IFromClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FROM() antlr.TerminalNode
	JoinExpr() IJoinExprContext

	// IsFromClauseContext differentiates from other interfaces.
	IsFromClauseContext()
}

type FromClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFromClauseContext() *FromClauseContext {
	var p = new(FromClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_fromClause
	return p
}

func InitEmptyFromClauseContext(p *FromClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_fromClause
}

func (*FromClauseContext) IsFromClauseContext() {}

func NewFromClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FromClauseContext {
	var p = new(FromClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_fromClause

	return p
}

func (s *FromClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *FromClauseContext) FROM() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFROM, 0)
}

func (s *FromClauseContext) JoinExpr() IJoinExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoinExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoinExprContext)
}

func (s *FromClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FromClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FromClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitFromClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) FromClause() (localctx IFromClauseContext) {
	localctx = NewFromClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, ClickHouseParserRULE_fromClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(271)
		p.Match(ClickHouseParserFROM)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(272)
		p.joinExpr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArrayJoinClauseContext is an interface to support dynamic dispatch.
type IArrayJoinClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ARRAY() antlr.TerminalNode
	JOIN() antlr.TerminalNode
	ColumnExprList() IColumnExprListContext
	LEFT() antlr.TerminalNode
	INNER() antlr.TerminalNode

	// IsArrayJoinClauseContext differentiates from other interfaces.
	IsArrayJoinClauseContext()
}

type ArrayJoinClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayJoinClauseContext() *ArrayJoinClauseContext {
	var p = new(ArrayJoinClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_arrayJoinClause
	return p
}

func InitEmptyArrayJoinClauseContext(p *ArrayJoinClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_arrayJoinClause
}

func (*ArrayJoinClauseContext) IsArrayJoinClauseContext() {}

func NewArrayJoinClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayJoinClauseContext {
	var p = new(ArrayJoinClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_arrayJoinClause

	return p
}

func (s *ArrayJoinClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayJoinClauseContext) ARRAY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserARRAY, 0)
}

func (s *ArrayJoinClauseContext) JOIN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserJOIN, 0)
}

func (s *ArrayJoinClauseContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *ArrayJoinClauseContext) LEFT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLEFT, 0)
}

func (s *ArrayJoinClauseContext) INNER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINNER, 0)
}

func (s *ArrayJoinClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayJoinClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayJoinClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitArrayJoinClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) ArrayJoinClause() (localctx IArrayJoinClauseContext) {
	localctx = NewArrayJoinClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, ClickHouseParserRULE_arrayJoinClause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(275)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserINNER || _la == ClickHouseParserLEFT {
		{
			p.SetState(274)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ClickHouseParserINNER || _la == ClickHouseParserLEFT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(277)
		p.Match(ClickHouseParserARRAY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(278)
		p.Match(ClickHouseParserJOIN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(279)
		p.ColumnExprList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWindowClauseContext is an interface to support dynamic dispatch.
type IWindowClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WINDOW() antlr.TerminalNode
	Identifier() IIdentifierContext
	AS() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	WindowExpr() IWindowExprContext
	RPAREN() antlr.TerminalNode

	// IsWindowClauseContext differentiates from other interfaces.
	IsWindowClauseContext()
}

type WindowClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindowClauseContext() *WindowClauseContext {
	var p = new(WindowClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_windowClause
	return p
}

func InitEmptyWindowClauseContext(p *WindowClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_windowClause
}

func (*WindowClauseContext) IsWindowClauseContext() {}

func NewWindowClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WindowClauseContext {
	var p = new(WindowClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_windowClause

	return p
}

func (s *WindowClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *WindowClauseContext) WINDOW() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWINDOW, 0)
}

func (s *WindowClauseContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *WindowClauseContext) AS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAS, 0)
}

func (s *WindowClauseContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *WindowClauseContext) WindowExpr() IWindowExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindowExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindowExprContext)
}

func (s *WindowClauseContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *WindowClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WindowClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WindowClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitWindowClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) WindowClause() (localctx IWindowClauseContext) {
	localctx = NewWindowClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, ClickHouseParserRULE_windowClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(281)
		p.Match(ClickHouseParserWINDOW)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(282)
		p.Identifier()
	}
	{
		p.SetState(283)
		p.Match(ClickHouseParserAS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(284)
		p.Match(ClickHouseParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(285)
		p.WindowExpr()
	}
	{
		p.SetState(286)
		p.Match(ClickHouseParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQualifyClauseContext is an interface to support dynamic dispatch.
type IQualifyClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	QUALIFY() antlr.TerminalNode
	ColumnExpr() IColumnExprContext

	// IsQualifyClauseContext differentiates from other interfaces.
	IsQualifyClauseContext()
}

type QualifyClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQualifyClauseContext() *QualifyClauseContext {
	var p = new(QualifyClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_qualifyClause
	return p
}

func InitEmptyQualifyClauseContext(p *QualifyClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_qualifyClause
}

func (*QualifyClauseContext) IsQualifyClauseContext() {}

func NewQualifyClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QualifyClauseContext {
	var p = new(QualifyClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_qualifyClause

	return p
}

func (s *QualifyClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *QualifyClauseContext) QUALIFY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserQUALIFY, 0)
}

func (s *QualifyClauseContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *QualifyClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QualifyClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QualifyClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitQualifyClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) QualifyClause() (localctx IQualifyClauseContext) {
	localctx = NewQualifyClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, ClickHouseParserRULE_qualifyClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(288)
		p.Match(ClickHouseParserQUALIFY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(289)
		p.columnExpr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrewhereClauseContext is an interface to support dynamic dispatch.
type IPrewhereClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PREWHERE() antlr.TerminalNode
	ColumnExpr() IColumnExprContext

	// IsPrewhereClauseContext differentiates from other interfaces.
	IsPrewhereClauseContext()
}

type PrewhereClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrewhereClauseContext() *PrewhereClauseContext {
	var p = new(PrewhereClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_prewhereClause
	return p
}

func InitEmptyPrewhereClauseContext(p *PrewhereClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_prewhereClause
}

func (*PrewhereClauseContext) IsPrewhereClauseContext() {}

func NewPrewhereClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrewhereClauseContext {
	var p = new(PrewhereClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_prewhereClause

	return p
}

func (s *PrewhereClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *PrewhereClauseContext) PREWHERE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPREWHERE, 0)
}

func (s *PrewhereClauseContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *PrewhereClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrewhereClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrewhereClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitPrewhereClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) PrewhereClause() (localctx IPrewhereClauseContext) {
	localctx = NewPrewhereClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, ClickHouseParserRULE_prewhereClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(291)
		p.Match(ClickHouseParserPREWHERE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(292)
		p.columnExpr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWhereClauseContext is an interface to support dynamic dispatch.
type IWhereClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WHERE() antlr.TerminalNode
	ColumnExpr() IColumnExprContext

	// IsWhereClauseContext differentiates from other interfaces.
	IsWhereClauseContext()
}

type WhereClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhereClauseContext() *WhereClauseContext {
	var p = new(WhereClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_whereClause
	return p
}

func InitEmptyWhereClauseContext(p *WhereClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_whereClause
}

func (*WhereClauseContext) IsWhereClauseContext() {}

func NewWhereClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhereClauseContext {
	var p = new(WhereClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_whereClause

	return p
}

func (s *WhereClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *WhereClauseContext) WHERE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWHERE, 0)
}

func (s *WhereClauseContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *WhereClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhereClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhereClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitWhereClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) WhereClause() (localctx IWhereClauseContext) {
	localctx = NewWhereClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, ClickHouseParserRULE_whereClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(294)
		p.Match(ClickHouseParserWHERE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(295)
		p.columnExpr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGroupByClauseContext is an interface to support dynamic dispatch.
type IGroupByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	GROUP() antlr.TerminalNode
	BY() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	ColumnExprList() IColumnExprListContext
	RPAREN() antlr.TerminalNode
	AllCUBE() []antlr.TerminalNode
	CUBE(i int) antlr.TerminalNode
	AllROLLUP() []antlr.TerminalNode
	ROLLUP(i int) antlr.TerminalNode
	AllWITH() []antlr.TerminalNode
	WITH(i int) antlr.TerminalNode
	TOTALS() antlr.TerminalNode

	// IsGroupByClauseContext differentiates from other interfaces.
	IsGroupByClauseContext()
}

type GroupByClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroupByClauseContext() *GroupByClauseContext {
	var p = new(GroupByClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_groupByClause
	return p
}

func InitEmptyGroupByClauseContext(p *GroupByClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_groupByClause
}

func (*GroupByClauseContext) IsGroupByClauseContext() {}

func NewGroupByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupByClauseContext {
	var p = new(GroupByClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_groupByClause

	return p
}

func (s *GroupByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupByClauseContext) GROUP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserGROUP, 0)
}

func (s *GroupByClauseContext) BY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserBY, 0)
}

func (s *GroupByClauseContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *GroupByClauseContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *GroupByClauseContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *GroupByClauseContext) AllCUBE() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCUBE)
}

func (s *GroupByClauseContext) CUBE(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCUBE, i)
}

func (s *GroupByClauseContext) AllROLLUP() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserROLLUP)
}

func (s *GroupByClauseContext) ROLLUP(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserROLLUP, i)
}

func (s *GroupByClauseContext) AllWITH() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserWITH)
}

func (s *GroupByClauseContext) WITH(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWITH, i)
}

func (s *GroupByClauseContext) TOTALS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTOTALS, 0)
}

func (s *GroupByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GroupByClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitGroupByClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) GroupByClause() (localctx IGroupByClauseContext) {
	localctx = NewGroupByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, ClickHouseParserRULE_groupByClause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(297)
		p.Match(ClickHouseParserGROUP)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(298)
		p.Match(ClickHouseParserBY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(305)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 28, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(299)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ClickHouseParserCUBE || _la == ClickHouseParserROLLUP) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(300)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(301)
			p.ColumnExprList()
		}
		{
			p.SetState(302)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		{
			p.SetState(304)
			p.ColumnExprList()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.SetState(309)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 29, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(307)
			p.Match(ClickHouseParserWITH)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(308)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ClickHouseParserCUBE || _la == ClickHouseParserROLLUP) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(313)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserWITH {
		{
			p.SetState(311)
			p.Match(ClickHouseParserWITH)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(312)
			p.Match(ClickHouseParserTOTALS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IHavingClauseContext is an interface to support dynamic dispatch.
type IHavingClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	HAVING() antlr.TerminalNode
	ColumnExpr() IColumnExprContext

	// IsHavingClauseContext differentiates from other interfaces.
	IsHavingClauseContext()
}

type HavingClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHavingClauseContext() *HavingClauseContext {
	var p = new(HavingClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_havingClause
	return p
}

func InitEmptyHavingClauseContext(p *HavingClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_havingClause
}

func (*HavingClauseContext) IsHavingClauseContext() {}

func NewHavingClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HavingClauseContext {
	var p = new(HavingClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_havingClause

	return p
}

func (s *HavingClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *HavingClauseContext) HAVING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserHAVING, 0)
}

func (s *HavingClauseContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *HavingClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HavingClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HavingClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitHavingClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) HavingClause() (localctx IHavingClauseContext) {
	localctx = NewHavingClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, ClickHouseParserRULE_havingClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(315)
		p.Match(ClickHouseParserHAVING)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(316)
		p.columnExpr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInterpolateExprsContext is an interface to support dynamic dispatch.
type IInterpolateExprsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllColumnExpr() []IColumnExprContext
	ColumnExpr(i int) IColumnExprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	AllAS() []antlr.TerminalNode
	AS(i int) antlr.TerminalNode

	// IsInterpolateExprsContext differentiates from other interfaces.
	IsInterpolateExprsContext()
}

type InterpolateExprsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterpolateExprsContext() *InterpolateExprsContext {
	var p = new(InterpolateExprsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_interpolateExprs
	return p
}

func InitEmptyInterpolateExprsContext(p *InterpolateExprsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_interpolateExprs
}

func (*InterpolateExprsContext) IsInterpolateExprsContext() {}

func NewInterpolateExprsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterpolateExprsContext {
	var p = new(InterpolateExprsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_interpolateExprs

	return p
}

func (s *InterpolateExprsContext) GetParser() antlr.Parser { return s.parser }

func (s *InterpolateExprsContext) AllColumnExpr() []IColumnExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnExprContext); ok {
			tst[i] = t.(IColumnExprContext)
			i++
		}
	}

	return tst
}

func (s *InterpolateExprsContext) ColumnExpr(i int) IColumnExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *InterpolateExprsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *InterpolateExprsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *InterpolateExprsContext) AllAS() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserAS)
}

func (s *InterpolateExprsContext) AS(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAS, i)
}

func (s *InterpolateExprsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterpolateExprsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterpolateExprsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitInterpolateExprs(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) InterpolateExprs() (localctx IInterpolateExprsContext) {
	localctx = NewInterpolateExprsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, ClickHouseParserRULE_interpolateExprs)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(318)
		p.columnExpr(0)
	}
	p.SetState(321)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserAS {
		{
			p.SetState(319)
			p.Match(ClickHouseParserAS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(320)
			p.columnExpr(0)
		}

	}

	p.SetState(331)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ClickHouseParserCOMMA {
		{
			p.SetState(323)
			p.Match(ClickHouseParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(324)
			p.columnExpr(0)
		}
		p.SetState(327)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserAS {
			{
				p.SetState(325)
				p.Match(ClickHouseParserAS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(326)
				p.columnExpr(0)
			}

		}

		p.SetState(333)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrderByClauseContext is an interface to support dynamic dispatch.
type IOrderByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ORDER() antlr.TerminalNode
	BY() antlr.TerminalNode
	OrderExprList() IOrderExprListContext
	WITH() antlr.TerminalNode
	FILL() antlr.TerminalNode
	FROM() antlr.TerminalNode
	AllColumnExpr() []IColumnExprContext
	ColumnExpr(i int) IColumnExprContext
	TO() antlr.TerminalNode
	STEP() antlr.TerminalNode
	STALENESS() antlr.TerminalNode
	INTERPOLATE() antlr.TerminalNode
	InterpolateExprs() IInterpolateExprsContext

	// IsOrderByClauseContext differentiates from other interfaces.
	IsOrderByClauseContext()
}

type OrderByClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrderByClauseContext() *OrderByClauseContext {
	var p = new(OrderByClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_orderByClause
	return p
}

func InitEmptyOrderByClauseContext(p *OrderByClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_orderByClause
}

func (*OrderByClauseContext) IsOrderByClauseContext() {}

func NewOrderByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrderByClauseContext {
	var p = new(OrderByClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_orderByClause

	return p
}

func (s *OrderByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *OrderByClauseContext) ORDER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserORDER, 0)
}

func (s *OrderByClauseContext) BY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserBY, 0)
}

func (s *OrderByClauseContext) OrderExprList() IOrderExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrderExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrderExprListContext)
}

func (s *OrderByClauseContext) WITH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWITH, 0)
}

func (s *OrderByClauseContext) FILL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFILL, 0)
}

func (s *OrderByClauseContext) FROM() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFROM, 0)
}

func (s *OrderByClauseContext) AllColumnExpr() []IColumnExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnExprContext); ok {
			tst[i] = t.(IColumnExprContext)
			i++
		}
	}

	return tst
}

func (s *OrderByClauseContext) ColumnExpr(i int) IColumnExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *OrderByClauseContext) TO() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTO, 0)
}

func (s *OrderByClauseContext) STEP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTEP, 0)
}

func (s *OrderByClauseContext) STALENESS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTALENESS, 0)
}

func (s *OrderByClauseContext) INTERPOLATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINTERPOLATE, 0)
}

func (s *OrderByClauseContext) InterpolateExprs() IInterpolateExprsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterpolateExprsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterpolateExprsContext)
}

func (s *OrderByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrderByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrderByClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitOrderByClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) OrderByClause() (localctx IOrderByClauseContext) {
	localctx = NewOrderByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, ClickHouseParserRULE_orderByClause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(334)
		p.Match(ClickHouseParserORDER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(335)
		p.Match(ClickHouseParserBY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(336)
		p.OrderExprList()
	}
	p.SetState(359)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserWITH {
		{
			p.SetState(337)
			p.Match(ClickHouseParserWITH)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(338)
			p.Match(ClickHouseParserFILL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(341)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserFROM {
			{
				p.SetState(339)
				p.Match(ClickHouseParserFROM)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(340)
				p.columnExpr(0)
			}

		}
		p.SetState(345)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserTO {
			{
				p.SetState(343)
				p.Match(ClickHouseParserTO)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(344)
				p.columnExpr(0)
			}

		}
		p.SetState(349)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserSTEP {
			{
				p.SetState(347)
				p.Match(ClickHouseParserSTEP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(348)
				p.columnExpr(0)
			}

		}
		p.SetState(353)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserSTALENESS {
			{
				p.SetState(351)
				p.Match(ClickHouseParserSTALENESS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(352)
				p.columnExpr(0)
			}

		}
		p.SetState(357)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserINTERPOLATE {
			{
				p.SetState(355)
				p.Match(ClickHouseParserINTERPOLATE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(356)
				p.InterpolateExprs()
			}

		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILimitByClauseContext is an interface to support dynamic dispatch.
type ILimitByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LIMIT() antlr.TerminalNode
	LimitExpr() ILimitExprContext
	BY() antlr.TerminalNode
	ColumnExprList() IColumnExprListContext

	// IsLimitByClauseContext differentiates from other interfaces.
	IsLimitByClauseContext()
}

type LimitByClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLimitByClauseContext() *LimitByClauseContext {
	var p = new(LimitByClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_limitByClause
	return p
}

func InitEmptyLimitByClauseContext(p *LimitByClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_limitByClause
}

func (*LimitByClauseContext) IsLimitByClauseContext() {}

func NewLimitByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LimitByClauseContext {
	var p = new(LimitByClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_limitByClause

	return p
}

func (s *LimitByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *LimitByClauseContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLIMIT, 0)
}

func (s *LimitByClauseContext) LimitExpr() ILimitExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILimitExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILimitExprContext)
}

func (s *LimitByClauseContext) BY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserBY, 0)
}

func (s *LimitByClauseContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *LimitByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LimitByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LimitByClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitLimitByClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) LimitByClause() (localctx ILimitByClauseContext) {
	localctx = NewLimitByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, ClickHouseParserRULE_limitByClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(361)
		p.Match(ClickHouseParserLIMIT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(362)
		p.LimitExpr()
	}
	{
		p.SetState(363)
		p.Match(ClickHouseParserBY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(364)
		p.ColumnExprList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILimitClauseContext is an interface to support dynamic dispatch.
type ILimitClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LIMIT() antlr.TerminalNode
	LimitExpr() ILimitExprContext
	WITH() antlr.TerminalNode
	TIES() antlr.TerminalNode

	// IsLimitClauseContext differentiates from other interfaces.
	IsLimitClauseContext()
}

type LimitClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLimitClauseContext() *LimitClauseContext {
	var p = new(LimitClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_limitClause
	return p
}

func InitEmptyLimitClauseContext(p *LimitClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_limitClause
}

func (*LimitClauseContext) IsLimitClauseContext() {}

func NewLimitClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LimitClauseContext {
	var p = new(LimitClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_limitClause

	return p
}

func (s *LimitClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *LimitClauseContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLIMIT, 0)
}

func (s *LimitClauseContext) LimitExpr() ILimitExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILimitExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILimitExprContext)
}

func (s *LimitClauseContext) WITH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWITH, 0)
}

func (s *LimitClauseContext) TIES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTIES, 0)
}

func (s *LimitClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LimitClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LimitClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitLimitClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) LimitClause() (localctx ILimitClauseContext) {
	localctx = NewLimitClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, ClickHouseParserRULE_limitClause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(366)
		p.Match(ClickHouseParserLIMIT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(367)
		p.LimitExpr()
	}
	p.SetState(370)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserWITH {
		{
			p.SetState(368)
			p.Match(ClickHouseParserWITH)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(369)
			p.Match(ClickHouseParserTIES)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISettingsClauseContext is an interface to support dynamic dispatch.
type ISettingsClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SETTINGS() antlr.TerminalNode
	SettingExprList() ISettingExprListContext

	// IsSettingsClauseContext differentiates from other interfaces.
	IsSettingsClauseContext()
}

type SettingsClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySettingsClauseContext() *SettingsClauseContext {
	var p = new(SettingsClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_settingsClause
	return p
}

func InitEmptySettingsClauseContext(p *SettingsClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_settingsClause
}

func (*SettingsClauseContext) IsSettingsClauseContext() {}

func NewSettingsClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SettingsClauseContext {
	var p = new(SettingsClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_settingsClause

	return p
}

func (s *SettingsClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *SettingsClauseContext) SETTINGS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSETTINGS, 0)
}

func (s *SettingsClauseContext) SettingExprList() ISettingExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISettingExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISettingExprListContext)
}

func (s *SettingsClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SettingsClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SettingsClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitSettingsClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) SettingsClause() (localctx ISettingsClauseContext) {
	localctx = NewSettingsClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, ClickHouseParserRULE_settingsClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(372)
		p.Match(ClickHouseParserSETTINGS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(373)
		p.SettingExprList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJoinExprContext is an interface to support dynamic dispatch.
type IJoinExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsJoinExprContext differentiates from other interfaces.
	IsJoinExprContext()
}

type JoinExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoinExprContext() *JoinExprContext {
	var p = new(JoinExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_joinExpr
	return p
}

func InitEmptyJoinExprContext(p *JoinExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_joinExpr
}

func (*JoinExprContext) IsJoinExprContext() {}

func NewJoinExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JoinExprContext {
	var p = new(JoinExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_joinExpr

	return p
}

func (s *JoinExprContext) GetParser() antlr.Parser { return s.parser }

func (s *JoinExprContext) CopyAll(ctx *JoinExprContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *JoinExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type JoinExprOpContext struct {
	JoinExprContext
}

func NewJoinExprOpContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *JoinExprOpContext {
	var p = new(JoinExprOpContext)

	InitEmptyJoinExprContext(&p.JoinExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*JoinExprContext))

	return p
}

func (s *JoinExprOpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinExprOpContext) AllJoinExpr() []IJoinExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IJoinExprContext); ok {
			len++
		}
	}

	tst := make([]IJoinExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IJoinExprContext); ok {
			tst[i] = t.(IJoinExprContext)
			i++
		}
	}

	return tst
}

func (s *JoinExprOpContext) JoinExpr(i int) IJoinExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoinExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoinExprContext)
}

func (s *JoinExprOpContext) JOIN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserJOIN, 0)
}

func (s *JoinExprOpContext) JoinConstraintClause() IJoinConstraintClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoinConstraintClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoinConstraintClauseContext)
}

func (s *JoinExprOpContext) JoinOp() IJoinOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoinOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoinOpContext)
}

func (s *JoinExprOpContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserGLOBAL, 0)
}

func (s *JoinExprOpContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLOCAL, 0)
}

func (s *JoinExprOpContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitJoinExprOp(s)

	default:
		return t.VisitChildren(s)
	}
}

type JoinExprTableContext struct {
	JoinExprContext
}

func NewJoinExprTableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *JoinExprTableContext {
	var p = new(JoinExprTableContext)

	InitEmptyJoinExprContext(&p.JoinExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*JoinExprContext))

	return p
}

func (s *JoinExprTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinExprTableContext) TableExpr() ITableExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableExprContext)
}

func (s *JoinExprTableContext) FINAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFINAL, 0)
}

func (s *JoinExprTableContext) SampleClause() ISampleClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISampleClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISampleClauseContext)
}

func (s *JoinExprTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitJoinExprTable(s)

	default:
		return t.VisitChildren(s)
	}
}

type JoinExprParensContext struct {
	JoinExprContext
}

func NewJoinExprParensContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *JoinExprParensContext {
	var p = new(JoinExprParensContext)

	InitEmptyJoinExprContext(&p.JoinExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*JoinExprContext))

	return p
}

func (s *JoinExprParensContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinExprParensContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *JoinExprParensContext) JoinExpr() IJoinExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoinExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoinExprContext)
}

func (s *JoinExprParensContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *JoinExprParensContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitJoinExprParens(s)

	default:
		return t.VisitChildren(s)
	}
}

type JoinExprCrossOpContext struct {
	JoinExprContext
}

func NewJoinExprCrossOpContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *JoinExprCrossOpContext {
	var p = new(JoinExprCrossOpContext)

	InitEmptyJoinExprContext(&p.JoinExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*JoinExprContext))

	return p
}

func (s *JoinExprCrossOpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinExprCrossOpContext) AllJoinExpr() []IJoinExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IJoinExprContext); ok {
			len++
		}
	}

	tst := make([]IJoinExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IJoinExprContext); ok {
			tst[i] = t.(IJoinExprContext)
			i++
		}
	}

	return tst
}

func (s *JoinExprCrossOpContext) JoinExpr(i int) IJoinExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoinExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoinExprContext)
}

func (s *JoinExprCrossOpContext) JoinOpCross() IJoinOpCrossContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoinOpCrossContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoinOpCrossContext)
}

func (s *JoinExprCrossOpContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitJoinExprCrossOp(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) JoinExpr() (localctx IJoinExprContext) {
	return p.joinExpr(0)
}

func (p *ClickHouseParser) joinExpr(_p int) (localctx IJoinExprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewJoinExprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IJoinExprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 50
	p.EnterRecursionRule(localctx, 50, ClickHouseParserRULE_joinExpr, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(387)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 43, p.GetParserRuleContext()) {
	case 1:
		localctx = NewJoinExprTableContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(376)
			p.tableExpr(0)
		}
		p.SetState(378)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 41, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(377)
				p.Match(ClickHouseParserFINAL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(381)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 42, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(380)
				p.SampleClause()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 2:
		localctx = NewJoinExprParensContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(383)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(384)
			p.joinExpr(0)
		}
		{
			p.SetState(385)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(406)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 47, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(404)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 46, p.GetParserRuleContext()) {
			case 1:
				localctx = NewJoinExprCrossOpContext(p, NewJoinExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ClickHouseParserRULE_joinExpr)
				p.SetState(389)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
					goto errorExit
				}
				{
					p.SetState(390)
					p.JoinOpCross()
				}
				{
					p.SetState(391)
					p.joinExpr(4)
				}

			case 2:
				localctx = NewJoinExprOpContext(p, NewJoinExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ClickHouseParserRULE_joinExpr)
				p.SetState(393)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
					goto errorExit
				}
				p.SetState(395)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == ClickHouseParserGLOBAL || _la == ClickHouseParserLOCAL {
					{
						p.SetState(394)
						_la = p.GetTokenStream().LA(1)

						if !(_la == ClickHouseParserGLOBAL || _la == ClickHouseParserLOCAL) {
							p.GetErrorHandler().RecoverInline(p)
						} else {
							p.GetErrorHandler().ReportMatch(p)
							p.Consume()
						}
					}

				}
				p.SetState(398)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4496) != 0) || ((int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&268468225) != 0) || _la == ClickHouseParserRIGHT || _la == ClickHouseParserSEMI {
					{
						p.SetState(397)
						p.JoinOp()
					}

				}
				{
					p.SetState(400)
					p.Match(ClickHouseParserJOIN)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(401)
					p.joinExpr(0)
				}
				{
					p.SetState(402)
					p.JoinConstraintClause()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(408)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 47, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJoinOpContext is an interface to support dynamic dispatch.
type IJoinOpContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsJoinOpContext differentiates from other interfaces.
	IsJoinOpContext()
}

type JoinOpContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoinOpContext() *JoinOpContext {
	var p = new(JoinOpContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_joinOp
	return p
}

func InitEmptyJoinOpContext(p *JoinOpContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_joinOp
}

func (*JoinOpContext) IsJoinOpContext() {}

func NewJoinOpContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JoinOpContext {
	var p = new(JoinOpContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_joinOp

	return p
}

func (s *JoinOpContext) GetParser() antlr.Parser { return s.parser }

func (s *JoinOpContext) CopyAll(ctx *JoinOpContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *JoinOpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinOpContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type JoinOpFullContext struct {
	JoinOpContext
}

func NewJoinOpFullContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *JoinOpFullContext {
	var p = new(JoinOpFullContext)

	InitEmptyJoinOpContext(&p.JoinOpContext)
	p.parser = parser
	p.CopyAll(ctx.(*JoinOpContext))

	return p
}

func (s *JoinOpFullContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinOpFullContext) FULL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFULL, 0)
}

func (s *JoinOpFullContext) OUTER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOUTER, 0)
}

func (s *JoinOpFullContext) ALL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserALL, 0)
}

func (s *JoinOpFullContext) ANY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserANY, 0)
}

func (s *JoinOpFullContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitJoinOpFull(s)

	default:
		return t.VisitChildren(s)
	}
}

type JoinOpInnerContext struct {
	JoinOpContext
}

func NewJoinOpInnerContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *JoinOpInnerContext {
	var p = new(JoinOpInnerContext)

	InitEmptyJoinOpContext(&p.JoinOpContext)
	p.parser = parser
	p.CopyAll(ctx.(*JoinOpContext))

	return p
}

func (s *JoinOpInnerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinOpInnerContext) INNER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINNER, 0)
}

func (s *JoinOpInnerContext) ALL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserALL, 0)
}

func (s *JoinOpInnerContext) ANY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserANY, 0)
}

func (s *JoinOpInnerContext) ASOF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserASOF, 0)
}

func (s *JoinOpInnerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitJoinOpInner(s)

	default:
		return t.VisitChildren(s)
	}
}

type JoinOpLeftRightContext struct {
	JoinOpContext
}

func NewJoinOpLeftRightContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *JoinOpLeftRightContext {
	var p = new(JoinOpLeftRightContext)

	InitEmptyJoinOpContext(&p.JoinOpContext)
	p.parser = parser
	p.CopyAll(ctx.(*JoinOpContext))

	return p
}

func (s *JoinOpLeftRightContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinOpLeftRightContext) LEFT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLEFT, 0)
}

func (s *JoinOpLeftRightContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRIGHT, 0)
}

func (s *JoinOpLeftRightContext) OUTER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOUTER, 0)
}

func (s *JoinOpLeftRightContext) SEMI() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSEMI, 0)
}

func (s *JoinOpLeftRightContext) ALL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserALL, 0)
}

func (s *JoinOpLeftRightContext) ANTI() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserANTI, 0)
}

func (s *JoinOpLeftRightContext) ANY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserANY, 0)
}

func (s *JoinOpLeftRightContext) ASOF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserASOF, 0)
}

func (s *JoinOpLeftRightContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitJoinOpLeftRight(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) JoinOp() (localctx IJoinOpContext) {
	localctx = NewJoinOpContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, ClickHouseParserRULE_joinOp)
	var _la int

	p.SetState(452)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 61, p.GetParserRuleContext()) {
	case 1:
		localctx = NewJoinOpInnerContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(418)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 50, p.GetParserRuleContext()) {
		case 1:
			p.SetState(410)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4368) != 0 {
				{
					p.SetState(409)
					_la = p.GetTokenStream().LA(1)

					if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4368) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}
			{
				p.SetState(412)
				p.Match(ClickHouseParserINNER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case 2:
			{
				p.SetState(413)
				p.Match(ClickHouseParserINNER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(415)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4368) != 0 {
				{
					p.SetState(414)
					_la = p.GetTokenStream().LA(1)

					if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4368) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}

		case 3:
			{
				p.SetState(417)
				_la = p.GetTokenStream().LA(1)

				if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4368) != 0) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}

	case 2:
		localctx = NewJoinOpLeftRightContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		p.SetState(434)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 55, p.GetParserRuleContext()) {
		case 1:
			p.SetState(421)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4496) != 0) || _la == ClickHouseParserSEMI {
				{
					p.SetState(420)
					_la = p.GetTokenStream().LA(1)

					if !(((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4496) != 0) || _la == ClickHouseParserSEMI) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}
			{
				p.SetState(423)
				_la = p.GetTokenStream().LA(1)

				if !(_la == ClickHouseParserLEFT || _la == ClickHouseParserRIGHT) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			p.SetState(425)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ClickHouseParserOUTER {
				{
					p.SetState(424)
					p.Match(ClickHouseParserOUTER)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}

		case 2:
			{
				p.SetState(427)
				_la = p.GetTokenStream().LA(1)

				if !(_la == ClickHouseParserLEFT || _la == ClickHouseParserRIGHT) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			p.SetState(429)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ClickHouseParserOUTER {
				{
					p.SetState(428)
					p.Match(ClickHouseParserOUTER)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(432)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4496) != 0) || _la == ClickHouseParserSEMI {
				{
					p.SetState(431)
					_la = p.GetTokenStream().LA(1)

					if !(((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4496) != 0) || _la == ClickHouseParserSEMI) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}

	case 3:
		localctx = NewJoinOpFullContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		p.SetState(450)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 60, p.GetParserRuleContext()) {
		case 1:
			p.SetState(437)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ClickHouseParserALL || _la == ClickHouseParserANY {
				{
					p.SetState(436)
					_la = p.GetTokenStream().LA(1)

					if !(_la == ClickHouseParserALL || _la == ClickHouseParserANY) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}
			{
				p.SetState(439)
				p.Match(ClickHouseParserFULL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(441)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ClickHouseParserOUTER {
				{
					p.SetState(440)
					p.Match(ClickHouseParserOUTER)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}

		case 2:
			{
				p.SetState(443)
				p.Match(ClickHouseParserFULL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(445)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ClickHouseParserOUTER {
				{
					p.SetState(444)
					p.Match(ClickHouseParserOUTER)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(448)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ClickHouseParserALL || _la == ClickHouseParserANY {
				{
					p.SetState(447)
					_la = p.GetTokenStream().LA(1)

					if !(_la == ClickHouseParserALL || _la == ClickHouseParserANY) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJoinOpCrossContext is an interface to support dynamic dispatch.
type IJoinOpCrossContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CROSS() antlr.TerminalNode
	JOIN() antlr.TerminalNode
	GLOBAL() antlr.TerminalNode
	LOCAL() antlr.TerminalNode
	COMMA() antlr.TerminalNode

	// IsJoinOpCrossContext differentiates from other interfaces.
	IsJoinOpCrossContext()
}

type JoinOpCrossContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoinOpCrossContext() *JoinOpCrossContext {
	var p = new(JoinOpCrossContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_joinOpCross
	return p
}

func InitEmptyJoinOpCrossContext(p *JoinOpCrossContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_joinOpCross
}

func (*JoinOpCrossContext) IsJoinOpCrossContext() {}

func NewJoinOpCrossContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JoinOpCrossContext {
	var p = new(JoinOpCrossContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_joinOpCross

	return p
}

func (s *JoinOpCrossContext) GetParser() antlr.Parser { return s.parser }

func (s *JoinOpCrossContext) CROSS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCROSS, 0)
}

func (s *JoinOpCrossContext) JOIN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserJOIN, 0)
}

func (s *JoinOpCrossContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserGLOBAL, 0)
}

func (s *JoinOpCrossContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLOCAL, 0)
}

func (s *JoinOpCrossContext) COMMA() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, 0)
}

func (s *JoinOpCrossContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinOpCrossContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JoinOpCrossContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitJoinOpCross(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) JoinOpCross() (localctx IJoinOpCrossContext) {
	localctx = NewJoinOpCrossContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, ClickHouseParserRULE_joinOpCross)
	var _la int

	p.SetState(460)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ClickHouseParserCROSS, ClickHouseParserGLOBAL, ClickHouseParserLOCAL:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(455)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserGLOBAL || _la == ClickHouseParserLOCAL {
			{
				p.SetState(454)
				_la = p.GetTokenStream().LA(1)

				if !(_la == ClickHouseParserGLOBAL || _la == ClickHouseParserLOCAL) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(457)
			p.Match(ClickHouseParserCROSS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(458)
			p.Match(ClickHouseParserJOIN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ClickHouseParserCOMMA:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(459)
			p.Match(ClickHouseParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJoinConstraintClauseContext is an interface to support dynamic dispatch.
type IJoinConstraintClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ON() antlr.TerminalNode
	ColumnExprList() IColumnExprListContext
	USING() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode

	// IsJoinConstraintClauseContext differentiates from other interfaces.
	IsJoinConstraintClauseContext()
}

type JoinConstraintClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoinConstraintClauseContext() *JoinConstraintClauseContext {
	var p = new(JoinConstraintClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_joinConstraintClause
	return p
}

func InitEmptyJoinConstraintClauseContext(p *JoinConstraintClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_joinConstraintClause
}

func (*JoinConstraintClauseContext) IsJoinConstraintClauseContext() {}

func NewJoinConstraintClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JoinConstraintClauseContext {
	var p = new(JoinConstraintClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_joinConstraintClause

	return p
}

func (s *JoinConstraintClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *JoinConstraintClauseContext) ON() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserON, 0)
}

func (s *JoinConstraintClauseContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *JoinConstraintClauseContext) USING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserUSING, 0)
}

func (s *JoinConstraintClauseContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *JoinConstraintClauseContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *JoinConstraintClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinConstraintClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JoinConstraintClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitJoinConstraintClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) JoinConstraintClause() (localctx IJoinConstraintClauseContext) {
	localctx = NewJoinConstraintClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, ClickHouseParserRULE_joinConstraintClause)
	p.SetState(471)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 64, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(462)
			p.Match(ClickHouseParserON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(463)
			p.ColumnExprList()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(464)
			p.Match(ClickHouseParserUSING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(465)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(466)
			p.ColumnExprList()
		}
		{
			p.SetState(467)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(469)
			p.Match(ClickHouseParserUSING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(470)
			p.ColumnExprList()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISampleClauseContext is an interface to support dynamic dispatch.
type ISampleClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SAMPLE() antlr.TerminalNode
	AllRatioExpr() []IRatioExprContext
	RatioExpr(i int) IRatioExprContext
	OFFSET() antlr.TerminalNode

	// IsSampleClauseContext differentiates from other interfaces.
	IsSampleClauseContext()
}

type SampleClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySampleClauseContext() *SampleClauseContext {
	var p = new(SampleClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_sampleClause
	return p
}

func InitEmptySampleClauseContext(p *SampleClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_sampleClause
}

func (*SampleClauseContext) IsSampleClauseContext() {}

func NewSampleClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SampleClauseContext {
	var p = new(SampleClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_sampleClause

	return p
}

func (s *SampleClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *SampleClauseContext) SAMPLE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSAMPLE, 0)
}

func (s *SampleClauseContext) AllRatioExpr() []IRatioExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IRatioExprContext); ok {
			len++
		}
	}

	tst := make([]IRatioExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IRatioExprContext); ok {
			tst[i] = t.(IRatioExprContext)
			i++
		}
	}

	return tst
}

func (s *SampleClauseContext) RatioExpr(i int) IRatioExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRatioExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRatioExprContext)
}

func (s *SampleClauseContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOFFSET, 0)
}

func (s *SampleClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SampleClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SampleClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitSampleClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) SampleClause() (localctx ISampleClauseContext) {
	localctx = NewSampleClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, ClickHouseParserRULE_sampleClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(473)
		p.Match(ClickHouseParserSAMPLE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(474)
		p.RatioExpr()
	}
	p.SetState(477)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 65, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(475)
			p.Match(ClickHouseParserOFFSET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(476)
			p.RatioExpr()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILimitExprContext is an interface to support dynamic dispatch.
type ILimitExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllColumnExpr() []IColumnExprContext
	ColumnExpr(i int) IColumnExprContext
	COMMA() antlr.TerminalNode
	OFFSET() antlr.TerminalNode

	// IsLimitExprContext differentiates from other interfaces.
	IsLimitExprContext()
}

type LimitExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLimitExprContext() *LimitExprContext {
	var p = new(LimitExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_limitExpr
	return p
}

func InitEmptyLimitExprContext(p *LimitExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_limitExpr
}

func (*LimitExprContext) IsLimitExprContext() {}

func NewLimitExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LimitExprContext {
	var p = new(LimitExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_limitExpr

	return p
}

func (s *LimitExprContext) GetParser() antlr.Parser { return s.parser }

func (s *LimitExprContext) AllColumnExpr() []IColumnExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnExprContext); ok {
			tst[i] = t.(IColumnExprContext)
			i++
		}
	}

	return tst
}

func (s *LimitExprContext) ColumnExpr(i int) IColumnExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *LimitExprContext) COMMA() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, 0)
}

func (s *LimitExprContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOFFSET, 0)
}

func (s *LimitExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LimitExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LimitExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitLimitExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) LimitExpr() (localctx ILimitExprContext) {
	localctx = NewLimitExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, ClickHouseParserRULE_limitExpr)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(479)
		p.columnExpr(0)
	}
	p.SetState(482)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserOFFSET || _la == ClickHouseParserCOMMA {
		{
			p.SetState(480)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ClickHouseParserOFFSET || _la == ClickHouseParserCOMMA) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(481)
			p.columnExpr(0)
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrderExprListContext is an interface to support dynamic dispatch.
type IOrderExprListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllOrderExpr() []IOrderExprContext
	OrderExpr(i int) IOrderExprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsOrderExprListContext differentiates from other interfaces.
	IsOrderExprListContext()
}

type OrderExprListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrderExprListContext() *OrderExprListContext {
	var p = new(OrderExprListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_orderExprList
	return p
}

func InitEmptyOrderExprListContext(p *OrderExprListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_orderExprList
}

func (*OrderExprListContext) IsOrderExprListContext() {}

func NewOrderExprListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrderExprListContext {
	var p = new(OrderExprListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_orderExprList

	return p
}

func (s *OrderExprListContext) GetParser() antlr.Parser { return s.parser }

func (s *OrderExprListContext) AllOrderExpr() []IOrderExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOrderExprContext); ok {
			len++
		}
	}

	tst := make([]IOrderExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOrderExprContext); ok {
			tst[i] = t.(IOrderExprContext)
			i++
		}
	}

	return tst
}

func (s *OrderExprListContext) OrderExpr(i int) IOrderExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrderExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrderExprContext)
}

func (s *OrderExprListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *OrderExprListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *OrderExprListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrderExprListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrderExprListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitOrderExprList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) OrderExprList() (localctx IOrderExprListContext) {
	localctx = NewOrderExprListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, ClickHouseParserRULE_orderExprList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(484)
		p.OrderExpr()
	}
	p.SetState(489)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ClickHouseParserCOMMA {
		{
			p.SetState(485)
			p.Match(ClickHouseParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(486)
			p.OrderExpr()
		}

		p.SetState(491)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrderExprContext is an interface to support dynamic dispatch.
type IOrderExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ColumnExpr() IColumnExprContext
	NULLS() antlr.TerminalNode
	COLLATE() antlr.TerminalNode
	STRING_LITERAL() antlr.TerminalNode
	ASCENDING() antlr.TerminalNode
	DESCENDING() antlr.TerminalNode
	DESC() antlr.TerminalNode
	FIRST() antlr.TerminalNode
	LAST() antlr.TerminalNode

	// IsOrderExprContext differentiates from other interfaces.
	IsOrderExprContext()
}

type OrderExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrderExprContext() *OrderExprContext {
	var p = new(OrderExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_orderExpr
	return p
}

func InitEmptyOrderExprContext(p *OrderExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_orderExpr
}

func (*OrderExprContext) IsOrderExprContext() {}

func NewOrderExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrderExprContext {
	var p = new(OrderExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_orderExpr

	return p
}

func (s *OrderExprContext) GetParser() antlr.Parser { return s.parser }

func (s *OrderExprContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *OrderExprContext) NULLS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNULLS, 0)
}

func (s *OrderExprContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOLLATE, 0)
}

func (s *OrderExprContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTRING_LITERAL, 0)
}

func (s *OrderExprContext) ASCENDING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserASCENDING, 0)
}

func (s *OrderExprContext) DESCENDING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDESCENDING, 0)
}

func (s *OrderExprContext) DESC() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDESC, 0)
}

func (s *OrderExprContext) FIRST() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFIRST, 0)
}

func (s *OrderExprContext) LAST() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLAST, 0)
}

func (s *OrderExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrderExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrderExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitOrderExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) OrderExpr() (localctx IOrderExprContext) {
	localctx = NewOrderExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, ClickHouseParserRULE_orderExpr)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(492)
		p.columnExpr(0)
	}
	p.SetState(494)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&6597069768704) != 0 {
		{
			p.SetState(493)
			_la = p.GetTokenStream().LA(1)

			if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&6597069768704) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(498)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserNULLS {
		{
			p.SetState(496)
			p.Match(ClickHouseParserNULLS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(497)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ClickHouseParserFIRST || _la == ClickHouseParserLAST) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(502)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserCOLLATE {
		{
			p.SetState(500)
			p.Match(ClickHouseParserCOLLATE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(501)
			p.Match(ClickHouseParserSTRING_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRatioExprContext is an interface to support dynamic dispatch.
type IRatioExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNumberLiteral() []INumberLiteralContext
	NumberLiteral(i int) INumberLiteralContext
	SLASH() antlr.TerminalNode

	// IsRatioExprContext differentiates from other interfaces.
	IsRatioExprContext()
}

type RatioExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRatioExprContext() *RatioExprContext {
	var p = new(RatioExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_ratioExpr
	return p
}

func InitEmptyRatioExprContext(p *RatioExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_ratioExpr
}

func (*RatioExprContext) IsRatioExprContext() {}

func NewRatioExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RatioExprContext {
	var p = new(RatioExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_ratioExpr

	return p
}

func (s *RatioExprContext) GetParser() antlr.Parser { return s.parser }

func (s *RatioExprContext) AllNumberLiteral() []INumberLiteralContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumberLiteralContext); ok {
			len++
		}
	}

	tst := make([]INumberLiteralContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumberLiteralContext); ok {
			tst[i] = t.(INumberLiteralContext)
			i++
		}
	}

	return tst
}

func (s *RatioExprContext) NumberLiteral(i int) INumberLiteralContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberLiteralContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberLiteralContext)
}

func (s *RatioExprContext) SLASH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSLASH, 0)
}

func (s *RatioExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RatioExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RatioExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitRatioExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) RatioExpr() (localctx IRatioExprContext) {
	localctx = NewRatioExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, ClickHouseParserRULE_ratioExpr)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(504)
		p.NumberLiteral()
	}
	p.SetState(507)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 71, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(505)
			p.Match(ClickHouseParserSLASH)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(506)
			p.NumberLiteral()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISettingExprListContext is an interface to support dynamic dispatch.
type ISettingExprListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllSettingExpr() []ISettingExprContext
	SettingExpr(i int) ISettingExprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsSettingExprListContext differentiates from other interfaces.
	IsSettingExprListContext()
}

type SettingExprListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySettingExprListContext() *SettingExprListContext {
	var p = new(SettingExprListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_settingExprList
	return p
}

func InitEmptySettingExprListContext(p *SettingExprListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_settingExprList
}

func (*SettingExprListContext) IsSettingExprListContext() {}

func NewSettingExprListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SettingExprListContext {
	var p = new(SettingExprListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_settingExprList

	return p
}

func (s *SettingExprListContext) GetParser() antlr.Parser { return s.parser }

func (s *SettingExprListContext) AllSettingExpr() []ISettingExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISettingExprContext); ok {
			len++
		}
	}

	tst := make([]ISettingExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISettingExprContext); ok {
			tst[i] = t.(ISettingExprContext)
			i++
		}
	}

	return tst
}

func (s *SettingExprListContext) SettingExpr(i int) ISettingExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISettingExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISettingExprContext)
}

func (s *SettingExprListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *SettingExprListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *SettingExprListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SettingExprListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SettingExprListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitSettingExprList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) SettingExprList() (localctx ISettingExprListContext) {
	localctx = NewSettingExprListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, ClickHouseParserRULE_settingExprList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(509)
		p.SettingExpr()
	}
	p.SetState(514)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ClickHouseParserCOMMA {
		{
			p.SetState(510)
			p.Match(ClickHouseParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(511)
			p.SettingExpr()
		}

		p.SetState(516)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISettingExprContext is an interface to support dynamic dispatch.
type ISettingExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	EQ_SINGLE() antlr.TerminalNode
	Literal() ILiteralContext

	// IsSettingExprContext differentiates from other interfaces.
	IsSettingExprContext()
}

type SettingExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySettingExprContext() *SettingExprContext {
	var p = new(SettingExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_settingExpr
	return p
}

func InitEmptySettingExprContext(p *SettingExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_settingExpr
}

func (*SettingExprContext) IsSettingExprContext() {}

func NewSettingExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SettingExprContext {
	var p = new(SettingExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_settingExpr

	return p
}

func (s *SettingExprContext) GetParser() antlr.Parser { return s.parser }

func (s *SettingExprContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *SettingExprContext) EQ_SINGLE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEQ_SINGLE, 0)
}

func (s *SettingExprContext) Literal() ILiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *SettingExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SettingExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SettingExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitSettingExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) SettingExpr() (localctx ISettingExprContext) {
	localctx = NewSettingExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, ClickHouseParserRULE_settingExpr)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(517)
		p.Identifier()
	}
	{
		p.SetState(518)
		p.Match(ClickHouseParserEQ_SINGLE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(519)
		p.Literal()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWindowExprContext is an interface to support dynamic dispatch.
type IWindowExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WinPartitionByClause() IWinPartitionByClauseContext
	WinOrderByClause() IWinOrderByClauseContext
	WinFrameClause() IWinFrameClauseContext

	// IsWindowExprContext differentiates from other interfaces.
	IsWindowExprContext()
}

type WindowExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindowExprContext() *WindowExprContext {
	var p = new(WindowExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_windowExpr
	return p
}

func InitEmptyWindowExprContext(p *WindowExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_windowExpr
}

func (*WindowExprContext) IsWindowExprContext() {}

func NewWindowExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WindowExprContext {
	var p = new(WindowExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_windowExpr

	return p
}

func (s *WindowExprContext) GetParser() antlr.Parser { return s.parser }

func (s *WindowExprContext) WinPartitionByClause() IWinPartitionByClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWinPartitionByClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWinPartitionByClauseContext)
}

func (s *WindowExprContext) WinOrderByClause() IWinOrderByClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWinOrderByClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWinOrderByClauseContext)
}

func (s *WindowExprContext) WinFrameClause() IWinFrameClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWinFrameClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWinFrameClauseContext)
}

func (s *WindowExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WindowExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WindowExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitWindowExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) WindowExpr() (localctx IWindowExprContext) {
	localctx = NewWindowExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, ClickHouseParserRULE_windowExpr)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(522)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserPARTITION {
		{
			p.SetState(521)
			p.WinPartitionByClause()
		}

	}
	p.SetState(525)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserORDER {
		{
			p.SetState(524)
			p.WinOrderByClause()
		}

	}
	p.SetState(528)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserRANGE || _la == ClickHouseParserROWS {
		{
			p.SetState(527)
			p.WinFrameClause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWinPartitionByClauseContext is an interface to support dynamic dispatch.
type IWinPartitionByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PARTITION() antlr.TerminalNode
	BY() antlr.TerminalNode
	ColumnExprList() IColumnExprListContext

	// IsWinPartitionByClauseContext differentiates from other interfaces.
	IsWinPartitionByClauseContext()
}

type WinPartitionByClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWinPartitionByClauseContext() *WinPartitionByClauseContext {
	var p = new(WinPartitionByClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_winPartitionByClause
	return p
}

func InitEmptyWinPartitionByClauseContext(p *WinPartitionByClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_winPartitionByClause
}

func (*WinPartitionByClauseContext) IsWinPartitionByClauseContext() {}

func NewWinPartitionByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WinPartitionByClauseContext {
	var p = new(WinPartitionByClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_winPartitionByClause

	return p
}

func (s *WinPartitionByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *WinPartitionByClauseContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPARTITION, 0)
}

func (s *WinPartitionByClauseContext) BY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserBY, 0)
}

func (s *WinPartitionByClauseContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *WinPartitionByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WinPartitionByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WinPartitionByClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitWinPartitionByClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) WinPartitionByClause() (localctx IWinPartitionByClauseContext) {
	localctx = NewWinPartitionByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, ClickHouseParserRULE_winPartitionByClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(530)
		p.Match(ClickHouseParserPARTITION)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(531)
		p.Match(ClickHouseParserBY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(532)
		p.ColumnExprList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWinOrderByClauseContext is an interface to support dynamic dispatch.
type IWinOrderByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ORDER() antlr.TerminalNode
	BY() antlr.TerminalNode
	OrderExprList() IOrderExprListContext

	// IsWinOrderByClauseContext differentiates from other interfaces.
	IsWinOrderByClauseContext()
}

type WinOrderByClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWinOrderByClauseContext() *WinOrderByClauseContext {
	var p = new(WinOrderByClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_winOrderByClause
	return p
}

func InitEmptyWinOrderByClauseContext(p *WinOrderByClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_winOrderByClause
}

func (*WinOrderByClauseContext) IsWinOrderByClauseContext() {}

func NewWinOrderByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WinOrderByClauseContext {
	var p = new(WinOrderByClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_winOrderByClause

	return p
}

func (s *WinOrderByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *WinOrderByClauseContext) ORDER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserORDER, 0)
}

func (s *WinOrderByClauseContext) BY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserBY, 0)
}

func (s *WinOrderByClauseContext) OrderExprList() IOrderExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrderExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrderExprListContext)
}

func (s *WinOrderByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WinOrderByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WinOrderByClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitWinOrderByClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) WinOrderByClause() (localctx IWinOrderByClauseContext) {
	localctx = NewWinOrderByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, ClickHouseParserRULE_winOrderByClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(534)
		p.Match(ClickHouseParserORDER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(535)
		p.Match(ClickHouseParserBY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(536)
		p.OrderExprList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWinFrameClauseContext is an interface to support dynamic dispatch.
type IWinFrameClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WinFrameExtend() IWinFrameExtendContext
	ROWS() antlr.TerminalNode
	RANGE() antlr.TerminalNode

	// IsWinFrameClauseContext differentiates from other interfaces.
	IsWinFrameClauseContext()
}

type WinFrameClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWinFrameClauseContext() *WinFrameClauseContext {
	var p = new(WinFrameClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_winFrameClause
	return p
}

func InitEmptyWinFrameClauseContext(p *WinFrameClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_winFrameClause
}

func (*WinFrameClauseContext) IsWinFrameClauseContext() {}

func NewWinFrameClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WinFrameClauseContext {
	var p = new(WinFrameClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_winFrameClause

	return p
}

func (s *WinFrameClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *WinFrameClauseContext) WinFrameExtend() IWinFrameExtendContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWinFrameExtendContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWinFrameExtendContext)
}

func (s *WinFrameClauseContext) ROWS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserROWS, 0)
}

func (s *WinFrameClauseContext) RANGE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRANGE, 0)
}

func (s *WinFrameClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WinFrameClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WinFrameClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitWinFrameClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) WinFrameClause() (localctx IWinFrameClauseContext) {
	localctx = NewWinFrameClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, ClickHouseParserRULE_winFrameClause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(538)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ClickHouseParserRANGE || _la == ClickHouseParserROWS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(539)
		p.WinFrameExtend()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWinFrameExtendContext is an interface to support dynamic dispatch.
type IWinFrameExtendContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsWinFrameExtendContext differentiates from other interfaces.
	IsWinFrameExtendContext()
}

type WinFrameExtendContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWinFrameExtendContext() *WinFrameExtendContext {
	var p = new(WinFrameExtendContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_winFrameExtend
	return p
}

func InitEmptyWinFrameExtendContext(p *WinFrameExtendContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_winFrameExtend
}

func (*WinFrameExtendContext) IsWinFrameExtendContext() {}

func NewWinFrameExtendContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WinFrameExtendContext {
	var p = new(WinFrameExtendContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_winFrameExtend

	return p
}

func (s *WinFrameExtendContext) GetParser() antlr.Parser { return s.parser }

func (s *WinFrameExtendContext) CopyAll(ctx *WinFrameExtendContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *WinFrameExtendContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WinFrameExtendContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type FrameStartContext struct {
	WinFrameExtendContext
}

func NewFrameStartContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FrameStartContext {
	var p = new(FrameStartContext)

	InitEmptyWinFrameExtendContext(&p.WinFrameExtendContext)
	p.parser = parser
	p.CopyAll(ctx.(*WinFrameExtendContext))

	return p
}

func (s *FrameStartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FrameStartContext) WinFrameBound() IWinFrameBoundContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWinFrameBoundContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWinFrameBoundContext)
}

func (s *FrameStartContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitFrameStart(s)

	default:
		return t.VisitChildren(s)
	}
}

type FrameBetweenContext struct {
	WinFrameExtendContext
}

func NewFrameBetweenContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FrameBetweenContext {
	var p = new(FrameBetweenContext)

	InitEmptyWinFrameExtendContext(&p.WinFrameExtendContext)
	p.parser = parser
	p.CopyAll(ctx.(*WinFrameExtendContext))

	return p
}

func (s *FrameBetweenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FrameBetweenContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserBETWEEN, 0)
}

func (s *FrameBetweenContext) AllWinFrameBound() []IWinFrameBoundContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWinFrameBoundContext); ok {
			len++
		}
	}

	tst := make([]IWinFrameBoundContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWinFrameBoundContext); ok {
			tst[i] = t.(IWinFrameBoundContext)
			i++
		}
	}

	return tst
}

func (s *FrameBetweenContext) WinFrameBound(i int) IWinFrameBoundContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWinFrameBoundContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWinFrameBoundContext)
}

func (s *FrameBetweenContext) AND() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAND, 0)
}

func (s *FrameBetweenContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitFrameBetween(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) WinFrameExtend() (localctx IWinFrameExtendContext) {
	localctx = NewWinFrameExtendContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, ClickHouseParserRULE_winFrameExtend)
	p.SetState(547)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ClickHouseParserCURRENT, ClickHouseParserINF, ClickHouseParserNAN_SQL, ClickHouseParserUNBOUNDED, ClickHouseParserFLOATING_LITERAL, ClickHouseParserOCTAL_LITERAL, ClickHouseParserDECIMAL_LITERAL, ClickHouseParserHEXADECIMAL_LITERAL, ClickHouseParserDASH, ClickHouseParserDOT, ClickHouseParserPLUS:
		localctx = NewFrameStartContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(541)
			p.WinFrameBound()
		}

	case ClickHouseParserBETWEEN:
		localctx = NewFrameBetweenContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(542)
			p.Match(ClickHouseParserBETWEEN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(543)
			p.WinFrameBound()
		}
		{
			p.SetState(544)
			p.Match(ClickHouseParserAND)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(545)
			p.WinFrameBound()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWinFrameBoundContext is an interface to support dynamic dispatch.
type IWinFrameBoundContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CURRENT() antlr.TerminalNode
	ROW() antlr.TerminalNode
	UNBOUNDED() antlr.TerminalNode
	PRECEDING() antlr.TerminalNode
	FOLLOWING() antlr.TerminalNode
	NumberLiteral() INumberLiteralContext

	// IsWinFrameBoundContext differentiates from other interfaces.
	IsWinFrameBoundContext()
}

type WinFrameBoundContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWinFrameBoundContext() *WinFrameBoundContext {
	var p = new(WinFrameBoundContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_winFrameBound
	return p
}

func InitEmptyWinFrameBoundContext(p *WinFrameBoundContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_winFrameBound
}

func (*WinFrameBoundContext) IsWinFrameBoundContext() {}

func NewWinFrameBoundContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WinFrameBoundContext {
	var p = new(WinFrameBoundContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_winFrameBound

	return p
}

func (s *WinFrameBoundContext) GetParser() antlr.Parser { return s.parser }

func (s *WinFrameBoundContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCURRENT, 0)
}

func (s *WinFrameBoundContext) ROW() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserROW, 0)
}

func (s *WinFrameBoundContext) UNBOUNDED() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserUNBOUNDED, 0)
}

func (s *WinFrameBoundContext) PRECEDING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPRECEDING, 0)
}

func (s *WinFrameBoundContext) FOLLOWING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFOLLOWING, 0)
}

func (s *WinFrameBoundContext) NumberLiteral() INumberLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberLiteralContext)
}

func (s *WinFrameBoundContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WinFrameBoundContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WinFrameBoundContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitWinFrameBound(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) WinFrameBound() (localctx IWinFrameBoundContext) {
	localctx = NewWinFrameBoundContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, ClickHouseParserRULE_winFrameBound)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(561)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 77, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(549)
			p.Match(ClickHouseParserCURRENT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(550)
			p.Match(ClickHouseParserROW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		{
			p.SetState(551)
			p.Match(ClickHouseParserUNBOUNDED)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(552)
			p.Match(ClickHouseParserPRECEDING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		{
			p.SetState(553)
			p.Match(ClickHouseParserUNBOUNDED)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(554)
			p.Match(ClickHouseParserFOLLOWING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		{
			p.SetState(555)
			p.NumberLiteral()
		}
		{
			p.SetState(556)
			p.Match(ClickHouseParserPRECEDING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		{
			p.SetState(558)
			p.NumberLiteral()
		}
		{
			p.SetState(559)
			p.Match(ClickHouseParserFOLLOWING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISetStmtContext is an interface to support dynamic dispatch.
type ISetStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SET() antlr.TerminalNode
	SettingExprList() ISettingExprListContext
	SEMICOLON() antlr.TerminalNode

	// IsSetStmtContext differentiates from other interfaces.
	IsSetStmtContext()
}

type SetStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetStmtContext() *SetStmtContext {
	var p = new(SetStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_setStmt
	return p
}

func InitEmptySetStmtContext(p *SetStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_setStmt
}

func (*SetStmtContext) IsSetStmtContext() {}

func NewSetStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetStmtContext {
	var p = new(SetStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_setStmt

	return p
}

func (s *SetStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *SetStmtContext) SET() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSET, 0)
}

func (s *SetStmtContext) SettingExprList() ISettingExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISettingExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISettingExprListContext)
}

func (s *SetStmtContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSEMICOLON, 0)
}

func (s *SetStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitSetStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) SetStmt() (localctx ISetStmtContext) {
	localctx = NewSetStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, ClickHouseParserRULE_setStmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(563)
		p.Match(ClickHouseParserSET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(564)
		p.SettingExprList()
	}
	{
		p.SetState(565)
		p.Match(ClickHouseParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumnTypeExprContext is an interface to support dynamic dispatch.
type IColumnTypeExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsColumnTypeExprContext differentiates from other interfaces.
	IsColumnTypeExprContext()
}

type ColumnTypeExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnTypeExprContext() *ColumnTypeExprContext {
	var p = new(ColumnTypeExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnTypeExpr
	return p
}

func InitEmptyColumnTypeExprContext(p *ColumnTypeExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnTypeExpr
}

func (*ColumnTypeExprContext) IsColumnTypeExprContext() {}

func NewColumnTypeExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnTypeExprContext {
	var p = new(ColumnTypeExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_columnTypeExpr

	return p
}

func (s *ColumnTypeExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnTypeExprContext) CopyAll(ctx *ColumnTypeExprContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *ColumnTypeExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnTypeExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ColumnTypeExprNestedContext struct {
	ColumnTypeExprContext
}

func NewColumnTypeExprNestedContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnTypeExprNestedContext {
	var p = new(ColumnTypeExprNestedContext)

	InitEmptyColumnTypeExprContext(&p.ColumnTypeExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnTypeExprContext))

	return p
}

func (s *ColumnTypeExprNestedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnTypeExprNestedContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *ColumnTypeExprNestedContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnTypeExprNestedContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnTypeExprNestedContext) AllColumnTypeExpr() []IColumnTypeExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnTypeExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnTypeExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnTypeExprContext); ok {
			tst[i] = t.(IColumnTypeExprContext)
			i++
		}
	}

	return tst
}

func (s *ColumnTypeExprNestedContext) ColumnTypeExpr(i int) IColumnTypeExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnTypeExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnTypeExprContext)
}

func (s *ColumnTypeExprNestedContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnTypeExprNestedContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *ColumnTypeExprNestedContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *ColumnTypeExprNestedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnTypeExprNested(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnTypeExprParamContext struct {
	ColumnTypeExprContext
}

func NewColumnTypeExprParamContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnTypeExprParamContext {
	var p = new(ColumnTypeExprParamContext)

	InitEmptyColumnTypeExprContext(&p.ColumnTypeExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnTypeExprContext))

	return p
}

func (s *ColumnTypeExprParamContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnTypeExprParamContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnTypeExprParamContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnTypeExprParamContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnTypeExprParamContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *ColumnTypeExprParamContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnTypeExprParam(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnTypeExprSimpleContext struct {
	ColumnTypeExprContext
}

func NewColumnTypeExprSimpleContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnTypeExprSimpleContext {
	var p = new(ColumnTypeExprSimpleContext)

	InitEmptyColumnTypeExprContext(&p.ColumnTypeExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnTypeExprContext))

	return p
}

func (s *ColumnTypeExprSimpleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnTypeExprSimpleContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnTypeExprSimpleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnTypeExprSimple(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnTypeExprComplexContext struct {
	ColumnTypeExprContext
}

func NewColumnTypeExprComplexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnTypeExprComplexContext {
	var p = new(ColumnTypeExprComplexContext)

	InitEmptyColumnTypeExprContext(&p.ColumnTypeExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnTypeExprContext))

	return p
}

func (s *ColumnTypeExprComplexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnTypeExprComplexContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnTypeExprComplexContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnTypeExprComplexContext) AllColumnTypeExpr() []IColumnTypeExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnTypeExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnTypeExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnTypeExprContext); ok {
			tst[i] = t.(IColumnTypeExprContext)
			i++
		}
	}

	return tst
}

func (s *ColumnTypeExprComplexContext) ColumnTypeExpr(i int) IColumnTypeExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnTypeExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnTypeExprContext)
}

func (s *ColumnTypeExprComplexContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnTypeExprComplexContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *ColumnTypeExprComplexContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *ColumnTypeExprComplexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnTypeExprComplex(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnTypeExprEnumContext struct {
	ColumnTypeExprContext
}

func NewColumnTypeExprEnumContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnTypeExprEnumContext {
	var p = new(ColumnTypeExprEnumContext)

	InitEmptyColumnTypeExprContext(&p.ColumnTypeExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnTypeExprContext))

	return p
}

func (s *ColumnTypeExprEnumContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnTypeExprEnumContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnTypeExprEnumContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnTypeExprEnumContext) AllEnumValue() []IEnumValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEnumValueContext); ok {
			len++
		}
	}

	tst := make([]IEnumValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEnumValueContext); ok {
			tst[i] = t.(IEnumValueContext)
			i++
		}
	}

	return tst
}

func (s *ColumnTypeExprEnumContext) EnumValue(i int) IEnumValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumValueContext)
}

func (s *ColumnTypeExprEnumContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnTypeExprEnumContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *ColumnTypeExprEnumContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *ColumnTypeExprEnumContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnTypeExprEnum(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) ColumnTypeExpr() (localctx IColumnTypeExprContext) {
	localctx = NewColumnTypeExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, ClickHouseParserRULE_columnTypeExpr)
	var _la int

	p.SetState(614)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 82, p.GetParserRuleContext()) {
	case 1:
		localctx = NewColumnTypeExprSimpleContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(567)
			p.Identifier()
		}

	case 2:
		localctx = NewColumnTypeExprNestedContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(568)
			p.Identifier()
		}
		{
			p.SetState(569)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(570)
			p.Identifier()
		}
		{
			p.SetState(571)
			p.ColumnTypeExpr()
		}
		p.SetState(578)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == ClickHouseParserCOMMA {
			{
				p.SetState(572)
				p.Match(ClickHouseParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(573)
				p.Identifier()
			}
			{
				p.SetState(574)
				p.ColumnTypeExpr()
			}

			p.SetState(580)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(581)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		localctx = NewColumnTypeExprEnumContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(583)
			p.Identifier()
		}
		{
			p.SetState(584)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(585)
			p.EnumValue()
		}
		p.SetState(590)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == ClickHouseParserCOMMA {
			{
				p.SetState(586)
				p.Match(ClickHouseParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(587)
				p.EnumValue()
			}

			p.SetState(592)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(593)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		localctx = NewColumnTypeExprComplexContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(595)
			p.Identifier()
		}
		{
			p.SetState(596)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(597)
			p.ColumnTypeExpr()
		}
		p.SetState(602)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == ClickHouseParserCOMMA {
			{
				p.SetState(598)
				p.Match(ClickHouseParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(599)
				p.ColumnTypeExpr()
			}

			p.SetState(604)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(605)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		localctx = NewColumnTypeExprParamContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(607)
			p.Identifier()
		}
		{
			p.SetState(608)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(610)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-4) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&-1) != 0) || ((int64((_la-128)) & ^0x3f) == 0 && ((int64(1)<<(_la-128))&-49) != 0) || ((int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&18662580223) != 0) {
			{
				p.SetState(609)
				p.ColumnExprList()
			}

		}
		{
			p.SetState(612)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumnExprListContext is an interface to support dynamic dispatch.
type IColumnExprListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllColumnsExpr() []IColumnsExprContext
	ColumnsExpr(i int) IColumnsExprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsColumnExprListContext differentiates from other interfaces.
	IsColumnExprListContext()
}

type ColumnExprListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnExprListContext() *ColumnExprListContext {
	var p = new(ColumnExprListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnExprList
	return p
}

func InitEmptyColumnExprListContext(p *ColumnExprListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnExprList
}

func (*ColumnExprListContext) IsColumnExprListContext() {}

func NewColumnExprListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnExprListContext {
	var p = new(ColumnExprListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_columnExprList

	return p
}

func (s *ColumnExprListContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnExprListContext) AllColumnsExpr() []IColumnsExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnsExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnsExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnsExprContext); ok {
			tst[i] = t.(IColumnsExprContext)
			i++
		}
	}

	return tst
}

func (s *ColumnExprListContext) ColumnsExpr(i int) IColumnsExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnsExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnsExprContext)
}

func (s *ColumnExprListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *ColumnExprListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *ColumnExprListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnExprListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) ColumnExprList() (localctx IColumnExprListContext) {
	localctx = NewColumnExprListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, ClickHouseParserRULE_columnExprList)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(616)
		p.ColumnsExpr()
	}
	p.SetState(621)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 83, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(617)
				p.Match(ClickHouseParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(618)
				p.ColumnsExpr()
			}

		}
		p.SetState(623)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 83, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumnsExprContext is an interface to support dynamic dispatch.
type IColumnsExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsColumnsExprContext differentiates from other interfaces.
	IsColumnsExprContext()
}

type ColumnsExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnsExprContext() *ColumnsExprContext {
	var p = new(ColumnsExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnsExpr
	return p
}

func InitEmptyColumnsExprContext(p *ColumnsExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnsExpr
}

func (*ColumnsExprContext) IsColumnsExprContext() {}

func NewColumnsExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnsExprContext {
	var p = new(ColumnsExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_columnsExpr

	return p
}

func (s *ColumnsExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnsExprContext) CopyAll(ctx *ColumnsExprContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *ColumnsExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnsExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ColumnsExprColumnContext struct {
	ColumnsExprContext
}

func NewColumnsExprColumnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnsExprColumnContext {
	var p = new(ColumnsExprColumnContext)

	InitEmptyColumnsExprContext(&p.ColumnsExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnsExprContext))

	return p
}

func (s *ColumnsExprColumnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnsExprColumnContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnsExprColumnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnsExprColumn(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnsExprAsteriskContext struct {
	ColumnsExprContext
}

func NewColumnsExprAsteriskContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnsExprAsteriskContext {
	var p = new(ColumnsExprAsteriskContext)

	InitEmptyColumnsExprContext(&p.ColumnsExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnsExprContext))

	return p
}

func (s *ColumnsExprAsteriskContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnsExprAsteriskContext) ASTERISK() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserASTERISK, 0)
}

func (s *ColumnsExprAsteriskContext) TableIdentifier() ITableIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *ColumnsExprAsteriskContext) DOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDOT, 0)
}

func (s *ColumnsExprAsteriskContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnsExprAsterisk(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnsExprSubqueryContext struct {
	ColumnsExprContext
}

func NewColumnsExprSubqueryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnsExprSubqueryContext {
	var p = new(ColumnsExprSubqueryContext)

	InitEmptyColumnsExprContext(&p.ColumnsExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnsExprContext))

	return p
}

func (s *ColumnsExprSubqueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnsExprSubqueryContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnsExprSubqueryContext) SelectUnionStmt() ISelectUnionStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectUnionStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectUnionStmtContext)
}

func (s *ColumnsExprSubqueryContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnsExprSubqueryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnsExprSubquery(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) ColumnsExpr() (localctx IColumnsExprContext) {
	localctx = NewColumnsExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, ClickHouseParserRULE_columnsExpr)
	var _la int

	p.SetState(635)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 85, p.GetParserRuleContext()) {
	case 1:
		localctx = NewColumnsExprAsteriskContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(627)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-4) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&-10133099161845761) != 0) || ((int64((_la-128)) & ^0x3f) == 0 && ((int64(1)<<(_la-128))&-49) != 0) || ((int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&255) != 0) {
			{
				p.SetState(624)
				p.TableIdentifier()
			}
			{
				p.SetState(625)
				p.Match(ClickHouseParserDOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(629)
			p.Match(ClickHouseParserASTERISK)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		localctx = NewColumnsExprSubqueryContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(630)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(631)
			p.SelectUnionStmt()
		}
		{
			p.SetState(632)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		localctx = NewColumnsExprColumnContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(634)
			p.columnExpr(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumnExprContext is an interface to support dynamic dispatch.
type IColumnExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsColumnExprContext differentiates from other interfaces.
	IsColumnExprContext()
}

type ColumnExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnExprContext() *ColumnExprContext {
	var p = new(ColumnExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnExpr
	return p
}

func InitEmptyColumnExprContext(p *ColumnExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnExpr
}

func (*ColumnExprContext) IsColumnExprContext() {}

func NewColumnExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnExprContext {
	var p = new(ColumnExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_columnExpr

	return p
}

func (s *ColumnExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnExprContext) CopyAll(ctx *ColumnExprContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *ColumnExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ColumnExprTernaryOpContext struct {
	ColumnExprContext
}

func NewColumnExprTernaryOpContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprTernaryOpContext {
	var p = new(ColumnExprTernaryOpContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprTernaryOpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprTernaryOpContext) AllColumnExpr() []IColumnExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnExprContext); ok {
			tst[i] = t.(IColumnExprContext)
			i++
		}
	}

	return tst
}

func (s *ColumnExprTernaryOpContext) ColumnExpr(i int) IColumnExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprTernaryOpContext) QUERY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserQUERY, 0)
}

func (s *ColumnExprTernaryOpContext) COLON() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOLON, 0)
}

func (s *ColumnExprTernaryOpContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprTernaryOp(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprAliasContext struct {
	ColumnExprContext
}

func NewColumnExprAliasContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprAliasContext {
	var p = new(ColumnExprAliasContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprAliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprAliasContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprAliasContext) Alias() IAliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAliasContext)
}

func (s *ColumnExprAliasContext) AS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAS, 0)
}

func (s *ColumnExprAliasContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnExprAliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprAlias(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprExtractContext struct {
	ColumnExprContext
}

func NewColumnExprExtractContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprExtractContext {
	var p = new(ColumnExprExtractContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprExtractContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprExtractContext) EXTRACT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXTRACT, 0)
}

func (s *ColumnExprExtractContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnExprExtractContext) Interval() IIntervalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntervalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntervalContext)
}

func (s *ColumnExprExtractContext) FROM() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFROM, 0)
}

func (s *ColumnExprExtractContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprExtractContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnExprExtractContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprExtract(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprNegateContext struct {
	ColumnExprContext
}

func NewColumnExprNegateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprNegateContext {
	var p = new(ColumnExprNegateContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprNegateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprNegateContext) DASH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDASH, 0)
}

func (s *ColumnExprNegateContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprNegateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprNegate(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprSubqueryContext struct {
	ColumnExprContext
}

func NewColumnExprSubqueryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprSubqueryContext {
	var p = new(ColumnExprSubqueryContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprSubqueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprSubqueryContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnExprSubqueryContext) SelectUnionStmt() ISelectUnionStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectUnionStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectUnionStmtContext)
}

func (s *ColumnExprSubqueryContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnExprSubqueryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprSubquery(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprLiteralContext struct {
	ColumnExprContext
}

func NewColumnExprLiteralContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprLiteralContext {
	var p = new(ColumnExprLiteralContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprLiteralContext) Literal() ILiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *ColumnExprLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprParamSlotContext struct {
	ColumnExprContext
}

func NewColumnExprParamSlotContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprParamSlotContext {
	var p = new(ColumnExprParamSlotContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprParamSlotContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprParamSlotContext) ParamSlot() IParamSlotContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParamSlotContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParamSlotContext)
}

func (s *ColumnExprParamSlotContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprParamSlot(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprArrayContext struct {
	ColumnExprContext
}

func NewColumnExprArrayContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprArrayContext {
	var p = new(ColumnExprArrayContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprArrayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprArrayContext) LBRACKET() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLBRACKET, 0)
}

func (s *ColumnExprArrayContext) RBRACKET() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRBRACKET, 0)
}

func (s *ColumnExprArrayContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *ColumnExprArrayContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprArray(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprSubstringContext struct {
	ColumnExprContext
}

func NewColumnExprSubstringContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprSubstringContext {
	var p = new(ColumnExprSubstringContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprSubstringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprSubstringContext) SUBSTRING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSUBSTRING, 0)
}

func (s *ColumnExprSubstringContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnExprSubstringContext) AllColumnExpr() []IColumnExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnExprContext); ok {
			tst[i] = t.(IColumnExprContext)
			i++
		}
	}

	return tst
}

func (s *ColumnExprSubstringContext) ColumnExpr(i int) IColumnExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprSubstringContext) FROM() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFROM, 0)
}

func (s *ColumnExprSubstringContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnExprSubstringContext) FOR() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFOR, 0)
}

func (s *ColumnExprSubstringContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprSubstring(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprCastContext struct {
	ColumnExprContext
}

func NewColumnExprCastContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprCastContext {
	var p = new(ColumnExprCastContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprCastContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprCastContext) CAST() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCAST, 0)
}

func (s *ColumnExprCastContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnExprCastContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprCastContext) AS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAS, 0)
}

func (s *ColumnExprCastContext) ColumnTypeExpr() IColumnTypeExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnTypeExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnTypeExprContext)
}

func (s *ColumnExprCastContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnExprCastContext) DOUBLE_COLON() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDOUBLE_COLON, 0)
}

func (s *ColumnExprCastContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprCast(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprOrContext struct {
	ColumnExprContext
}

func NewColumnExprOrContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprOrContext {
	var p = new(ColumnExprOrContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprOrContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprOrContext) AllColumnExpr() []IColumnExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnExprContext); ok {
			tst[i] = t.(IColumnExprContext)
			i++
		}
	}

	return tst
}

func (s *ColumnExprOrContext) ColumnExpr(i int) IColumnExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprOrContext) OR() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOR, 0)
}

func (s *ColumnExprOrContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprOr(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprPrecedence1Context struct {
	ColumnExprContext
}

func NewColumnExprPrecedence1Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprPrecedence1Context {
	var p = new(ColumnExprPrecedence1Context)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprPrecedence1Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprPrecedence1Context) AllColumnExpr() []IColumnExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnExprContext); ok {
			tst[i] = t.(IColumnExprContext)
			i++
		}
	}

	return tst
}

func (s *ColumnExprPrecedence1Context) ColumnExpr(i int) IColumnExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprPrecedence1Context) ASTERISK() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserASTERISK, 0)
}

func (s *ColumnExprPrecedence1Context) SLASH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSLASH, 0)
}

func (s *ColumnExprPrecedence1Context) PERCENT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPERCENT, 0)
}

func (s *ColumnExprPrecedence1Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprPrecedence1(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprPrecedence2Context struct {
	ColumnExprContext
}

func NewColumnExprPrecedence2Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprPrecedence2Context {
	var p = new(ColumnExprPrecedence2Context)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprPrecedence2Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprPrecedence2Context) AllColumnExpr() []IColumnExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnExprContext); ok {
			tst[i] = t.(IColumnExprContext)
			i++
		}
	}

	return tst
}

func (s *ColumnExprPrecedence2Context) ColumnExpr(i int) IColumnExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprPrecedence2Context) PLUS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPLUS, 0)
}

func (s *ColumnExprPrecedence2Context) DASH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDASH, 0)
}

func (s *ColumnExprPrecedence2Context) CONCAT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCONCAT, 0)
}

func (s *ColumnExprPrecedence2Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprPrecedence2(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprPrecedence3Context struct {
	ColumnExprContext
}

func NewColumnExprPrecedence3Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprPrecedence3Context {
	var p = new(ColumnExprPrecedence3Context)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprPrecedence3Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprPrecedence3Context) AllColumnExpr() []IColumnExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnExprContext); ok {
			tst[i] = t.(IColumnExprContext)
			i++
		}
	}

	return tst
}

func (s *ColumnExprPrecedence3Context) ColumnExpr(i int) IColumnExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprPrecedence3Context) EQ_DOUBLE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEQ_DOUBLE, 0)
}

func (s *ColumnExprPrecedence3Context) EQ_SINGLE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEQ_SINGLE, 0)
}

func (s *ColumnExprPrecedence3Context) NOT_EQ() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNOT_EQ, 0)
}

func (s *ColumnExprPrecedence3Context) LE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLE, 0)
}

func (s *ColumnExprPrecedence3Context) GE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserGE, 0)
}

func (s *ColumnExprPrecedence3Context) LT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLT, 0)
}

func (s *ColumnExprPrecedence3Context) GT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserGT, 0)
}

func (s *ColumnExprPrecedence3Context) IN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIN, 0)
}

func (s *ColumnExprPrecedence3Context) LIKE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLIKE, 0)
}

func (s *ColumnExprPrecedence3Context) ILIKE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserILIKE, 0)
}

func (s *ColumnExprPrecedence3Context) GLOBAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserGLOBAL, 0)
}

func (s *ColumnExprPrecedence3Context) NOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNOT, 0)
}

func (s *ColumnExprPrecedence3Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprPrecedence3(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprIntervalContext struct {
	ColumnExprContext
}

func NewColumnExprIntervalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprIntervalContext {
	var p = new(ColumnExprIntervalContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprIntervalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprIntervalContext) INTERVAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINTERVAL, 0)
}

func (s *ColumnExprIntervalContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprIntervalContext) Interval() IIntervalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntervalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntervalContext)
}

func (s *ColumnExprIntervalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprInterval(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprIsNullContext struct {
	ColumnExprContext
}

func NewColumnExprIsNullContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprIsNullContext {
	var p = new(ColumnExprIsNullContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprIsNullContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprIsNullContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprIsNullContext) IS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIS, 0)
}

func (s *ColumnExprIsNullContext) NULL_SQL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNULL_SQL, 0)
}

func (s *ColumnExprIsNullContext) NOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNOT, 0)
}

func (s *ColumnExprIsNullContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprIsNull(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprWinFunctionTargetContext struct {
	ColumnExprContext
}

func NewColumnExprWinFunctionTargetContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprWinFunctionTargetContext {
	var p = new(ColumnExprWinFunctionTargetContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprWinFunctionTargetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprWinFunctionTargetContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *ColumnExprWinFunctionTargetContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnExprWinFunctionTargetContext) OVER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOVER, 0)
}

func (s *ColumnExprWinFunctionTargetContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnExprWinFunctionTargetContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnExprWinFunctionTargetContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *ColumnExprWinFunctionTargetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprWinFunctionTarget(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprTrimContext struct {
	ColumnExprContext
}

func NewColumnExprTrimContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprTrimContext {
	var p = new(ColumnExprTrimContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprTrimContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprTrimContext) TRIM() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTRIM, 0)
}

func (s *ColumnExprTrimContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnExprTrimContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTRING_LITERAL, 0)
}

func (s *ColumnExprTrimContext) FROM() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFROM, 0)
}

func (s *ColumnExprTrimContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprTrimContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnExprTrimContext) BOTH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserBOTH, 0)
}

func (s *ColumnExprTrimContext) LEADING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLEADING, 0)
}

func (s *ColumnExprTrimContext) TRAILING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTRAILING, 0)
}

func (s *ColumnExprTrimContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprTrim(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprTupleContext struct {
	ColumnExprContext
}

func NewColumnExprTupleContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprTupleContext {
	var p = new(ColumnExprTupleContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprTupleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprTupleContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnExprTupleContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *ColumnExprTupleContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnExprTupleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprTuple(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprArrayAccessContext struct {
	ColumnExprContext
}

func NewColumnExprArrayAccessContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprArrayAccessContext {
	var p = new(ColumnExprArrayAccessContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprArrayAccessContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprArrayAccessContext) AllColumnExpr() []IColumnExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnExprContext); ok {
			tst[i] = t.(IColumnExprContext)
			i++
		}
	}

	return tst
}

func (s *ColumnExprArrayAccessContext) ColumnExpr(i int) IColumnExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprArrayAccessContext) LBRACKET() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLBRACKET, 0)
}

func (s *ColumnExprArrayAccessContext) RBRACKET() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRBRACKET, 0)
}

func (s *ColumnExprArrayAccessContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprArrayAccess(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprBetweenContext struct {
	ColumnExprContext
}

func NewColumnExprBetweenContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprBetweenContext {
	var p = new(ColumnExprBetweenContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprBetweenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprBetweenContext) AllColumnExpr() []IColumnExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnExprContext); ok {
			tst[i] = t.(IColumnExprContext)
			i++
		}
	}

	return tst
}

func (s *ColumnExprBetweenContext) ColumnExpr(i int) IColumnExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprBetweenContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserBETWEEN, 0)
}

func (s *ColumnExprBetweenContext) AND() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAND, 0)
}

func (s *ColumnExprBetweenContext) NOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNOT, 0)
}

func (s *ColumnExprBetweenContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprBetween(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprParensContext struct {
	ColumnExprContext
}

func NewColumnExprParensContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprParensContext {
	var p = new(ColumnExprParensContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprParensContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprParensContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnExprParensContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprParensContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnExprParensContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprParens(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprTimestampContext struct {
	ColumnExprContext
}

func NewColumnExprTimestampContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprTimestampContext {
	var p = new(ColumnExprTimestampContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprTimestampContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprTimestampContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTIMESTAMP, 0)
}

func (s *ColumnExprTimestampContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTRING_LITERAL, 0)
}

func (s *ColumnExprTimestampContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprTimestamp(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprAndContext struct {
	ColumnExprContext
}

func NewColumnExprAndContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprAndContext {
	var p = new(ColumnExprAndContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprAndContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprAndContext) AllColumnExpr() []IColumnExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnExprContext); ok {
			tst[i] = t.(IColumnExprContext)
			i++
		}
	}

	return tst
}

func (s *ColumnExprAndContext) ColumnExpr(i int) IColumnExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprAndContext) AND() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAND, 0)
}

func (s *ColumnExprAndContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprAnd(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprTupleAccessContext struct {
	ColumnExprContext
}

func NewColumnExprTupleAccessContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprTupleAccessContext {
	var p = new(ColumnExprTupleAccessContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprTupleAccessContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprTupleAccessContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprTupleAccessContext) DOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDOT, 0)
}

func (s *ColumnExprTupleAccessContext) DECIMAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDECIMAL_LITERAL, 0)
}

func (s *ColumnExprTupleAccessContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprTupleAccess(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprCaseContext struct {
	ColumnExprContext
}

func NewColumnExprCaseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprCaseContext {
	var p = new(ColumnExprCaseContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprCaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprCaseContext) CASE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCASE, 0)
}

func (s *ColumnExprCaseContext) END() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEND, 0)
}

func (s *ColumnExprCaseContext) AllColumnExpr() []IColumnExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnExprContext); ok {
			tst[i] = t.(IColumnExprContext)
			i++
		}
	}

	return tst
}

func (s *ColumnExprCaseContext) ColumnExpr(i int) IColumnExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprCaseContext) AllWHEN() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserWHEN)
}

func (s *ColumnExprCaseContext) WHEN(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWHEN, i)
}

func (s *ColumnExprCaseContext) AllTHEN() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserTHEN)
}

func (s *ColumnExprCaseContext) THEN(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTHEN, i)
}

func (s *ColumnExprCaseContext) ELSE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserELSE, 0)
}

func (s *ColumnExprCaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprCase(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprDateContext struct {
	ColumnExprContext
}

func NewColumnExprDateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprDateContext {
	var p = new(ColumnExprDateContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprDateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprDateContext) DATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDATE, 0)
}

func (s *ColumnExprDateContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTRING_LITERAL, 0)
}

func (s *ColumnExprDateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprDate(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprNotContext struct {
	ColumnExprContext
}

func NewColumnExprNotContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprNotContext {
	var p = new(ColumnExprNotContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprNotContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprNotContext) NOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNOT, 0)
}

func (s *ColumnExprNotContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprNotContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprNot(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprWinFunctionContext struct {
	ColumnExprContext
}

func NewColumnExprWinFunctionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprWinFunctionContext {
	var p = new(ColumnExprWinFunctionContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprWinFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprWinFunctionContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnExprWinFunctionContext) OVER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOVER, 0)
}

func (s *ColumnExprWinFunctionContext) AllLPAREN() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserLPAREN)
}

func (s *ColumnExprWinFunctionContext) LPAREN(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, i)
}

func (s *ColumnExprWinFunctionContext) WindowExpr() IWindowExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindowExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindowExprContext)
}

func (s *ColumnExprWinFunctionContext) AllRPAREN() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserRPAREN)
}

func (s *ColumnExprWinFunctionContext) RPAREN(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, i)
}

func (s *ColumnExprWinFunctionContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *ColumnExprWinFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprWinFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprIdentifierContext struct {
	ColumnExprContext
}

func NewColumnExprIdentifierContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprIdentifierContext {
	var p = new(ColumnExprIdentifierContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprIdentifierContext) ColumnIdentifier() IColumnIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnIdentifierContext)
}

func (s *ColumnExprIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprFunctionContext struct {
	ColumnExprContext
}

func NewColumnExprFunctionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprFunctionContext {
	var p = new(ColumnExprFunctionContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprFunctionContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnExprFunctionContext) AllLPAREN() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserLPAREN)
}

func (s *ColumnExprFunctionContext) LPAREN(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, i)
}

func (s *ColumnExprFunctionContext) AllRPAREN() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserRPAREN)
}

func (s *ColumnExprFunctionContext) RPAREN(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, i)
}

func (s *ColumnExprFunctionContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDISTINCT, 0)
}

func (s *ColumnExprFunctionContext) ColumnArgList() IColumnArgListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnArgListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnArgListContext)
}

func (s *ColumnExprFunctionContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *ColumnExprFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprAsteriskContext struct {
	ColumnExprContext
}

func NewColumnExprAsteriskContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprAsteriskContext {
	var p = new(ColumnExprAsteriskContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprAsteriskContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprAsteriskContext) ASTERISK() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserASTERISK, 0)
}

func (s *ColumnExprAsteriskContext) TableIdentifier() ITableIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *ColumnExprAsteriskContext) DOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDOT, 0)
}

func (s *ColumnExprAsteriskContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprAsterisk(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) ColumnExpr() (localctx IColumnExprContext) {
	return p.columnExpr(0)
}

func (p *ClickHouseParser) columnExpr(_p int) (localctx IColumnExprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewColumnExprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IColumnExprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 92
	p.EnterRecursionRule(localctx, 92, ClickHouseParserRULE_columnExpr, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(767)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 98, p.GetParserRuleContext()) {
	case 1:
		localctx = NewColumnExprCaseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(638)
			p.Match(ClickHouseParserCASE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(640)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 86, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(639)
				p.columnExpr(0)
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(647)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == ClickHouseParserWHEN {
			{
				p.SetState(642)
				p.Match(ClickHouseParserWHEN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(643)
				p.columnExpr(0)
			}
			{
				p.SetState(644)
				p.Match(ClickHouseParserTHEN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(645)
				p.columnExpr(0)
			}

			p.SetState(649)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(653)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserELSE {
			{
				p.SetState(651)
				p.Match(ClickHouseParserELSE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(652)
				p.columnExpr(0)
			}

		}
		{
			p.SetState(655)
			p.Match(ClickHouseParserEND)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		localctx = NewColumnExprCastContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(657)
			p.Match(ClickHouseParserCAST)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(658)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(659)
			p.columnExpr(0)
		}
		{
			p.SetState(660)
			p.Match(ClickHouseParserAS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(661)
			p.ColumnTypeExpr()
		}
		{
			p.SetState(662)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		localctx = NewColumnExprDateContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(664)
			p.Match(ClickHouseParserDATE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(665)
			p.Match(ClickHouseParserSTRING_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		localctx = NewColumnExprExtractContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(666)
			p.Match(ClickHouseParserEXTRACT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(667)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(668)
			p.Interval()
		}
		{
			p.SetState(669)
			p.Match(ClickHouseParserFROM)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(670)
			p.columnExpr(0)
		}
		{
			p.SetState(671)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		localctx = NewColumnExprIntervalContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(673)
			p.Match(ClickHouseParserINTERVAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(674)
			p.columnExpr(0)
		}
		{
			p.SetState(675)
			p.Interval()
		}

	case 6:
		localctx = NewColumnExprSubstringContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(677)
			p.Match(ClickHouseParserSUBSTRING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(678)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(679)
			p.columnExpr(0)
		}
		{
			p.SetState(680)
			p.Match(ClickHouseParserFROM)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(681)
			p.columnExpr(0)
		}
		p.SetState(684)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserFOR {
			{
				p.SetState(682)
				p.Match(ClickHouseParserFOR)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(683)
				p.columnExpr(0)
			}

		}
		{
			p.SetState(686)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 7:
		localctx = NewColumnExprTimestampContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(688)
			p.Match(ClickHouseParserTIMESTAMP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(689)
			p.Match(ClickHouseParserSTRING_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 8:
		localctx = NewColumnExprTrimContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(690)
			p.Match(ClickHouseParserTRIM)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(691)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(692)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ClickHouseParserBOTH || _la == ClickHouseParserLEADING || _la == ClickHouseParserTRAILING) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(693)
			p.Match(ClickHouseParserSTRING_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(694)
			p.Match(ClickHouseParserFROM)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(695)
			p.columnExpr(0)
		}
		{
			p.SetState(696)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 9:
		localctx = NewColumnExprWinFunctionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(698)
			p.Identifier()
		}

		{
			p.SetState(699)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(701)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-4) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&-1) != 0) || ((int64((_la-128)) & ^0x3f) == 0 && ((int64(1)<<(_la-128))&-49) != 0) || ((int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&18662580223) != 0) {
			{
				p.SetState(700)
				p.ColumnExprList()
			}

		}
		{
			p.SetState(703)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		{
			p.SetState(705)
			p.Match(ClickHouseParserOVER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(706)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(707)
			p.WindowExpr()
		}
		{
			p.SetState(708)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 10:
		localctx = NewColumnExprWinFunctionTargetContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(710)
			p.Identifier()
		}

		{
			p.SetState(711)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(713)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-4) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&-1) != 0) || ((int64((_la-128)) & ^0x3f) == 0 && ((int64(1)<<(_la-128))&-49) != 0) || ((int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&18662580223) != 0) {
			{
				p.SetState(712)
				p.ColumnExprList()
			}

		}
		{
			p.SetState(715)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		{
			p.SetState(717)
			p.Match(ClickHouseParserOVER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(718)
			p.Identifier()
		}

	case 11:
		localctx = NewColumnExprFunctionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(720)
			p.Identifier()
		}
		p.SetState(726)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 93, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(721)
				p.Match(ClickHouseParserLPAREN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(723)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-4) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&-1) != 0) || ((int64((_la-128)) & ^0x3f) == 0 && ((int64(1)<<(_la-128))&-49) != 0) || ((int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&18662580223) != 0) {
				{
					p.SetState(722)
					p.ColumnExprList()
				}

			}
			{
				p.SetState(725)
				p.Match(ClickHouseParserRPAREN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(728)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(730)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 94, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(729)
				p.Match(ClickHouseParserDISTINCT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(733)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-4) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&-1) != 0) || ((int64((_la-128)) & ^0x3f) == 0 && ((int64(1)<<(_la-128))&-49) != 0) || ((int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&18662580223) != 0) {
			{
				p.SetState(732)
				p.ColumnArgList()
			}

		}
		{
			p.SetState(735)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 12:
		localctx = NewColumnExprLiteralContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(737)
			p.Literal()
		}

	case 13:
		localctx = NewColumnExprParamSlotContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(738)
			p.ParamSlot()
		}

	case 14:
		localctx = NewColumnExprNegateContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(739)
			p.Match(ClickHouseParserDASH)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(740)
			p.columnExpr(17)
		}

	case 15:
		localctx = NewColumnExprNotContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(741)
			p.Match(ClickHouseParserNOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(742)
			p.columnExpr(12)
		}

	case 16:
		localctx = NewColumnExprAsteriskContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		p.SetState(746)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-4) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&-10133099161845761) != 0) || ((int64((_la-128)) & ^0x3f) == 0 && ((int64(1)<<(_la-128))&-49) != 0) || ((int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&255) != 0) {
			{
				p.SetState(743)
				p.TableIdentifier()
			}
			{
				p.SetState(744)
				p.Match(ClickHouseParserDOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(748)
			p.Match(ClickHouseParserASTERISK)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 17:
		localctx = NewColumnExprSubqueryContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(749)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(750)
			p.SelectUnionStmt()
		}
		{
			p.SetState(751)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 18:
		localctx = NewColumnExprParensContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(753)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(754)
			p.columnExpr(0)
		}
		{
			p.SetState(755)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 19:
		localctx = NewColumnExprTupleContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(757)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(758)
			p.ColumnExprList()
		}
		{
			p.SetState(759)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 20:
		localctx = NewColumnExprArrayContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(761)
			p.Match(ClickHouseParserLBRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(763)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-4) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&-1) != 0) || ((int64((_la-128)) & ^0x3f) == 0 && ((int64(1)<<(_la-128))&-49) != 0) || ((int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&18662580223) != 0) {
			{
				p.SetState(762)
				p.ColumnExprList()
			}

		}
		{
			p.SetState(765)
			p.Match(ClickHouseParserRBRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 21:
		localctx = NewColumnExprIdentifierContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(766)
			p.ColumnIdentifier()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(843)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 107, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(841)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 106, p.GetParserRuleContext()) {
			case 1:
				localctx = NewColumnExprPrecedence1Context(p, NewColumnExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ClickHouseParserRULE_columnExpr)
				p.SetState(769)

				if !(p.Precpred(p.GetParserRuleContext(), 16)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 16)", ""))
					goto errorExit
				}
				{
					p.SetState(770)
					_la = p.GetTokenStream().LA(1)

					if !((int64((_la-206)) & ^0x3f) == 0 && ((int64(1)<<(_la-206))&268959745) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(771)
					p.columnExpr(17)
				}

			case 2:
				localctx = NewColumnExprPrecedence2Context(p, NewColumnExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ClickHouseParserRULE_columnExpr)
				p.SetState(772)

				if !(p.Precpred(p.GetParserRuleContext(), 15)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 15)", ""))
					goto errorExit
				}
				{
					p.SetState(773)
					_la = p.GetTokenStream().LA(1)

					if !((int64((_la-212)) & ^0x3f) == 0 && ((int64(1)<<(_la-212))&16387) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(774)
					p.columnExpr(16)
				}

			case 3:
				localctx = NewColumnExprPrecedence3Context(p, NewColumnExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ClickHouseParserRULE_columnExpr)
				p.SetState(775)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
					goto errorExit
				}
				p.SetState(794)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}

				switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 102, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(776)
						p.Match(ClickHouseParserEQ_DOUBLE)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case 2:
					{
						p.SetState(777)
						p.Match(ClickHouseParserEQ_SINGLE)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case 3:
					{
						p.SetState(778)
						p.Match(ClickHouseParserNOT_EQ)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case 4:
					{
						p.SetState(779)
						p.Match(ClickHouseParserLE)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case 5:
					{
						p.SetState(780)
						p.Match(ClickHouseParserGE)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case 6:
					{
						p.SetState(781)
						p.Match(ClickHouseParserLT)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case 7:
					{
						p.SetState(782)
						p.Match(ClickHouseParserGT)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case 8:
					p.SetState(784)
					p.GetErrorHandler().Sync(p)
					if p.HasError() {
						goto errorExit
					}
					_la = p.GetTokenStream().LA(1)

					if _la == ClickHouseParserGLOBAL {
						{
							p.SetState(783)
							p.Match(ClickHouseParserGLOBAL)
							if p.HasError() {
								// Recognition error - abort rule
								goto errorExit
							}
						}

					}
					p.SetState(787)
					p.GetErrorHandler().Sync(p)
					if p.HasError() {
						goto errorExit
					}
					_la = p.GetTokenStream().LA(1)

					if _la == ClickHouseParserNOT {
						{
							p.SetState(786)
							p.Match(ClickHouseParserNOT)
							if p.HasError() {
								// Recognition error - abort rule
								goto errorExit
							}
						}

					}
					{
						p.SetState(789)
						p.Match(ClickHouseParserIN)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case 9:
					p.SetState(791)
					p.GetErrorHandler().Sync(p)
					if p.HasError() {
						goto errorExit
					}
					_la = p.GetTokenStream().LA(1)

					if _la == ClickHouseParserNOT {
						{
							p.SetState(790)
							p.Match(ClickHouseParserNOT)
							if p.HasError() {
								// Recognition error - abort rule
								goto errorExit
							}
						}

					}
					{
						p.SetState(793)
						_la = p.GetTokenStream().LA(1)

						if !(_la == ClickHouseParserILIKE || _la == ClickHouseParserLIKE) {
							p.GetErrorHandler().RecoverInline(p)
						} else {
							p.GetErrorHandler().ReportMatch(p)
							p.Consume()
						}
					}

				case antlr.ATNInvalidAltNumber:
					goto errorExit
				}
				{
					p.SetState(796)
					p.columnExpr(15)
				}

			case 4:
				localctx = NewColumnExprAndContext(p, NewColumnExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ClickHouseParserRULE_columnExpr)
				p.SetState(797)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
					goto errorExit
				}
				{
					p.SetState(798)
					p.Match(ClickHouseParserAND)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(799)
					p.columnExpr(12)
				}

			case 5:
				localctx = NewColumnExprOrContext(p, NewColumnExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ClickHouseParserRULE_columnExpr)
				p.SetState(800)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
					goto errorExit
				}
				{
					p.SetState(801)
					p.Match(ClickHouseParserOR)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(802)
					p.columnExpr(11)
				}

			case 6:
				localctx = NewColumnExprBetweenContext(p, NewColumnExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ClickHouseParserRULE_columnExpr)
				p.SetState(803)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
					goto errorExit
				}
				p.SetState(805)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == ClickHouseParserNOT {
					{
						p.SetState(804)
						p.Match(ClickHouseParserNOT)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				{
					p.SetState(807)
					p.Match(ClickHouseParserBETWEEN)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(808)
					p.columnExpr(0)
				}
				{
					p.SetState(809)
					p.Match(ClickHouseParserAND)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(810)
					p.columnExpr(10)
				}

			case 7:
				localctx = NewColumnExprTernaryOpContext(p, NewColumnExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ClickHouseParserRULE_columnExpr)
				p.SetState(812)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
					goto errorExit
				}
				{
					p.SetState(813)
					p.Match(ClickHouseParserQUERY)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(814)
					p.columnExpr(0)
				}
				{
					p.SetState(815)
					p.Match(ClickHouseParserCOLON)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(816)
					p.columnExpr(8)
				}

			case 8:
				localctx = NewColumnExprCastContext(p, NewColumnExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ClickHouseParserRULE_columnExpr)
				p.SetState(818)

				if !(p.Precpred(p.GetParserRuleContext(), 31)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 31)", ""))
					goto errorExit
				}
				{
					p.SetState(819)
					p.Match(ClickHouseParserDOUBLE_COLON)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(820)
					p.ColumnTypeExpr()
				}

			case 9:
				localctx = NewColumnExprArrayAccessContext(p, NewColumnExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ClickHouseParserRULE_columnExpr)
				p.SetState(821)

				if !(p.Precpred(p.GetParserRuleContext(), 19)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 19)", ""))
					goto errorExit
				}
				{
					p.SetState(822)
					p.Match(ClickHouseParserLBRACKET)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(823)
					p.columnExpr(0)
				}
				{
					p.SetState(824)
					p.Match(ClickHouseParserRBRACKET)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 10:
				localctx = NewColumnExprTupleAccessContext(p, NewColumnExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ClickHouseParserRULE_columnExpr)
				p.SetState(826)

				if !(p.Precpred(p.GetParserRuleContext(), 18)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 18)", ""))
					goto errorExit
				}
				{
					p.SetState(827)
					p.Match(ClickHouseParserDOT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(828)
					p.Match(ClickHouseParserDECIMAL_LITERAL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 11:
				localctx = NewColumnExprIsNullContext(p, NewColumnExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ClickHouseParserRULE_columnExpr)
				p.SetState(829)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
					goto errorExit
				}
				{
					p.SetState(830)
					p.Match(ClickHouseParserIS)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(832)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == ClickHouseParserNOT {
					{
						p.SetState(831)
						p.Match(ClickHouseParserNOT)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				{
					p.SetState(834)
					p.Match(ClickHouseParserNULL_SQL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 12:
				localctx = NewColumnExprAliasContext(p, NewColumnExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ClickHouseParserRULE_columnExpr)
				p.SetState(835)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
					goto errorExit
				}
				p.SetState(839)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}

				switch p.GetTokenStream().LA(1) {
				case ClickHouseParserAFTER, ClickHouseParserALIAS, ClickHouseParserALTER, ClickHouseParserASCENDING, ClickHouseParserAST, ClickHouseParserASYNC, ClickHouseParserATTACH, ClickHouseParserBOTH, ClickHouseParserBY, ClickHouseParserCASE, ClickHouseParserCAST, ClickHouseParserCHECK, ClickHouseParserCLEAR, ClickHouseParserCLUSTER, ClickHouseParserCODEC, ClickHouseParserCOLLATE, ClickHouseParserCOLUMN, ClickHouseParserCOMMENT, ClickHouseParserCONSTRAINT, ClickHouseParserCREATE, ClickHouseParserCUBE, ClickHouseParserCURRENT, ClickHouseParserDATABASE, ClickHouseParserDATABASES, ClickHouseParserDATE, ClickHouseParserDEDUPLICATE, ClickHouseParserDEFAULT, ClickHouseParserDELAY, ClickHouseParserDELETE, ClickHouseParserDESC, ClickHouseParserDESCENDING, ClickHouseParserDESCRIBE, ClickHouseParserDETACH, ClickHouseParserDICTIONARIES, ClickHouseParserDICTIONARY, ClickHouseParserDISK, ClickHouseParserDISTRIBUTED, ClickHouseParserDROP, ClickHouseParserELSE, ClickHouseParserEND, ClickHouseParserENGINE, ClickHouseParserEVENTS, ClickHouseParserEXISTS, ClickHouseParserEXPLAIN, ClickHouseParserEXPRESSION, ClickHouseParserEXTRACT, ClickHouseParserFETCHES, ClickHouseParserFIRST, ClickHouseParserFLUSH, ClickHouseParserFOLLOWING, ClickHouseParserFOR, ClickHouseParserFREEZE, ClickHouseParserFUNCTION, ClickHouseParserGRANULARITY, ClickHouseParserHIERARCHICAL, ClickHouseParserID, ClickHouseParserIF, ClickHouseParserINDEX, ClickHouseParserINJECTIVE, ClickHouseParserINSERT, ClickHouseParserINTERVAL, ClickHouseParserIS_OBJECT_ID, ClickHouseParserKEY, ClickHouseParserKILL, ClickHouseParserLAST, ClickHouseParserLAYOUT, ClickHouseParserLEADING, ClickHouseParserLIFETIME, ClickHouseParserLIVE, ClickHouseParserLOCAL, ClickHouseParserLOGS, ClickHouseParserMATERIALIZE, ClickHouseParserMATERIALIZED, ClickHouseParserMAX, ClickHouseParserMERGES, ClickHouseParserMIN, ClickHouseParserMODIFY, ClickHouseParserMOVE, ClickHouseParserMUTATION, ClickHouseParserNO, ClickHouseParserNULLS, ClickHouseParserOPTIMIZE, ClickHouseParserOUTER, ClickHouseParserOUTFILE, ClickHouseParserOVER, ClickHouseParserPARTITION, ClickHouseParserPOPULATE, ClickHouseParserPRECEDING, ClickHouseParserPRIMARY, ClickHouseParserRANGE, ClickHouseParserRELOAD, ClickHouseParserREMOVE, ClickHouseParserRENAME, ClickHouseParserREPLACE, ClickHouseParserREPLICA, ClickHouseParserREPLICATED, ClickHouseParserROLLUP, ClickHouseParserROW, ClickHouseParserROWS, ClickHouseParserSELECT, ClickHouseParserSENDS, ClickHouseParserSET, ClickHouseParserSHOW, ClickHouseParserSOURCE, ClickHouseParserSTART, ClickHouseParserSTOP, ClickHouseParserSUBSTRING, ClickHouseParserSYNC, ClickHouseParserSYNTAX, ClickHouseParserSYSTEM, ClickHouseParserTABLE, ClickHouseParserTABLES, ClickHouseParserTEMPORARY, ClickHouseParserTEST, ClickHouseParserTHEN, ClickHouseParserTIES, ClickHouseParserTIMEOUT, ClickHouseParserTIMESTAMP, ClickHouseParserTO, ClickHouseParserTOTALS, ClickHouseParserTRAILING, ClickHouseParserTRIM, ClickHouseParserTRUNCATE, ClickHouseParserTTL, ClickHouseParserTYPE, ClickHouseParserUNBOUNDED, ClickHouseParserUPDATE, ClickHouseParserUSE, ClickHouseParserUUID, ClickHouseParserVALUES, ClickHouseParserVIEW, ClickHouseParserVOLUME, ClickHouseParserWATCH, ClickHouseParserWHEN, ClickHouseParserIDENTIFIER:
					{
						p.SetState(836)
						p.Alias()
					}

				case ClickHouseParserAS:
					{
						p.SetState(837)
						p.Match(ClickHouseParserAS)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(838)
						p.Identifier()
					}

				default:
					p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					goto errorExit
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(845)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 107, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumnArgListContext is an interface to support dynamic dispatch.
type IColumnArgListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllColumnArgExpr() []IColumnArgExprContext
	ColumnArgExpr(i int) IColumnArgExprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsColumnArgListContext differentiates from other interfaces.
	IsColumnArgListContext()
}

type ColumnArgListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnArgListContext() *ColumnArgListContext {
	var p = new(ColumnArgListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnArgList
	return p
}

func InitEmptyColumnArgListContext(p *ColumnArgListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnArgList
}

func (*ColumnArgListContext) IsColumnArgListContext() {}

func NewColumnArgListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnArgListContext {
	var p = new(ColumnArgListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_columnArgList

	return p
}

func (s *ColumnArgListContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnArgListContext) AllColumnArgExpr() []IColumnArgExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnArgExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnArgExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnArgExprContext); ok {
			tst[i] = t.(IColumnArgExprContext)
			i++
		}
	}

	return tst
}

func (s *ColumnArgListContext) ColumnArgExpr(i int) IColumnArgExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnArgExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnArgExprContext)
}

func (s *ColumnArgListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *ColumnArgListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *ColumnArgListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnArgListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnArgListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnArgList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) ColumnArgList() (localctx IColumnArgListContext) {
	localctx = NewColumnArgListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, ClickHouseParserRULE_columnArgList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(846)
		p.ColumnArgExpr()
	}
	p.SetState(851)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ClickHouseParserCOMMA {
		{
			p.SetState(847)
			p.Match(ClickHouseParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(848)
			p.ColumnArgExpr()
		}

		p.SetState(853)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumnArgExprContext is an interface to support dynamic dispatch.
type IColumnArgExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ColumnLambdaExpr() IColumnLambdaExprContext
	ColumnExpr() IColumnExprContext

	// IsColumnArgExprContext differentiates from other interfaces.
	IsColumnArgExprContext()
}

type ColumnArgExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnArgExprContext() *ColumnArgExprContext {
	var p = new(ColumnArgExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnArgExpr
	return p
}

func InitEmptyColumnArgExprContext(p *ColumnArgExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnArgExpr
}

func (*ColumnArgExprContext) IsColumnArgExprContext() {}

func NewColumnArgExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnArgExprContext {
	var p = new(ColumnArgExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_columnArgExpr

	return p
}

func (s *ColumnArgExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnArgExprContext) ColumnLambdaExpr() IColumnLambdaExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnLambdaExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnLambdaExprContext)
}

func (s *ColumnArgExprContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnArgExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnArgExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnArgExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnArgExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) ColumnArgExpr() (localctx IColumnArgExprContext) {
	localctx = NewColumnArgExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, ClickHouseParserRULE_columnArgExpr)
	p.SetState(856)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 109, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(854)
			p.ColumnLambdaExpr()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(855)
			p.columnExpr(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumnLambdaExprContext is an interface to support dynamic dispatch.
type IColumnLambdaExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ARROW() antlr.TerminalNode
	ColumnExpr() IColumnExprContext
	LPAREN() antlr.TerminalNode
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	RPAREN() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsColumnLambdaExprContext differentiates from other interfaces.
	IsColumnLambdaExprContext()
}

type ColumnLambdaExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnLambdaExprContext() *ColumnLambdaExprContext {
	var p = new(ColumnLambdaExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnLambdaExpr
	return p
}

func InitEmptyColumnLambdaExprContext(p *ColumnLambdaExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnLambdaExpr
}

func (*ColumnLambdaExprContext) IsColumnLambdaExprContext() {}

func NewColumnLambdaExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnLambdaExprContext {
	var p = new(ColumnLambdaExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_columnLambdaExpr

	return p
}

func (s *ColumnLambdaExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnLambdaExprContext) ARROW() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserARROW, 0)
}

func (s *ColumnLambdaExprContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnLambdaExprContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnLambdaExprContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *ColumnLambdaExprContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnLambdaExprContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnLambdaExprContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *ColumnLambdaExprContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *ColumnLambdaExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnLambdaExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnLambdaExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnLambdaExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) ColumnLambdaExpr() (localctx IColumnLambdaExprContext) {
	localctx = NewColumnLambdaExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, ClickHouseParserRULE_columnLambdaExpr)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(877)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ClickHouseParserLPAREN:
		{
			p.SetState(858)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(859)
			p.Identifier()
		}
		p.SetState(864)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == ClickHouseParserCOMMA {
			{
				p.SetState(860)
				p.Match(ClickHouseParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(861)
				p.Identifier()
			}

			p.SetState(866)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(867)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ClickHouseParserAFTER, ClickHouseParserALIAS, ClickHouseParserALL, ClickHouseParserALTER, ClickHouseParserAND, ClickHouseParserANTI, ClickHouseParserANY, ClickHouseParserARRAY, ClickHouseParserAS, ClickHouseParserASCENDING, ClickHouseParserASOF, ClickHouseParserAST, ClickHouseParserASYNC, ClickHouseParserATTACH, ClickHouseParserBETWEEN, ClickHouseParserBOTH, ClickHouseParserBY, ClickHouseParserCASE, ClickHouseParserCAST, ClickHouseParserCHECK, ClickHouseParserCLEAR, ClickHouseParserCLUSTER, ClickHouseParserCODEC, ClickHouseParserCOLLATE, ClickHouseParserCOLUMN, ClickHouseParserCOMMENT, ClickHouseParserCONSTRAINT, ClickHouseParserCREATE, ClickHouseParserCROSS, ClickHouseParserCUBE, ClickHouseParserCURRENT, ClickHouseParserDATABASE, ClickHouseParserDATABASES, ClickHouseParserDATE, ClickHouseParserDAY, ClickHouseParserDEDUPLICATE, ClickHouseParserDEFAULT, ClickHouseParserDELAY, ClickHouseParserDELETE, ClickHouseParserDESC, ClickHouseParserDESCENDING, ClickHouseParserDESCRIBE, ClickHouseParserDETACH, ClickHouseParserDICTIONARIES, ClickHouseParserDICTIONARY, ClickHouseParserDISK, ClickHouseParserDISTINCT, ClickHouseParserDISTRIBUTED, ClickHouseParserDROP, ClickHouseParserELSE, ClickHouseParserEND, ClickHouseParserENGINE, ClickHouseParserEVENTS, ClickHouseParserEXCEPT, ClickHouseParserEXISTS, ClickHouseParserEXPLAIN, ClickHouseParserEXPRESSION, ClickHouseParserEXTRACT, ClickHouseParserFETCHES, ClickHouseParserFINAL, ClickHouseParserFIRST, ClickHouseParserFLUSH, ClickHouseParserFOLLOWING, ClickHouseParserFOR, ClickHouseParserFORMAT, ClickHouseParserFREEZE, ClickHouseParserFROM, ClickHouseParserFULL, ClickHouseParserFUNCTION, ClickHouseParserGLOBAL, ClickHouseParserGRANULARITY, ClickHouseParserGROUP, ClickHouseParserHAVING, ClickHouseParserHIERARCHICAL, ClickHouseParserHOUR, ClickHouseParserID, ClickHouseParserIF, ClickHouseParserILIKE, ClickHouseParserIN, ClickHouseParserINDEX, ClickHouseParserINJECTIVE, ClickHouseParserINNER, ClickHouseParserINSERT, ClickHouseParserINTERSECT, ClickHouseParserINTERVAL, ClickHouseParserINTO, ClickHouseParserIS, ClickHouseParserIS_OBJECT_ID, ClickHouseParserJOIN, ClickHouseParserKEY, ClickHouseParserKILL, ClickHouseParserLAST, ClickHouseParserLAYOUT, ClickHouseParserLEADING, ClickHouseParserLEFT, ClickHouseParserLIFETIME, ClickHouseParserLIKE, ClickHouseParserLIMIT, ClickHouseParserLIVE, ClickHouseParserLOCAL, ClickHouseParserLOGS, ClickHouseParserMATERIALIZE, ClickHouseParserMATERIALIZED, ClickHouseParserMAX, ClickHouseParserMERGES, ClickHouseParserMIN, ClickHouseParserMINUTE, ClickHouseParserMODIFY, ClickHouseParserMONTH, ClickHouseParserMOVE, ClickHouseParserMUTATION, ClickHouseParserNO, ClickHouseParserNOT, ClickHouseParserNULLS, ClickHouseParserOFFSET, ClickHouseParserON, ClickHouseParserOPTIMIZE, ClickHouseParserOR, ClickHouseParserORDER, ClickHouseParserOUTER, ClickHouseParserOUTFILE, ClickHouseParserOVER, ClickHouseParserPARTITION, ClickHouseParserPOPULATE, ClickHouseParserPRECEDING, ClickHouseParserPREWHERE, ClickHouseParserPRIMARY, ClickHouseParserQUARTER, ClickHouseParserRANGE, ClickHouseParserRELOAD, ClickHouseParserREMOVE, ClickHouseParserRENAME, ClickHouseParserREPLACE, ClickHouseParserREPLICA, ClickHouseParserREPLICATED, ClickHouseParserRIGHT, ClickHouseParserROLLUP, ClickHouseParserROW, ClickHouseParserROWS, ClickHouseParserSAMPLE, ClickHouseParserSECOND, ClickHouseParserSELECT, ClickHouseParserSEMI, ClickHouseParserSENDS, ClickHouseParserSET, ClickHouseParserSETTINGS, ClickHouseParserSHOW, ClickHouseParserSOURCE, ClickHouseParserSTART, ClickHouseParserSTOP, ClickHouseParserSUBSTRING, ClickHouseParserSYNC, ClickHouseParserSYNTAX, ClickHouseParserSYSTEM, ClickHouseParserTABLE, ClickHouseParserTABLES, ClickHouseParserTEMPORARY, ClickHouseParserTEST, ClickHouseParserTHEN, ClickHouseParserTIES, ClickHouseParserTIMEOUT, ClickHouseParserTIMESTAMP, ClickHouseParserTO, ClickHouseParserTOP, ClickHouseParserTOTALS, ClickHouseParserTRAILING, ClickHouseParserTRIM, ClickHouseParserTRUNCATE, ClickHouseParserTTL, ClickHouseParserTYPE, ClickHouseParserUNBOUNDED, ClickHouseParserUNION, ClickHouseParserUPDATE, ClickHouseParserUSE, ClickHouseParserUSING, ClickHouseParserUUID, ClickHouseParserVALUES, ClickHouseParserVIEW, ClickHouseParserVOLUME, ClickHouseParserWATCH, ClickHouseParserWEEK, ClickHouseParserWHEN, ClickHouseParserWHERE, ClickHouseParserWINDOW, ClickHouseParserWITH, ClickHouseParserYEAR, ClickHouseParserFILL, ClickHouseParserSTEP, ClickHouseParserSTALENESS, ClickHouseParserINTERPOLATE, ClickHouseParserJSON_FALSE, ClickHouseParserJSON_TRUE, ClickHouseParserIDENTIFIER:
		{
			p.SetState(869)
			p.Identifier()
		}
		p.SetState(874)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == ClickHouseParserCOMMA {
			{
				p.SetState(870)
				p.Match(ClickHouseParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(871)
				p.Identifier()
			}

			p.SetState(876)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	{
		p.SetState(879)
		p.Match(ClickHouseParserARROW)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(880)
		p.columnExpr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumnIdentifierContext is an interface to support dynamic dispatch.
type IColumnIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NestedIdentifier() INestedIdentifierContext
	TableIdentifier() ITableIdentifierContext
	DOT() antlr.TerminalNode

	// IsColumnIdentifierContext differentiates from other interfaces.
	IsColumnIdentifierContext()
}

type ColumnIdentifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnIdentifierContext() *ColumnIdentifierContext {
	var p = new(ColumnIdentifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnIdentifier
	return p
}

func InitEmptyColumnIdentifierContext(p *ColumnIdentifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnIdentifier
}

func (*ColumnIdentifierContext) IsColumnIdentifierContext() {}

func NewColumnIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnIdentifierContext {
	var p = new(ColumnIdentifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_columnIdentifier

	return p
}

func (s *ColumnIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnIdentifierContext) NestedIdentifier() INestedIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedIdentifierContext)
}

func (s *ColumnIdentifierContext) TableIdentifier() ITableIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *ColumnIdentifierContext) DOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDOT, 0)
}

func (s *ColumnIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) ColumnIdentifier() (localctx IColumnIdentifierContext) {
	localctx = NewColumnIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, ClickHouseParserRULE_columnIdentifier)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(885)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 113, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(882)
			p.TableIdentifier()
		}
		{
			p.SetState(883)
			p.Match(ClickHouseParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(887)
		p.NestedIdentifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INestedIdentifierContext is an interface to support dynamic dispatch.
type INestedIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	DOT() antlr.TerminalNode

	// IsNestedIdentifierContext differentiates from other interfaces.
	IsNestedIdentifierContext()
}

type NestedIdentifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNestedIdentifierContext() *NestedIdentifierContext {
	var p = new(NestedIdentifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_nestedIdentifier
	return p
}

func InitEmptyNestedIdentifierContext(p *NestedIdentifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_nestedIdentifier
}

func (*NestedIdentifierContext) IsNestedIdentifierContext() {}

func NewNestedIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NestedIdentifierContext {
	var p = new(NestedIdentifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_nestedIdentifier

	return p
}

func (s *NestedIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *NestedIdentifierContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *NestedIdentifierContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *NestedIdentifierContext) DOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDOT, 0)
}

func (s *NestedIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NestedIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NestedIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitNestedIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) NestedIdentifier() (localctx INestedIdentifierContext) {
	localctx = NewNestedIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, ClickHouseParserRULE_nestedIdentifier)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(889)
		p.Identifier()
	}
	p.SetState(892)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 114, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(890)
			p.Match(ClickHouseParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(891)
			p.Identifier()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITableExprContext is an interface to support dynamic dispatch.
type ITableExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsTableExprContext differentiates from other interfaces.
	IsTableExprContext()
}

type TableExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableExprContext() *TableExprContext {
	var p = new(TableExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableExpr
	return p
}

func InitEmptyTableExprContext(p *TableExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableExpr
}

func (*TableExprContext) IsTableExprContext() {}

func NewTableExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableExprContext {
	var p = new(TableExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_tableExpr

	return p
}

func (s *TableExprContext) GetParser() antlr.Parser { return s.parser }

func (s *TableExprContext) CopyAll(ctx *TableExprContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *TableExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type TableExprIdentifierContext struct {
	TableExprContext
}

func NewTableExprIdentifierContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableExprIdentifierContext {
	var p = new(TableExprIdentifierContext)

	InitEmptyTableExprContext(&p.TableExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*TableExprContext))

	return p
}

func (s *TableExprIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableExprIdentifierContext) TableIdentifier() ITableIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *TableExprIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitTableExprIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableExprSubqueryContext struct {
	TableExprContext
}

func NewTableExprSubqueryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableExprSubqueryContext {
	var p = new(TableExprSubqueryContext)

	InitEmptyTableExprContext(&p.TableExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*TableExprContext))

	return p
}

func (s *TableExprSubqueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableExprSubqueryContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *TableExprSubqueryContext) SelectUnionStmt() ISelectUnionStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectUnionStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectUnionStmtContext)
}

func (s *TableExprSubqueryContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *TableExprSubqueryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitTableExprSubquery(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableExprAliasContext struct {
	TableExprContext
}

func NewTableExprAliasContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableExprAliasContext {
	var p = new(TableExprAliasContext)

	InitEmptyTableExprContext(&p.TableExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*TableExprContext))

	return p
}

func (s *TableExprAliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableExprAliasContext) TableExpr() ITableExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableExprContext)
}

func (s *TableExprAliasContext) Alias() IAliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAliasContext)
}

func (s *TableExprAliasContext) AS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAS, 0)
}

func (s *TableExprAliasContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *TableExprAliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitTableExprAlias(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableExprFunctionContext struct {
	TableExprContext
}

func NewTableExprFunctionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableExprFunctionContext {
	var p = new(TableExprFunctionContext)

	InitEmptyTableExprContext(&p.TableExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*TableExprContext))

	return p
}

func (s *TableExprFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableExprFunctionContext) TableFunctionExpr() ITableFunctionExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableFunctionExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableFunctionExprContext)
}

func (s *TableExprFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitTableExprFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) TableExpr() (localctx ITableExprContext) {
	return p.tableExpr(0)
}

func (p *ClickHouseParser) tableExpr(_p int) (localctx ITableExprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewTableExprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ITableExprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 104
	p.EnterRecursionRule(localctx, 104, ClickHouseParserRULE_tableExpr, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(901)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 115, p.GetParserRuleContext()) {
	case 1:
		localctx = NewTableExprIdentifierContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(895)
			p.TableIdentifier()
		}

	case 2:
		localctx = NewTableExprFunctionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(896)
			p.TableFunctionExpr()
		}

	case 3:
		localctx = NewTableExprSubqueryContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(897)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(898)
			p.SelectUnionStmt()
		}
		{
			p.SetState(899)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(911)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 117, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewTableExprAliasContext(p, NewTableExprContext(p, _parentctx, _parentState))
			p.PushNewRecursionContext(localctx, _startState, ClickHouseParserRULE_tableExpr)
			p.SetState(903)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				goto errorExit
			}
			p.SetState(907)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetTokenStream().LA(1) {
			case ClickHouseParserAFTER, ClickHouseParserALIAS, ClickHouseParserALTER, ClickHouseParserASCENDING, ClickHouseParserAST, ClickHouseParserASYNC, ClickHouseParserATTACH, ClickHouseParserBOTH, ClickHouseParserBY, ClickHouseParserCASE, ClickHouseParserCAST, ClickHouseParserCHECK, ClickHouseParserCLEAR, ClickHouseParserCLUSTER, ClickHouseParserCODEC, ClickHouseParserCOLLATE, ClickHouseParserCOLUMN, ClickHouseParserCOMMENT, ClickHouseParserCONSTRAINT, ClickHouseParserCREATE, ClickHouseParserCUBE, ClickHouseParserCURRENT, ClickHouseParserDATABASE, ClickHouseParserDATABASES, ClickHouseParserDATE, ClickHouseParserDEDUPLICATE, ClickHouseParserDEFAULT, ClickHouseParserDELAY, ClickHouseParserDELETE, ClickHouseParserDESC, ClickHouseParserDESCENDING, ClickHouseParserDESCRIBE, ClickHouseParserDETACH, ClickHouseParserDICTIONARIES, ClickHouseParserDICTIONARY, ClickHouseParserDISK, ClickHouseParserDISTRIBUTED, ClickHouseParserDROP, ClickHouseParserELSE, ClickHouseParserEND, ClickHouseParserENGINE, ClickHouseParserEVENTS, ClickHouseParserEXISTS, ClickHouseParserEXPLAIN, ClickHouseParserEXPRESSION, ClickHouseParserEXTRACT, ClickHouseParserFETCHES, ClickHouseParserFIRST, ClickHouseParserFLUSH, ClickHouseParserFOLLOWING, ClickHouseParserFOR, ClickHouseParserFREEZE, ClickHouseParserFUNCTION, ClickHouseParserGRANULARITY, ClickHouseParserHIERARCHICAL, ClickHouseParserID, ClickHouseParserIF, ClickHouseParserINDEX, ClickHouseParserINJECTIVE, ClickHouseParserINSERT, ClickHouseParserINTERVAL, ClickHouseParserIS_OBJECT_ID, ClickHouseParserKEY, ClickHouseParserKILL, ClickHouseParserLAST, ClickHouseParserLAYOUT, ClickHouseParserLEADING, ClickHouseParserLIFETIME, ClickHouseParserLIVE, ClickHouseParserLOCAL, ClickHouseParserLOGS, ClickHouseParserMATERIALIZE, ClickHouseParserMATERIALIZED, ClickHouseParserMAX, ClickHouseParserMERGES, ClickHouseParserMIN, ClickHouseParserMODIFY, ClickHouseParserMOVE, ClickHouseParserMUTATION, ClickHouseParserNO, ClickHouseParserNULLS, ClickHouseParserOPTIMIZE, ClickHouseParserOUTER, ClickHouseParserOUTFILE, ClickHouseParserOVER, ClickHouseParserPARTITION, ClickHouseParserPOPULATE, ClickHouseParserPRECEDING, ClickHouseParserPRIMARY, ClickHouseParserRANGE, ClickHouseParserRELOAD, ClickHouseParserREMOVE, ClickHouseParserRENAME, ClickHouseParserREPLACE, ClickHouseParserREPLICA, ClickHouseParserREPLICATED, ClickHouseParserROLLUP, ClickHouseParserROW, ClickHouseParserROWS, ClickHouseParserSELECT, ClickHouseParserSENDS, ClickHouseParserSET, ClickHouseParserSHOW, ClickHouseParserSOURCE, ClickHouseParserSTART, ClickHouseParserSTOP, ClickHouseParserSUBSTRING, ClickHouseParserSYNC, ClickHouseParserSYNTAX, ClickHouseParserSYSTEM, ClickHouseParserTABLE, ClickHouseParserTABLES, ClickHouseParserTEMPORARY, ClickHouseParserTEST, ClickHouseParserTHEN, ClickHouseParserTIES, ClickHouseParserTIMEOUT, ClickHouseParserTIMESTAMP, ClickHouseParserTO, ClickHouseParserTOTALS, ClickHouseParserTRAILING, ClickHouseParserTRIM, ClickHouseParserTRUNCATE, ClickHouseParserTTL, ClickHouseParserTYPE, ClickHouseParserUNBOUNDED, ClickHouseParserUPDATE, ClickHouseParserUSE, ClickHouseParserUUID, ClickHouseParserVALUES, ClickHouseParserVIEW, ClickHouseParserVOLUME, ClickHouseParserWATCH, ClickHouseParserWHEN, ClickHouseParserIDENTIFIER:
				{
					p.SetState(904)
					p.Alias()
				}

			case ClickHouseParserAS:
				{
					p.SetState(905)
					p.Match(ClickHouseParserAS)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(906)
					p.Identifier()
				}

			default:
				p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				goto errorExit
			}

		}
		p.SetState(913)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 117, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITableFunctionExprContext is an interface to support dynamic dispatch.
type ITableFunctionExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	TableArgList() ITableArgListContext

	// IsTableFunctionExprContext differentiates from other interfaces.
	IsTableFunctionExprContext()
}

type TableFunctionExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableFunctionExprContext() *TableFunctionExprContext {
	var p = new(TableFunctionExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableFunctionExpr
	return p
}

func InitEmptyTableFunctionExprContext(p *TableFunctionExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableFunctionExpr
}

func (*TableFunctionExprContext) IsTableFunctionExprContext() {}

func NewTableFunctionExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableFunctionExprContext {
	var p = new(TableFunctionExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_tableFunctionExpr

	return p
}

func (s *TableFunctionExprContext) GetParser() antlr.Parser { return s.parser }

func (s *TableFunctionExprContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *TableFunctionExprContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *TableFunctionExprContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *TableFunctionExprContext) TableArgList() ITableArgListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableArgListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableArgListContext)
}

func (s *TableFunctionExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableFunctionExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableFunctionExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitTableFunctionExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) TableFunctionExpr() (localctx ITableFunctionExprContext) {
	localctx = NewTableFunctionExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, ClickHouseParserRULE_tableFunctionExpr)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(914)
		p.Identifier()
	}
	{
		p.SetState(915)
		p.Match(ClickHouseParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(917)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-4) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&-1) != 0) || ((int64((_la-128)) & ^0x3f) == 0 && ((int64(1)<<(_la-128))&-49) != 0) || ((int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&17186168831) != 0) {
		{
			p.SetState(916)
			p.TableArgList()
		}

	}
	{
		p.SetState(919)
		p.Match(ClickHouseParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITableIdentifierContext is an interface to support dynamic dispatch.
type ITableIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	DatabaseIdentifier() IDatabaseIdentifierContext
	DOT() antlr.TerminalNode

	// IsTableIdentifierContext differentiates from other interfaces.
	IsTableIdentifierContext()
}

type TableIdentifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableIdentifierContext() *TableIdentifierContext {
	var p = new(TableIdentifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableIdentifier
	return p
}

func InitEmptyTableIdentifierContext(p *TableIdentifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableIdentifier
}

func (*TableIdentifierContext) IsTableIdentifierContext() {}

func NewTableIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableIdentifierContext {
	var p = new(TableIdentifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_tableIdentifier

	return p
}

func (s *TableIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *TableIdentifierContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *TableIdentifierContext) DatabaseIdentifier() IDatabaseIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabaseIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabaseIdentifierContext)
}

func (s *TableIdentifierContext) DOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDOT, 0)
}

func (s *TableIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitTableIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) TableIdentifier() (localctx ITableIdentifierContext) {
	localctx = NewTableIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, ClickHouseParserRULE_tableIdentifier)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(924)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 119, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(921)
			p.DatabaseIdentifier()
		}
		{
			p.SetState(922)
			p.Match(ClickHouseParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(926)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITableArgListContext is an interface to support dynamic dispatch.
type ITableArgListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllTableArgExpr() []ITableArgExprContext
	TableArgExpr(i int) ITableArgExprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsTableArgListContext differentiates from other interfaces.
	IsTableArgListContext()
}

type TableArgListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableArgListContext() *TableArgListContext {
	var p = new(TableArgListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableArgList
	return p
}

func InitEmptyTableArgListContext(p *TableArgListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableArgList
}

func (*TableArgListContext) IsTableArgListContext() {}

func NewTableArgListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableArgListContext {
	var p = new(TableArgListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_tableArgList

	return p
}

func (s *TableArgListContext) GetParser() antlr.Parser { return s.parser }

func (s *TableArgListContext) AllTableArgExpr() []ITableArgExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITableArgExprContext); ok {
			len++
		}
	}

	tst := make([]ITableArgExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITableArgExprContext); ok {
			tst[i] = t.(ITableArgExprContext)
			i++
		}
	}

	return tst
}

func (s *TableArgListContext) TableArgExpr(i int) ITableArgExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableArgExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableArgExprContext)
}

func (s *TableArgListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *TableArgListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *TableArgListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableArgListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableArgListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitTableArgList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) TableArgList() (localctx ITableArgListContext) {
	localctx = NewTableArgListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, ClickHouseParserRULE_tableArgList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(928)
		p.TableArgExpr()
	}
	p.SetState(933)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ClickHouseParserCOMMA {
		{
			p.SetState(929)
			p.Match(ClickHouseParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(930)
			p.TableArgExpr()
		}

		p.SetState(935)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITableArgExprContext is an interface to support dynamic dispatch.
type ITableArgExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NestedIdentifier() INestedIdentifierContext
	TableFunctionExpr() ITableFunctionExprContext
	Literal() ILiteralContext

	// IsTableArgExprContext differentiates from other interfaces.
	IsTableArgExprContext()
}

type TableArgExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableArgExprContext() *TableArgExprContext {
	var p = new(TableArgExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableArgExpr
	return p
}

func InitEmptyTableArgExprContext(p *TableArgExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableArgExpr
}

func (*TableArgExprContext) IsTableArgExprContext() {}

func NewTableArgExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableArgExprContext {
	var p = new(TableArgExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_tableArgExpr

	return p
}

func (s *TableArgExprContext) GetParser() antlr.Parser { return s.parser }

func (s *TableArgExprContext) NestedIdentifier() INestedIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedIdentifierContext)
}

func (s *TableArgExprContext) TableFunctionExpr() ITableFunctionExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableFunctionExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableFunctionExprContext)
}

func (s *TableArgExprContext) Literal() ILiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *TableArgExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableArgExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableArgExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitTableArgExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) TableArgExpr() (localctx ITableArgExprContext) {
	localctx = NewTableArgExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, ClickHouseParserRULE_tableArgExpr)
	p.SetState(939)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 121, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(936)
			p.NestedIdentifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(937)
			p.TableFunctionExpr()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(938)
			p.Literal()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDatabaseIdentifierContext is an interface to support dynamic dispatch.
type IDatabaseIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsDatabaseIdentifierContext differentiates from other interfaces.
	IsDatabaseIdentifierContext()
}

type DatabaseIdentifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDatabaseIdentifierContext() *DatabaseIdentifierContext {
	var p = new(DatabaseIdentifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_databaseIdentifier
	return p
}

func InitEmptyDatabaseIdentifierContext(p *DatabaseIdentifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_databaseIdentifier
}

func (*DatabaseIdentifierContext) IsDatabaseIdentifierContext() {}

func NewDatabaseIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DatabaseIdentifierContext {
	var p = new(DatabaseIdentifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_databaseIdentifier

	return p
}

func (s *DatabaseIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *DatabaseIdentifierContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *DatabaseIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DatabaseIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DatabaseIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitDatabaseIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) DatabaseIdentifier() (localctx IDatabaseIdentifierContext) {
	localctx = NewDatabaseIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, ClickHouseParserRULE_databaseIdentifier)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(941)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IParamSlotContext is an interface to support dynamic dispatch.
type IParamSlotContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LBRACE() antlr.TerminalNode
	Identifier() IIdentifierContext
	COLON() antlr.TerminalNode
	ColumnTypeExpr() IColumnTypeExprContext
	RBRACE() antlr.TerminalNode

	// IsParamSlotContext differentiates from other interfaces.
	IsParamSlotContext()
}

type ParamSlotContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParamSlotContext() *ParamSlotContext {
	var p = new(ParamSlotContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_paramSlot
	return p
}

func InitEmptyParamSlotContext(p *ParamSlotContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_paramSlot
}

func (*ParamSlotContext) IsParamSlotContext() {}

func NewParamSlotContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParamSlotContext {
	var p = new(ParamSlotContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_paramSlot

	return p
}

func (s *ParamSlotContext) GetParser() antlr.Parser { return s.parser }

func (s *ParamSlotContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLBRACE, 0)
}

func (s *ParamSlotContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ParamSlotContext) COLON() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOLON, 0)
}

func (s *ParamSlotContext) ColumnTypeExpr() IColumnTypeExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnTypeExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnTypeExprContext)
}

func (s *ParamSlotContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRBRACE, 0)
}

func (s *ParamSlotContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParamSlotContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParamSlotContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitParamSlot(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) ParamSlot() (localctx IParamSlotContext) {
	localctx = NewParamSlotContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, ClickHouseParserRULE_paramSlot)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(943)
		p.Match(ClickHouseParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(944)
		p.Identifier()
	}
	{
		p.SetState(945)
		p.Match(ClickHouseParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(946)
		p.ColumnTypeExpr()
	}
	{
		p.SetState(947)
		p.Match(ClickHouseParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFloatingLiteralContext is an interface to support dynamic dispatch.
type IFloatingLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FLOATING_LITERAL() antlr.TerminalNode
	DOT() antlr.TerminalNode
	AllDECIMAL_LITERAL() []antlr.TerminalNode
	DECIMAL_LITERAL(i int) antlr.TerminalNode
	OCTAL_LITERAL() antlr.TerminalNode

	// IsFloatingLiteralContext differentiates from other interfaces.
	IsFloatingLiteralContext()
}

type FloatingLiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFloatingLiteralContext() *FloatingLiteralContext {
	var p = new(FloatingLiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_floatingLiteral
	return p
}

func InitEmptyFloatingLiteralContext(p *FloatingLiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_floatingLiteral
}

func (*FloatingLiteralContext) IsFloatingLiteralContext() {}

func NewFloatingLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FloatingLiteralContext {
	var p = new(FloatingLiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_floatingLiteral

	return p
}

func (s *FloatingLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *FloatingLiteralContext) FLOATING_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFLOATING_LITERAL, 0)
}

func (s *FloatingLiteralContext) DOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDOT, 0)
}

func (s *FloatingLiteralContext) AllDECIMAL_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserDECIMAL_LITERAL)
}

func (s *FloatingLiteralContext) DECIMAL_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDECIMAL_LITERAL, i)
}

func (s *FloatingLiteralContext) OCTAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOCTAL_LITERAL, 0)
}

func (s *FloatingLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FloatingLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FloatingLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitFloatingLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) FloatingLiteral() (localctx IFloatingLiteralContext) {
	localctx = NewFloatingLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, ClickHouseParserRULE_floatingLiteral)
	var _la int

	p.SetState(957)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ClickHouseParserFLOATING_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(949)
			p.Match(ClickHouseParserFLOATING_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ClickHouseParserDOT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(950)
			p.Match(ClickHouseParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(951)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ClickHouseParserOCTAL_LITERAL || _la == ClickHouseParserDECIMAL_LITERAL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case ClickHouseParserDECIMAL_LITERAL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(952)
			p.Match(ClickHouseParserDECIMAL_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(953)
			p.Match(ClickHouseParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(955)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 122, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(954)
				_la = p.GetTokenStream().LA(1)

				if !(_la == ClickHouseParserOCTAL_LITERAL || _la == ClickHouseParserDECIMAL_LITERAL) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INumberLiteralContext is an interface to support dynamic dispatch.
type INumberLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FloatingLiteral() IFloatingLiteralContext
	OCTAL_LITERAL() antlr.TerminalNode
	DECIMAL_LITERAL() antlr.TerminalNode
	HEXADECIMAL_LITERAL() antlr.TerminalNode
	INF() antlr.TerminalNode
	NAN_SQL() antlr.TerminalNode
	PLUS() antlr.TerminalNode
	DASH() antlr.TerminalNode

	// IsNumberLiteralContext differentiates from other interfaces.
	IsNumberLiteralContext()
}

type NumberLiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumberLiteralContext() *NumberLiteralContext {
	var p = new(NumberLiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_numberLiteral
	return p
}

func InitEmptyNumberLiteralContext(p *NumberLiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_numberLiteral
}

func (*NumberLiteralContext) IsNumberLiteralContext() {}

func NewNumberLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumberLiteralContext {
	var p = new(NumberLiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_numberLiteral

	return p
}

func (s *NumberLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *NumberLiteralContext) FloatingLiteral() IFloatingLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFloatingLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFloatingLiteralContext)
}

func (s *NumberLiteralContext) OCTAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOCTAL_LITERAL, 0)
}

func (s *NumberLiteralContext) DECIMAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDECIMAL_LITERAL, 0)
}

func (s *NumberLiteralContext) HEXADECIMAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserHEXADECIMAL_LITERAL, 0)
}

func (s *NumberLiteralContext) INF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINF, 0)
}

func (s *NumberLiteralContext) NAN_SQL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNAN_SQL, 0)
}

func (s *NumberLiteralContext) PLUS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPLUS, 0)
}

func (s *NumberLiteralContext) DASH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDASH, 0)
}

func (s *NumberLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumberLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumberLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitNumberLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) NumberLiteral() (localctx INumberLiteralContext) {
	localctx = NewNumberLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, ClickHouseParserRULE_numberLiteral)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(960)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserDASH || _la == ClickHouseParserPLUS {
		{
			p.SetState(959)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ClickHouseParserDASH || _la == ClickHouseParserPLUS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(968)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 125, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(962)
			p.FloatingLiteral()
		}

	case 2:
		{
			p.SetState(963)
			p.Match(ClickHouseParserOCTAL_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		{
			p.SetState(964)
			p.Match(ClickHouseParserDECIMAL_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		{
			p.SetState(965)
			p.Match(ClickHouseParserHEXADECIMAL_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		{
			p.SetState(966)
			p.Match(ClickHouseParserINF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 6:
		{
			p.SetState(967)
			p.Match(ClickHouseParserNAN_SQL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILiteralContext is an interface to support dynamic dispatch.
type ILiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NumberLiteral() INumberLiteralContext
	STRING_LITERAL() antlr.TerminalNode
	NULL_SQL() antlr.TerminalNode

	// IsLiteralContext differentiates from other interfaces.
	IsLiteralContext()
}

type LiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralContext() *LiteralContext {
	var p = new(LiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_literal
	return p
}

func InitEmptyLiteralContext(p *LiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_literal
}

func (*LiteralContext) IsLiteralContext() {}

func NewLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralContext {
	var p = new(LiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_literal

	return p
}

func (s *LiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralContext) NumberLiteral() INumberLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberLiteralContext)
}

func (s *LiteralContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTRING_LITERAL, 0)
}

func (s *LiteralContext) NULL_SQL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNULL_SQL, 0)
}

func (s *LiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) Literal() (localctx ILiteralContext) {
	localctx = NewLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, ClickHouseParserRULE_literal)
	p.SetState(973)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ClickHouseParserINF, ClickHouseParserNAN_SQL, ClickHouseParserFLOATING_LITERAL, ClickHouseParserOCTAL_LITERAL, ClickHouseParserDECIMAL_LITERAL, ClickHouseParserHEXADECIMAL_LITERAL, ClickHouseParserDASH, ClickHouseParserDOT, ClickHouseParserPLUS:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(970)
			p.NumberLiteral()
		}

	case ClickHouseParserSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(971)
			p.Match(ClickHouseParserSTRING_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ClickHouseParserNULL_SQL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(972)
			p.Match(ClickHouseParserNULL_SQL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIntervalContext is an interface to support dynamic dispatch.
type IIntervalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SECOND() antlr.TerminalNode
	MINUTE() antlr.TerminalNode
	HOUR() antlr.TerminalNode
	DAY() antlr.TerminalNode
	WEEK() antlr.TerminalNode
	MONTH() antlr.TerminalNode
	QUARTER() antlr.TerminalNode
	YEAR() antlr.TerminalNode

	// IsIntervalContext differentiates from other interfaces.
	IsIntervalContext()
}

type IntervalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntervalContext() *IntervalContext {
	var p = new(IntervalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_interval
	return p
}

func InitEmptyIntervalContext(p *IntervalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_interval
}

func (*IntervalContext) IsIntervalContext() {}

func NewIntervalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntervalContext {
	var p = new(IntervalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_interval

	return p
}

func (s *IntervalContext) GetParser() antlr.Parser { return s.parser }

func (s *IntervalContext) SECOND() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSECOND, 0)
}

func (s *IntervalContext) MINUTE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMINUTE, 0)
}

func (s *IntervalContext) HOUR() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserHOUR, 0)
}

func (s *IntervalContext) DAY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDAY, 0)
}

func (s *IntervalContext) WEEK() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWEEK, 0)
}

func (s *IntervalContext) MONTH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMONTH, 0)
}

func (s *IntervalContext) QUARTER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserQUARTER, 0)
}

func (s *IntervalContext) YEAR() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserYEAR, 0)
}

func (s *IntervalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntervalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntervalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitInterval(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) Interval() (localctx IIntervalContext) {
	localctx = NewIntervalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, ClickHouseParserRULE_interval)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(975)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ClickHouseParserDAY || ((int64((_la-76)) & ^0x3f) == 0 && ((int64(1)<<(_la-76))&288230419101384705) != 0) || ((int64((_la-147)) & ^0x3f) == 0 && ((int64(1)<<(_la-147))&36283883716609) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IKeywordContext is an interface to support dynamic dispatch.
type IKeywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AFTER() antlr.TerminalNode
	ALIAS() antlr.TerminalNode
	ALL() antlr.TerminalNode
	ALTER() antlr.TerminalNode
	AND() antlr.TerminalNode
	ANTI() antlr.TerminalNode
	ANY() antlr.TerminalNode
	ARRAY() antlr.TerminalNode
	AS() antlr.TerminalNode
	ASCENDING() antlr.TerminalNode
	ASOF() antlr.TerminalNode
	AST() antlr.TerminalNode
	ASYNC() antlr.TerminalNode
	ATTACH() antlr.TerminalNode
	BETWEEN() antlr.TerminalNode
	BOTH() antlr.TerminalNode
	BY() antlr.TerminalNode
	CASE() antlr.TerminalNode
	CAST() antlr.TerminalNode
	CHECK() antlr.TerminalNode
	CLEAR() antlr.TerminalNode
	CLUSTER() antlr.TerminalNode
	CODEC() antlr.TerminalNode
	COLLATE() antlr.TerminalNode
	COLUMN() antlr.TerminalNode
	COMMENT() antlr.TerminalNode
	CONSTRAINT() antlr.TerminalNode
	CREATE() antlr.TerminalNode
	CROSS() antlr.TerminalNode
	CUBE() antlr.TerminalNode
	CURRENT() antlr.TerminalNode
	DATABASE() antlr.TerminalNode
	DATABASES() antlr.TerminalNode
	DATE() antlr.TerminalNode
	DEDUPLICATE() antlr.TerminalNode
	DEFAULT() antlr.TerminalNode
	DELAY() antlr.TerminalNode
	DELETE() antlr.TerminalNode
	DESCRIBE() antlr.TerminalNode
	DESC() antlr.TerminalNode
	DESCENDING() antlr.TerminalNode
	DETACH() antlr.TerminalNode
	DICTIONARIES() antlr.TerminalNode
	DICTIONARY() antlr.TerminalNode
	DISK() antlr.TerminalNode
	DISTINCT() antlr.TerminalNode
	DISTRIBUTED() antlr.TerminalNode
	DROP() antlr.TerminalNode
	ELSE() antlr.TerminalNode
	END() antlr.TerminalNode
	ENGINE() antlr.TerminalNode
	EVENTS() antlr.TerminalNode
	EXISTS() antlr.TerminalNode
	EXPLAIN() antlr.TerminalNode
	EXPRESSION() antlr.TerminalNode
	EXTRACT() antlr.TerminalNode
	FETCHES() antlr.TerminalNode
	FINAL() antlr.TerminalNode
	FIRST() antlr.TerminalNode
	FLUSH() antlr.TerminalNode
	FOR() antlr.TerminalNode
	FOLLOWING() antlr.TerminalNode
	FORMAT() antlr.TerminalNode
	FREEZE() antlr.TerminalNode
	FROM() antlr.TerminalNode
	FULL() antlr.TerminalNode
	FUNCTION() antlr.TerminalNode
	GLOBAL() antlr.TerminalNode
	GRANULARITY() antlr.TerminalNode
	GROUP() antlr.TerminalNode
	HAVING() antlr.TerminalNode
	HIERARCHICAL() antlr.TerminalNode
	ID() antlr.TerminalNode
	IF() antlr.TerminalNode
	ILIKE() antlr.TerminalNode
	IN() antlr.TerminalNode
	INDEX() antlr.TerminalNode
	INJECTIVE() antlr.TerminalNode
	INNER() antlr.TerminalNode
	INSERT() antlr.TerminalNode
	INTERVAL() antlr.TerminalNode
	INTO() antlr.TerminalNode
	IS() antlr.TerminalNode
	IS_OBJECT_ID() antlr.TerminalNode
	JOIN() antlr.TerminalNode
	JSON_FALSE() antlr.TerminalNode
	JSON_TRUE() antlr.TerminalNode
	KEY() antlr.TerminalNode
	KILL() antlr.TerminalNode
	LAST() antlr.TerminalNode
	LAYOUT() antlr.TerminalNode
	LEADING() antlr.TerminalNode
	LEFT() antlr.TerminalNode
	LIFETIME() antlr.TerminalNode
	LIKE() antlr.TerminalNode
	LIMIT() antlr.TerminalNode
	LIVE() antlr.TerminalNode
	LOCAL() antlr.TerminalNode
	LOGS() antlr.TerminalNode
	MATERIALIZE() antlr.TerminalNode
	MATERIALIZED() antlr.TerminalNode
	MAX() antlr.TerminalNode
	MERGES() antlr.TerminalNode
	MIN() antlr.TerminalNode
	MODIFY() antlr.TerminalNode
	MOVE() antlr.TerminalNode
	MUTATION() antlr.TerminalNode
	NO() antlr.TerminalNode
	NOT() antlr.TerminalNode
	NULLS() antlr.TerminalNode
	OFFSET() antlr.TerminalNode
	ON() antlr.TerminalNode
	OPTIMIZE() antlr.TerminalNode
	OR() antlr.TerminalNode
	ORDER() antlr.TerminalNode
	OUTER() antlr.TerminalNode
	OUTFILE() antlr.TerminalNode
	OVER() antlr.TerminalNode
	PARTITION() antlr.TerminalNode
	POPULATE() antlr.TerminalNode
	PRECEDING() antlr.TerminalNode
	PREWHERE() antlr.TerminalNode
	PRIMARY() antlr.TerminalNode
	RANGE() antlr.TerminalNode
	RELOAD() antlr.TerminalNode
	REMOVE() antlr.TerminalNode
	RENAME() antlr.TerminalNode
	REPLACE() antlr.TerminalNode
	REPLICA() antlr.TerminalNode
	REPLICATED() antlr.TerminalNode
	RIGHT() antlr.TerminalNode
	ROLLUP() antlr.TerminalNode
	ROW() antlr.TerminalNode
	ROWS() antlr.TerminalNode
	SAMPLE() antlr.TerminalNode
	SELECT() antlr.TerminalNode
	SEMI() antlr.TerminalNode
	SENDS() antlr.TerminalNode
	SET() antlr.TerminalNode
	SETTINGS() antlr.TerminalNode
	SHOW() antlr.TerminalNode
	SOURCE() antlr.TerminalNode
	START() antlr.TerminalNode
	STOP() antlr.TerminalNode
	SUBSTRING() antlr.TerminalNode
	SYNC() antlr.TerminalNode
	SYNTAX() antlr.TerminalNode
	SYSTEM() antlr.TerminalNode
	TABLE() antlr.TerminalNode
	TABLES() antlr.TerminalNode
	TEMPORARY() antlr.TerminalNode
	TEST() antlr.TerminalNode
	THEN() antlr.TerminalNode
	TIES() antlr.TerminalNode
	TIMEOUT() antlr.TerminalNode
	TIMESTAMP() antlr.TerminalNode
	TOTALS() antlr.TerminalNode
	TRAILING() antlr.TerminalNode
	TRIM() antlr.TerminalNode
	TRUNCATE() antlr.TerminalNode
	TO() antlr.TerminalNode
	TOP() antlr.TerminalNode
	TTL() antlr.TerminalNode
	TYPE() antlr.TerminalNode
	UNBOUNDED() antlr.TerminalNode
	UNION() antlr.TerminalNode
	UPDATE() antlr.TerminalNode
	USE() antlr.TerminalNode
	USING() antlr.TerminalNode
	UUID() antlr.TerminalNode
	VALUES() antlr.TerminalNode
	VIEW() antlr.TerminalNode
	VOLUME() antlr.TerminalNode
	WATCH() antlr.TerminalNode
	WHEN() antlr.TerminalNode
	WHERE() antlr.TerminalNode
	WINDOW() antlr.TerminalNode
	WITH() antlr.TerminalNode
	FILL() antlr.TerminalNode
	STEP() antlr.TerminalNode
	STALENESS() antlr.TerminalNode
	INTERPOLATE() antlr.TerminalNode
	INTERSECT() antlr.TerminalNode
	EXCEPT() antlr.TerminalNode

	// IsKeywordContext differentiates from other interfaces.
	IsKeywordContext()
}

type KeywordContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeywordContext() *KeywordContext {
	var p = new(KeywordContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_keyword
	return p
}

func InitEmptyKeywordContext(p *KeywordContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_keyword
}

func (*KeywordContext) IsKeywordContext() {}

func NewKeywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeywordContext {
	var p = new(KeywordContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_keyword

	return p
}

func (s *KeywordContext) GetParser() antlr.Parser { return s.parser }

func (s *KeywordContext) AFTER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAFTER, 0)
}

func (s *KeywordContext) ALIAS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserALIAS, 0)
}

func (s *KeywordContext) ALL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserALL, 0)
}

func (s *KeywordContext) ALTER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserALTER, 0)
}

func (s *KeywordContext) AND() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAND, 0)
}

func (s *KeywordContext) ANTI() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserANTI, 0)
}

func (s *KeywordContext) ANY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserANY, 0)
}

func (s *KeywordContext) ARRAY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserARRAY, 0)
}

func (s *KeywordContext) AS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAS, 0)
}

func (s *KeywordContext) ASCENDING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserASCENDING, 0)
}

func (s *KeywordContext) ASOF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserASOF, 0)
}

func (s *KeywordContext) AST() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAST, 0)
}

func (s *KeywordContext) ASYNC() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserASYNC, 0)
}

func (s *KeywordContext) ATTACH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserATTACH, 0)
}

func (s *KeywordContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserBETWEEN, 0)
}

func (s *KeywordContext) BOTH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserBOTH, 0)
}

func (s *KeywordContext) BY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserBY, 0)
}

func (s *KeywordContext) CASE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCASE, 0)
}

func (s *KeywordContext) CAST() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCAST, 0)
}

func (s *KeywordContext) CHECK() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCHECK, 0)
}

func (s *KeywordContext) CLEAR() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCLEAR, 0)
}

func (s *KeywordContext) CLUSTER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCLUSTER, 0)
}

func (s *KeywordContext) CODEC() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCODEC, 0)
}

func (s *KeywordContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOLLATE, 0)
}

func (s *KeywordContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOLUMN, 0)
}

func (s *KeywordContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMENT, 0)
}

func (s *KeywordContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCONSTRAINT, 0)
}

func (s *KeywordContext) CREATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCREATE, 0)
}

func (s *KeywordContext) CROSS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCROSS, 0)
}

func (s *KeywordContext) CUBE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCUBE, 0)
}

func (s *KeywordContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCURRENT, 0)
}

func (s *KeywordContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDATABASE, 0)
}

func (s *KeywordContext) DATABASES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDATABASES, 0)
}

func (s *KeywordContext) DATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDATE, 0)
}

func (s *KeywordContext) DEDUPLICATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDEDUPLICATE, 0)
}

func (s *KeywordContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDEFAULT, 0)
}

func (s *KeywordContext) DELAY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDELAY, 0)
}

func (s *KeywordContext) DELETE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDELETE, 0)
}

func (s *KeywordContext) DESCRIBE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDESCRIBE, 0)
}

func (s *KeywordContext) DESC() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDESC, 0)
}

func (s *KeywordContext) DESCENDING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDESCENDING, 0)
}

func (s *KeywordContext) DETACH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDETACH, 0)
}

func (s *KeywordContext) DICTIONARIES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDICTIONARIES, 0)
}

func (s *KeywordContext) DICTIONARY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDICTIONARY, 0)
}

func (s *KeywordContext) DISK() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDISK, 0)
}

func (s *KeywordContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDISTINCT, 0)
}

func (s *KeywordContext) DISTRIBUTED() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDISTRIBUTED, 0)
}

func (s *KeywordContext) DROP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDROP, 0)
}

func (s *KeywordContext) ELSE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserELSE, 0)
}

func (s *KeywordContext) END() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEND, 0)
}

func (s *KeywordContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserENGINE, 0)
}

func (s *KeywordContext) EVENTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEVENTS, 0)
}

func (s *KeywordContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *KeywordContext) EXPLAIN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXPLAIN, 0)
}

func (s *KeywordContext) EXPRESSION() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXPRESSION, 0)
}

func (s *KeywordContext) EXTRACT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXTRACT, 0)
}

func (s *KeywordContext) FETCHES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFETCHES, 0)
}

func (s *KeywordContext) FINAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFINAL, 0)
}

func (s *KeywordContext) FIRST() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFIRST, 0)
}

func (s *KeywordContext) FLUSH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFLUSH, 0)
}

func (s *KeywordContext) FOR() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFOR, 0)
}

func (s *KeywordContext) FOLLOWING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFOLLOWING, 0)
}

func (s *KeywordContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFORMAT, 0)
}

func (s *KeywordContext) FREEZE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFREEZE, 0)
}

func (s *KeywordContext) FROM() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFROM, 0)
}

func (s *KeywordContext) FULL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFULL, 0)
}

func (s *KeywordContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFUNCTION, 0)
}

func (s *KeywordContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserGLOBAL, 0)
}

func (s *KeywordContext) GRANULARITY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserGRANULARITY, 0)
}

func (s *KeywordContext) GROUP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserGROUP, 0)
}

func (s *KeywordContext) HAVING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserHAVING, 0)
}

func (s *KeywordContext) HIERARCHICAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserHIERARCHICAL, 0)
}

func (s *KeywordContext) ID() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserID, 0)
}

func (s *KeywordContext) IF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIF, 0)
}

func (s *KeywordContext) ILIKE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserILIKE, 0)
}

func (s *KeywordContext) IN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIN, 0)
}

func (s *KeywordContext) INDEX() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINDEX, 0)
}

func (s *KeywordContext) INJECTIVE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINJECTIVE, 0)
}

func (s *KeywordContext) INNER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINNER, 0)
}

func (s *KeywordContext) INSERT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINSERT, 0)
}

func (s *KeywordContext) INTERVAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINTERVAL, 0)
}

func (s *KeywordContext) INTO() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINTO, 0)
}

func (s *KeywordContext) IS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIS, 0)
}

func (s *KeywordContext) IS_OBJECT_ID() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIS_OBJECT_ID, 0)
}

func (s *KeywordContext) JOIN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserJOIN, 0)
}

func (s *KeywordContext) JSON_FALSE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserJSON_FALSE, 0)
}

func (s *KeywordContext) JSON_TRUE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserJSON_TRUE, 0)
}

func (s *KeywordContext) KEY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserKEY, 0)
}

func (s *KeywordContext) KILL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserKILL, 0)
}

func (s *KeywordContext) LAST() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLAST, 0)
}

func (s *KeywordContext) LAYOUT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLAYOUT, 0)
}

func (s *KeywordContext) LEADING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLEADING, 0)
}

func (s *KeywordContext) LEFT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLEFT, 0)
}

func (s *KeywordContext) LIFETIME() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLIFETIME, 0)
}

func (s *KeywordContext) LIKE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLIKE, 0)
}

func (s *KeywordContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLIMIT, 0)
}

func (s *KeywordContext) LIVE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLIVE, 0)
}

func (s *KeywordContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLOCAL, 0)
}

func (s *KeywordContext) LOGS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLOGS, 0)
}

func (s *KeywordContext) MATERIALIZE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMATERIALIZE, 0)
}

func (s *KeywordContext) MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMATERIALIZED, 0)
}

func (s *KeywordContext) MAX() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMAX, 0)
}

func (s *KeywordContext) MERGES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMERGES, 0)
}

func (s *KeywordContext) MIN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMIN, 0)
}

func (s *KeywordContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMODIFY, 0)
}

func (s *KeywordContext) MOVE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMOVE, 0)
}

func (s *KeywordContext) MUTATION() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMUTATION, 0)
}

func (s *KeywordContext) NO() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNO, 0)
}

func (s *KeywordContext) NOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNOT, 0)
}

func (s *KeywordContext) NULLS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNULLS, 0)
}

func (s *KeywordContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOFFSET, 0)
}

func (s *KeywordContext) ON() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserON, 0)
}

func (s *KeywordContext) OPTIMIZE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOPTIMIZE, 0)
}

func (s *KeywordContext) OR() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOR, 0)
}

func (s *KeywordContext) ORDER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserORDER, 0)
}

func (s *KeywordContext) OUTER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOUTER, 0)
}

func (s *KeywordContext) OUTFILE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOUTFILE, 0)
}

func (s *KeywordContext) OVER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOVER, 0)
}

func (s *KeywordContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPARTITION, 0)
}

func (s *KeywordContext) POPULATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPOPULATE, 0)
}

func (s *KeywordContext) PRECEDING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPRECEDING, 0)
}

func (s *KeywordContext) PREWHERE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPREWHERE, 0)
}

func (s *KeywordContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPRIMARY, 0)
}

func (s *KeywordContext) RANGE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRANGE, 0)
}

func (s *KeywordContext) RELOAD() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRELOAD, 0)
}

func (s *KeywordContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserREMOVE, 0)
}

func (s *KeywordContext) RENAME() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRENAME, 0)
}

func (s *KeywordContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserREPLACE, 0)
}

func (s *KeywordContext) REPLICA() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserREPLICA, 0)
}

func (s *KeywordContext) REPLICATED() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserREPLICATED, 0)
}

func (s *KeywordContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRIGHT, 0)
}

func (s *KeywordContext) ROLLUP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserROLLUP, 0)
}

func (s *KeywordContext) ROW() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserROW, 0)
}

func (s *KeywordContext) ROWS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserROWS, 0)
}

func (s *KeywordContext) SAMPLE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSAMPLE, 0)
}

func (s *KeywordContext) SELECT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSELECT, 0)
}

func (s *KeywordContext) SEMI() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSEMI, 0)
}

func (s *KeywordContext) SENDS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSENDS, 0)
}

func (s *KeywordContext) SET() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSET, 0)
}

func (s *KeywordContext) SETTINGS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSETTINGS, 0)
}

func (s *KeywordContext) SHOW() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSHOW, 0)
}

func (s *KeywordContext) SOURCE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSOURCE, 0)
}

func (s *KeywordContext) START() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTART, 0)
}

func (s *KeywordContext) STOP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTOP, 0)
}

func (s *KeywordContext) SUBSTRING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSUBSTRING, 0)
}

func (s *KeywordContext) SYNC() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSYNC, 0)
}

func (s *KeywordContext) SYNTAX() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSYNTAX, 0)
}

func (s *KeywordContext) SYSTEM() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSYSTEM, 0)
}

func (s *KeywordContext) TABLE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTABLE, 0)
}

func (s *KeywordContext) TABLES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTABLES, 0)
}

func (s *KeywordContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTEMPORARY, 0)
}

func (s *KeywordContext) TEST() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTEST, 0)
}

func (s *KeywordContext) THEN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTHEN, 0)
}

func (s *KeywordContext) TIES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTIES, 0)
}

func (s *KeywordContext) TIMEOUT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTIMEOUT, 0)
}

func (s *KeywordContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTIMESTAMP, 0)
}

func (s *KeywordContext) TOTALS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTOTALS, 0)
}

func (s *KeywordContext) TRAILING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTRAILING, 0)
}

func (s *KeywordContext) TRIM() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTRIM, 0)
}

func (s *KeywordContext) TRUNCATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTRUNCATE, 0)
}

func (s *KeywordContext) TO() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTO, 0)
}

func (s *KeywordContext) TOP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTOP, 0)
}

func (s *KeywordContext) TTL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTTL, 0)
}

func (s *KeywordContext) TYPE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTYPE, 0)
}

func (s *KeywordContext) UNBOUNDED() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserUNBOUNDED, 0)
}

func (s *KeywordContext) UNION() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserUNION, 0)
}

func (s *KeywordContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserUPDATE, 0)
}

func (s *KeywordContext) USE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserUSE, 0)
}

func (s *KeywordContext) USING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserUSING, 0)
}

func (s *KeywordContext) UUID() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserUUID, 0)
}

func (s *KeywordContext) VALUES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserVALUES, 0)
}

func (s *KeywordContext) VIEW() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserVIEW, 0)
}

func (s *KeywordContext) VOLUME() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserVOLUME, 0)
}

func (s *KeywordContext) WATCH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWATCH, 0)
}

func (s *KeywordContext) WHEN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWHEN, 0)
}

func (s *KeywordContext) WHERE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWHERE, 0)
}

func (s *KeywordContext) WINDOW() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWINDOW, 0)
}

func (s *KeywordContext) WITH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWITH, 0)
}

func (s *KeywordContext) FILL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFILL, 0)
}

func (s *KeywordContext) STEP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTEP, 0)
}

func (s *KeywordContext) STALENESS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTALENESS, 0)
}

func (s *KeywordContext) INTERPOLATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINTERPOLATE, 0)
}

func (s *KeywordContext) INTERSECT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINTERSECT, 0)
}

func (s *KeywordContext) EXCEPT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXCEPT, 0)
}

func (s *KeywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeywordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitKeyword(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) Keyword() (localctx IKeywordContext) {
	localctx = NewKeywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, ClickHouseParserRULE_keyword)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(977)
		_la = p.GetTokenStream().LA(1)

		if !(((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-68719476740) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&-10309021022294017) != 0) || ((int64((_la-128)) & ^0x3f) == 0 && ((int64(1)<<(_la-128))&-576460752303947889) != 0) || ((int64((_la-193)) & ^0x3f) == 0 && ((int64(1)<<(_la-193))&63) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IKeywordForAliasContext is an interface to support dynamic dispatch.
type IKeywordForAliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AFTER() antlr.TerminalNode
	ALIAS() antlr.TerminalNode
	ALTER() antlr.TerminalNode
	ASCENDING() antlr.TerminalNode
	AST() antlr.TerminalNode
	ASYNC() antlr.TerminalNode
	ATTACH() antlr.TerminalNode
	BOTH() antlr.TerminalNode
	BY() antlr.TerminalNode
	CASE() antlr.TerminalNode
	CAST() antlr.TerminalNode
	CHECK() antlr.TerminalNode
	CLEAR() antlr.TerminalNode
	CLUSTER() antlr.TerminalNode
	CODEC() antlr.TerminalNode
	COLLATE() antlr.TerminalNode
	COLUMN() antlr.TerminalNode
	COMMENT() antlr.TerminalNode
	CONSTRAINT() antlr.TerminalNode
	CREATE() antlr.TerminalNode
	CUBE() antlr.TerminalNode
	CURRENT() antlr.TerminalNode
	DATABASE() antlr.TerminalNode
	DATABASES() antlr.TerminalNode
	DATE() antlr.TerminalNode
	DEDUPLICATE() antlr.TerminalNode
	DEFAULT() antlr.TerminalNode
	DELAY() antlr.TerminalNode
	DELETE() antlr.TerminalNode
	DESCRIBE() antlr.TerminalNode
	DESC() antlr.TerminalNode
	DESCENDING() antlr.TerminalNode
	DETACH() antlr.TerminalNode
	DICTIONARIES() antlr.TerminalNode
	DICTIONARY() antlr.TerminalNode
	DISK() antlr.TerminalNode
	DISTRIBUTED() antlr.TerminalNode
	DROP() antlr.TerminalNode
	ELSE() antlr.TerminalNode
	END() antlr.TerminalNode
	ENGINE() antlr.TerminalNode
	EVENTS() antlr.TerminalNode
	EXISTS() antlr.TerminalNode
	EXPLAIN() antlr.TerminalNode
	EXPRESSION() antlr.TerminalNode
	EXTRACT() antlr.TerminalNode
	FETCHES() antlr.TerminalNode
	FIRST() antlr.TerminalNode
	FLUSH() antlr.TerminalNode
	FOR() antlr.TerminalNode
	FOLLOWING() antlr.TerminalNode
	FREEZE() antlr.TerminalNode
	FUNCTION() antlr.TerminalNode
	GRANULARITY() antlr.TerminalNode
	HIERARCHICAL() antlr.TerminalNode
	ID() antlr.TerminalNode
	IF() antlr.TerminalNode
	INDEX() antlr.TerminalNode
	INJECTIVE() antlr.TerminalNode
	INSERT() antlr.TerminalNode
	INTERVAL() antlr.TerminalNode
	IS_OBJECT_ID() antlr.TerminalNode
	KEY() antlr.TerminalNode
	KILL() antlr.TerminalNode
	LAST() antlr.TerminalNode
	LAYOUT() antlr.TerminalNode
	LEADING() antlr.TerminalNode
	LIFETIME() antlr.TerminalNode
	LIVE() antlr.TerminalNode
	LOCAL() antlr.TerminalNode
	LOGS() antlr.TerminalNode
	MATERIALIZE() antlr.TerminalNode
	MATERIALIZED() antlr.TerminalNode
	MAX() antlr.TerminalNode
	MERGES() antlr.TerminalNode
	MIN() antlr.TerminalNode
	MODIFY() antlr.TerminalNode
	MOVE() antlr.TerminalNode
	MUTATION() antlr.TerminalNode
	NO() antlr.TerminalNode
	NULLS() antlr.TerminalNode
	OPTIMIZE() antlr.TerminalNode
	OUTER() antlr.TerminalNode
	OUTFILE() antlr.TerminalNode
	OVER() antlr.TerminalNode
	PARTITION() antlr.TerminalNode
	POPULATE() antlr.TerminalNode
	PRECEDING() antlr.TerminalNode
	PRIMARY() antlr.TerminalNode
	RANGE() antlr.TerminalNode
	RELOAD() antlr.TerminalNode
	REMOVE() antlr.TerminalNode
	RENAME() antlr.TerminalNode
	REPLACE() antlr.TerminalNode
	REPLICA() antlr.TerminalNode
	REPLICATED() antlr.TerminalNode
	ROLLUP() antlr.TerminalNode
	ROW() antlr.TerminalNode
	ROWS() antlr.TerminalNode
	SELECT() antlr.TerminalNode
	SENDS() antlr.TerminalNode
	SET() antlr.TerminalNode
	SHOW() antlr.TerminalNode
	SOURCE() antlr.TerminalNode
	START() antlr.TerminalNode
	STOP() antlr.TerminalNode
	SUBSTRING() antlr.TerminalNode
	SYNC() antlr.TerminalNode
	SYNTAX() antlr.TerminalNode
	SYSTEM() antlr.TerminalNode
	TABLE() antlr.TerminalNode
	TABLES() antlr.TerminalNode
	TEMPORARY() antlr.TerminalNode
	TEST() antlr.TerminalNode
	THEN() antlr.TerminalNode
	TIES() antlr.TerminalNode
	TIMEOUT() antlr.TerminalNode
	TIMESTAMP() antlr.TerminalNode
	TOTALS() antlr.TerminalNode
	TRAILING() antlr.TerminalNode
	TRIM() antlr.TerminalNode
	TRUNCATE() antlr.TerminalNode
	TO() antlr.TerminalNode
	TTL() antlr.TerminalNode
	TYPE() antlr.TerminalNode
	UNBOUNDED() antlr.TerminalNode
	UPDATE() antlr.TerminalNode
	USE() antlr.TerminalNode
	UUID() antlr.TerminalNode
	VALUES() antlr.TerminalNode
	VIEW() antlr.TerminalNode
	VOLUME() antlr.TerminalNode
	WATCH() antlr.TerminalNode
	WHEN() antlr.TerminalNode

	// IsKeywordForAliasContext differentiates from other interfaces.
	IsKeywordForAliasContext()
}

type KeywordForAliasContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeywordForAliasContext() *KeywordForAliasContext {
	var p = new(KeywordForAliasContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_keywordForAlias
	return p
}

func InitEmptyKeywordForAliasContext(p *KeywordForAliasContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_keywordForAlias
}

func (*KeywordForAliasContext) IsKeywordForAliasContext() {}

func NewKeywordForAliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeywordForAliasContext {
	var p = new(KeywordForAliasContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_keywordForAlias

	return p
}

func (s *KeywordForAliasContext) GetParser() antlr.Parser { return s.parser }

func (s *KeywordForAliasContext) AFTER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAFTER, 0)
}

func (s *KeywordForAliasContext) ALIAS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserALIAS, 0)
}

func (s *KeywordForAliasContext) ALTER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserALTER, 0)
}

func (s *KeywordForAliasContext) ASCENDING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserASCENDING, 0)
}

func (s *KeywordForAliasContext) AST() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAST, 0)
}

func (s *KeywordForAliasContext) ASYNC() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserASYNC, 0)
}

func (s *KeywordForAliasContext) ATTACH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserATTACH, 0)
}

func (s *KeywordForAliasContext) BOTH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserBOTH, 0)
}

func (s *KeywordForAliasContext) BY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserBY, 0)
}

func (s *KeywordForAliasContext) CASE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCASE, 0)
}

func (s *KeywordForAliasContext) CAST() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCAST, 0)
}

func (s *KeywordForAliasContext) CHECK() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCHECK, 0)
}

func (s *KeywordForAliasContext) CLEAR() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCLEAR, 0)
}

func (s *KeywordForAliasContext) CLUSTER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCLUSTER, 0)
}

func (s *KeywordForAliasContext) CODEC() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCODEC, 0)
}

func (s *KeywordForAliasContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOLLATE, 0)
}

func (s *KeywordForAliasContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOLUMN, 0)
}

func (s *KeywordForAliasContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMENT, 0)
}

func (s *KeywordForAliasContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCONSTRAINT, 0)
}

func (s *KeywordForAliasContext) CREATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCREATE, 0)
}

func (s *KeywordForAliasContext) CUBE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCUBE, 0)
}

func (s *KeywordForAliasContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCURRENT, 0)
}

func (s *KeywordForAliasContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDATABASE, 0)
}

func (s *KeywordForAliasContext) DATABASES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDATABASES, 0)
}

func (s *KeywordForAliasContext) DATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDATE, 0)
}

func (s *KeywordForAliasContext) DEDUPLICATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDEDUPLICATE, 0)
}

func (s *KeywordForAliasContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDEFAULT, 0)
}

func (s *KeywordForAliasContext) DELAY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDELAY, 0)
}

func (s *KeywordForAliasContext) DELETE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDELETE, 0)
}

func (s *KeywordForAliasContext) DESCRIBE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDESCRIBE, 0)
}

func (s *KeywordForAliasContext) DESC() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDESC, 0)
}

func (s *KeywordForAliasContext) DESCENDING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDESCENDING, 0)
}

func (s *KeywordForAliasContext) DETACH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDETACH, 0)
}

func (s *KeywordForAliasContext) DICTIONARIES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDICTIONARIES, 0)
}

func (s *KeywordForAliasContext) DICTIONARY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDICTIONARY, 0)
}

func (s *KeywordForAliasContext) DISK() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDISK, 0)
}

func (s *KeywordForAliasContext) DISTRIBUTED() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDISTRIBUTED, 0)
}

func (s *KeywordForAliasContext) DROP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDROP, 0)
}

func (s *KeywordForAliasContext) ELSE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserELSE, 0)
}

func (s *KeywordForAliasContext) END() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEND, 0)
}

func (s *KeywordForAliasContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserENGINE, 0)
}

func (s *KeywordForAliasContext) EVENTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEVENTS, 0)
}

func (s *KeywordForAliasContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *KeywordForAliasContext) EXPLAIN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXPLAIN, 0)
}

func (s *KeywordForAliasContext) EXPRESSION() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXPRESSION, 0)
}

func (s *KeywordForAliasContext) EXTRACT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXTRACT, 0)
}

func (s *KeywordForAliasContext) FETCHES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFETCHES, 0)
}

func (s *KeywordForAliasContext) FIRST() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFIRST, 0)
}

func (s *KeywordForAliasContext) FLUSH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFLUSH, 0)
}

func (s *KeywordForAliasContext) FOR() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFOR, 0)
}

func (s *KeywordForAliasContext) FOLLOWING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFOLLOWING, 0)
}

func (s *KeywordForAliasContext) FREEZE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFREEZE, 0)
}

func (s *KeywordForAliasContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFUNCTION, 0)
}

func (s *KeywordForAliasContext) GRANULARITY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserGRANULARITY, 0)
}

func (s *KeywordForAliasContext) HIERARCHICAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserHIERARCHICAL, 0)
}

func (s *KeywordForAliasContext) ID() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserID, 0)
}

func (s *KeywordForAliasContext) IF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIF, 0)
}

func (s *KeywordForAliasContext) INDEX() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINDEX, 0)
}

func (s *KeywordForAliasContext) INJECTIVE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINJECTIVE, 0)
}

func (s *KeywordForAliasContext) INSERT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINSERT, 0)
}

func (s *KeywordForAliasContext) INTERVAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINTERVAL, 0)
}

func (s *KeywordForAliasContext) IS_OBJECT_ID() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIS_OBJECT_ID, 0)
}

func (s *KeywordForAliasContext) KEY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserKEY, 0)
}

func (s *KeywordForAliasContext) KILL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserKILL, 0)
}

func (s *KeywordForAliasContext) LAST() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLAST, 0)
}

func (s *KeywordForAliasContext) LAYOUT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLAYOUT, 0)
}

func (s *KeywordForAliasContext) LEADING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLEADING, 0)
}

func (s *KeywordForAliasContext) LIFETIME() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLIFETIME, 0)
}

func (s *KeywordForAliasContext) LIVE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLIVE, 0)
}

func (s *KeywordForAliasContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLOCAL, 0)
}

func (s *KeywordForAliasContext) LOGS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLOGS, 0)
}

func (s *KeywordForAliasContext) MATERIALIZE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMATERIALIZE, 0)
}

func (s *KeywordForAliasContext) MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMATERIALIZED, 0)
}

func (s *KeywordForAliasContext) MAX() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMAX, 0)
}

func (s *KeywordForAliasContext) MERGES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMERGES, 0)
}

func (s *KeywordForAliasContext) MIN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMIN, 0)
}

func (s *KeywordForAliasContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMODIFY, 0)
}

func (s *KeywordForAliasContext) MOVE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMOVE, 0)
}

func (s *KeywordForAliasContext) MUTATION() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMUTATION, 0)
}

func (s *KeywordForAliasContext) NO() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNO, 0)
}

func (s *KeywordForAliasContext) NULLS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNULLS, 0)
}

func (s *KeywordForAliasContext) OPTIMIZE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOPTIMIZE, 0)
}

func (s *KeywordForAliasContext) OUTER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOUTER, 0)
}

func (s *KeywordForAliasContext) OUTFILE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOUTFILE, 0)
}

func (s *KeywordForAliasContext) OVER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOVER, 0)
}

func (s *KeywordForAliasContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPARTITION, 0)
}

func (s *KeywordForAliasContext) POPULATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPOPULATE, 0)
}

func (s *KeywordForAliasContext) PRECEDING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPRECEDING, 0)
}

func (s *KeywordForAliasContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPRIMARY, 0)
}

func (s *KeywordForAliasContext) RANGE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRANGE, 0)
}

func (s *KeywordForAliasContext) RELOAD() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRELOAD, 0)
}

func (s *KeywordForAliasContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserREMOVE, 0)
}

func (s *KeywordForAliasContext) RENAME() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRENAME, 0)
}

func (s *KeywordForAliasContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserREPLACE, 0)
}

func (s *KeywordForAliasContext) REPLICA() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserREPLICA, 0)
}

func (s *KeywordForAliasContext) REPLICATED() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserREPLICATED, 0)
}

func (s *KeywordForAliasContext) ROLLUP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserROLLUP, 0)
}

func (s *KeywordForAliasContext) ROW() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserROW, 0)
}

func (s *KeywordForAliasContext) ROWS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserROWS, 0)
}

func (s *KeywordForAliasContext) SELECT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSELECT, 0)
}

func (s *KeywordForAliasContext) SENDS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSENDS, 0)
}

func (s *KeywordForAliasContext) SET() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSET, 0)
}

func (s *KeywordForAliasContext) SHOW() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSHOW, 0)
}

func (s *KeywordForAliasContext) SOURCE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSOURCE, 0)
}

func (s *KeywordForAliasContext) START() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTART, 0)
}

func (s *KeywordForAliasContext) STOP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTOP, 0)
}

func (s *KeywordForAliasContext) SUBSTRING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSUBSTRING, 0)
}

func (s *KeywordForAliasContext) SYNC() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSYNC, 0)
}

func (s *KeywordForAliasContext) SYNTAX() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSYNTAX, 0)
}

func (s *KeywordForAliasContext) SYSTEM() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSYSTEM, 0)
}

func (s *KeywordForAliasContext) TABLE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTABLE, 0)
}

func (s *KeywordForAliasContext) TABLES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTABLES, 0)
}

func (s *KeywordForAliasContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTEMPORARY, 0)
}

func (s *KeywordForAliasContext) TEST() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTEST, 0)
}

func (s *KeywordForAliasContext) THEN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTHEN, 0)
}

func (s *KeywordForAliasContext) TIES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTIES, 0)
}

func (s *KeywordForAliasContext) TIMEOUT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTIMEOUT, 0)
}

func (s *KeywordForAliasContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTIMESTAMP, 0)
}

func (s *KeywordForAliasContext) TOTALS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTOTALS, 0)
}

func (s *KeywordForAliasContext) TRAILING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTRAILING, 0)
}

func (s *KeywordForAliasContext) TRIM() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTRIM, 0)
}

func (s *KeywordForAliasContext) TRUNCATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTRUNCATE, 0)
}

func (s *KeywordForAliasContext) TO() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTO, 0)
}

func (s *KeywordForAliasContext) TTL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTTL, 0)
}

func (s *KeywordForAliasContext) TYPE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTYPE, 0)
}

func (s *KeywordForAliasContext) UNBOUNDED() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserUNBOUNDED, 0)
}

func (s *KeywordForAliasContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserUPDATE, 0)
}

func (s *KeywordForAliasContext) USE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserUSE, 0)
}

func (s *KeywordForAliasContext) UUID() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserUUID, 0)
}

func (s *KeywordForAliasContext) VALUES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserVALUES, 0)
}

func (s *KeywordForAliasContext) VIEW() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserVIEW, 0)
}

func (s *KeywordForAliasContext) VOLUME() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserVOLUME, 0)
}

func (s *KeywordForAliasContext) WATCH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWATCH, 0)
}

func (s *KeywordForAliasContext) WHEN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWHEN, 0)
}

func (s *KeywordForAliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeywordForAliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeywordForAliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitKeywordForAlias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) KeywordForAlias() (localctx IKeywordForAliasContext) {
	localctx = NewKeywordForAliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, ClickHouseParserRULE_keywordForAlias)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(979)
		_la = p.GetTokenStream().LA(1)

		if !(((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-2342153351002658772) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&-987590252020733621) != 0) || ((int64((_la-128)) & ^0x3f) == 0 && ((int64(1)<<(_la-128))&1719244759682498443) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAliasContext is an interface to support dynamic dispatch.
type IAliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode
	KeywordForAlias() IKeywordForAliasContext

	// IsAliasContext differentiates from other interfaces.
	IsAliasContext()
}

type AliasContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAliasContext() *AliasContext {
	var p = new(AliasContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_alias
	return p
}

func InitEmptyAliasContext(p *AliasContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_alias
}

func (*AliasContext) IsAliasContext() {}

func NewAliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AliasContext {
	var p = new(AliasContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_alias

	return p
}

func (s *AliasContext) GetParser() antlr.Parser { return s.parser }

func (s *AliasContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIDENTIFIER, 0)
}

func (s *AliasContext) KeywordForAlias() IKeywordForAliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKeywordForAliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKeywordForAliasContext)
}

func (s *AliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) Alias() (localctx IAliasContext) {
	localctx = NewAliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, ClickHouseParserRULE_alias)
	p.SetState(983)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ClickHouseParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(981)
			p.Match(ClickHouseParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ClickHouseParserAFTER, ClickHouseParserALIAS, ClickHouseParserALTER, ClickHouseParserASCENDING, ClickHouseParserAST, ClickHouseParserASYNC, ClickHouseParserATTACH, ClickHouseParserBOTH, ClickHouseParserBY, ClickHouseParserCASE, ClickHouseParserCAST, ClickHouseParserCHECK, ClickHouseParserCLEAR, ClickHouseParserCLUSTER, ClickHouseParserCODEC, ClickHouseParserCOLLATE, ClickHouseParserCOLUMN, ClickHouseParserCOMMENT, ClickHouseParserCONSTRAINT, ClickHouseParserCREATE, ClickHouseParserCUBE, ClickHouseParserCURRENT, ClickHouseParserDATABASE, ClickHouseParserDATABASES, ClickHouseParserDATE, ClickHouseParserDEDUPLICATE, ClickHouseParserDEFAULT, ClickHouseParserDELAY, ClickHouseParserDELETE, ClickHouseParserDESC, ClickHouseParserDESCENDING, ClickHouseParserDESCRIBE, ClickHouseParserDETACH, ClickHouseParserDICTIONARIES, ClickHouseParserDICTIONARY, ClickHouseParserDISK, ClickHouseParserDISTRIBUTED, ClickHouseParserDROP, ClickHouseParserELSE, ClickHouseParserEND, ClickHouseParserENGINE, ClickHouseParserEVENTS, ClickHouseParserEXISTS, ClickHouseParserEXPLAIN, ClickHouseParserEXPRESSION, ClickHouseParserEXTRACT, ClickHouseParserFETCHES, ClickHouseParserFIRST, ClickHouseParserFLUSH, ClickHouseParserFOLLOWING, ClickHouseParserFOR, ClickHouseParserFREEZE, ClickHouseParserFUNCTION, ClickHouseParserGRANULARITY, ClickHouseParserHIERARCHICAL, ClickHouseParserID, ClickHouseParserIF, ClickHouseParserINDEX, ClickHouseParserINJECTIVE, ClickHouseParserINSERT, ClickHouseParserINTERVAL, ClickHouseParserIS_OBJECT_ID, ClickHouseParserKEY, ClickHouseParserKILL, ClickHouseParserLAST, ClickHouseParserLAYOUT, ClickHouseParserLEADING, ClickHouseParserLIFETIME, ClickHouseParserLIVE, ClickHouseParserLOCAL, ClickHouseParserLOGS, ClickHouseParserMATERIALIZE, ClickHouseParserMATERIALIZED, ClickHouseParserMAX, ClickHouseParserMERGES, ClickHouseParserMIN, ClickHouseParserMODIFY, ClickHouseParserMOVE, ClickHouseParserMUTATION, ClickHouseParserNO, ClickHouseParserNULLS, ClickHouseParserOPTIMIZE, ClickHouseParserOUTER, ClickHouseParserOUTFILE, ClickHouseParserOVER, ClickHouseParserPARTITION, ClickHouseParserPOPULATE, ClickHouseParserPRECEDING, ClickHouseParserPRIMARY, ClickHouseParserRANGE, ClickHouseParserRELOAD, ClickHouseParserREMOVE, ClickHouseParserRENAME, ClickHouseParserREPLACE, ClickHouseParserREPLICA, ClickHouseParserREPLICATED, ClickHouseParserROLLUP, ClickHouseParserROW, ClickHouseParserROWS, ClickHouseParserSELECT, ClickHouseParserSENDS, ClickHouseParserSET, ClickHouseParserSHOW, ClickHouseParserSOURCE, ClickHouseParserSTART, ClickHouseParserSTOP, ClickHouseParserSUBSTRING, ClickHouseParserSYNC, ClickHouseParserSYNTAX, ClickHouseParserSYSTEM, ClickHouseParserTABLE, ClickHouseParserTABLES, ClickHouseParserTEMPORARY, ClickHouseParserTEST, ClickHouseParserTHEN, ClickHouseParserTIES, ClickHouseParserTIMEOUT, ClickHouseParserTIMESTAMP, ClickHouseParserTO, ClickHouseParserTOTALS, ClickHouseParserTRAILING, ClickHouseParserTRIM, ClickHouseParserTRUNCATE, ClickHouseParserTTL, ClickHouseParserTYPE, ClickHouseParserUNBOUNDED, ClickHouseParserUPDATE, ClickHouseParserUSE, ClickHouseParserUUID, ClickHouseParserVALUES, ClickHouseParserVIEW, ClickHouseParserVOLUME, ClickHouseParserWATCH, ClickHouseParserWHEN:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(982)
			p.KeywordForAlias()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode
	Interval() IIntervalContext
	Keyword() IKeywordContext

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_identifier
	return p
}

func InitEmptyIdentifierContext(p *IdentifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_identifier
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIDENTIFIER, 0)
}

func (s *IdentifierContext) Interval() IIntervalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntervalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntervalContext)
}

func (s *IdentifierContext) Keyword() IKeywordContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKeywordContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKeywordContext)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) Identifier() (localctx IIdentifierContext) {
	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, ClickHouseParserRULE_identifier)
	p.SetState(988)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ClickHouseParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(985)
			p.Match(ClickHouseParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ClickHouseParserDAY, ClickHouseParserHOUR, ClickHouseParserMINUTE, ClickHouseParserMONTH, ClickHouseParserQUARTER, ClickHouseParserSECOND, ClickHouseParserWEEK, ClickHouseParserYEAR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(986)
			p.Interval()
		}

	case ClickHouseParserAFTER, ClickHouseParserALIAS, ClickHouseParserALL, ClickHouseParserALTER, ClickHouseParserAND, ClickHouseParserANTI, ClickHouseParserANY, ClickHouseParserARRAY, ClickHouseParserAS, ClickHouseParserASCENDING, ClickHouseParserASOF, ClickHouseParserAST, ClickHouseParserASYNC, ClickHouseParserATTACH, ClickHouseParserBETWEEN, ClickHouseParserBOTH, ClickHouseParserBY, ClickHouseParserCASE, ClickHouseParserCAST, ClickHouseParserCHECK, ClickHouseParserCLEAR, ClickHouseParserCLUSTER, ClickHouseParserCODEC, ClickHouseParserCOLLATE, ClickHouseParserCOLUMN, ClickHouseParserCOMMENT, ClickHouseParserCONSTRAINT, ClickHouseParserCREATE, ClickHouseParserCROSS, ClickHouseParserCUBE, ClickHouseParserCURRENT, ClickHouseParserDATABASE, ClickHouseParserDATABASES, ClickHouseParserDATE, ClickHouseParserDEDUPLICATE, ClickHouseParserDEFAULT, ClickHouseParserDELAY, ClickHouseParserDELETE, ClickHouseParserDESC, ClickHouseParserDESCENDING, ClickHouseParserDESCRIBE, ClickHouseParserDETACH, ClickHouseParserDICTIONARIES, ClickHouseParserDICTIONARY, ClickHouseParserDISK, ClickHouseParserDISTINCT, ClickHouseParserDISTRIBUTED, ClickHouseParserDROP, ClickHouseParserELSE, ClickHouseParserEND, ClickHouseParserENGINE, ClickHouseParserEVENTS, ClickHouseParserEXCEPT, ClickHouseParserEXISTS, ClickHouseParserEXPLAIN, ClickHouseParserEXPRESSION, ClickHouseParserEXTRACT, ClickHouseParserFETCHES, ClickHouseParserFINAL, ClickHouseParserFIRST, ClickHouseParserFLUSH, ClickHouseParserFOLLOWING, ClickHouseParserFOR, ClickHouseParserFORMAT, ClickHouseParserFREEZE, ClickHouseParserFROM, ClickHouseParserFULL, ClickHouseParserFUNCTION, ClickHouseParserGLOBAL, ClickHouseParserGRANULARITY, ClickHouseParserGROUP, ClickHouseParserHAVING, ClickHouseParserHIERARCHICAL, ClickHouseParserID, ClickHouseParserIF, ClickHouseParserILIKE, ClickHouseParserIN, ClickHouseParserINDEX, ClickHouseParserINJECTIVE, ClickHouseParserINNER, ClickHouseParserINSERT, ClickHouseParserINTERSECT, ClickHouseParserINTERVAL, ClickHouseParserINTO, ClickHouseParserIS, ClickHouseParserIS_OBJECT_ID, ClickHouseParserJOIN, ClickHouseParserKEY, ClickHouseParserKILL, ClickHouseParserLAST, ClickHouseParserLAYOUT, ClickHouseParserLEADING, ClickHouseParserLEFT, ClickHouseParserLIFETIME, ClickHouseParserLIKE, ClickHouseParserLIMIT, ClickHouseParserLIVE, ClickHouseParserLOCAL, ClickHouseParserLOGS, ClickHouseParserMATERIALIZE, ClickHouseParserMATERIALIZED, ClickHouseParserMAX, ClickHouseParserMERGES, ClickHouseParserMIN, ClickHouseParserMODIFY, ClickHouseParserMOVE, ClickHouseParserMUTATION, ClickHouseParserNO, ClickHouseParserNOT, ClickHouseParserNULLS, ClickHouseParserOFFSET, ClickHouseParserON, ClickHouseParserOPTIMIZE, ClickHouseParserOR, ClickHouseParserORDER, ClickHouseParserOUTER, ClickHouseParserOUTFILE, ClickHouseParserOVER, ClickHouseParserPARTITION, ClickHouseParserPOPULATE, ClickHouseParserPRECEDING, ClickHouseParserPREWHERE, ClickHouseParserPRIMARY, ClickHouseParserRANGE, ClickHouseParserRELOAD, ClickHouseParserREMOVE, ClickHouseParserRENAME, ClickHouseParserREPLACE, ClickHouseParserREPLICA, ClickHouseParserREPLICATED, ClickHouseParserRIGHT, ClickHouseParserROLLUP, ClickHouseParserROW, ClickHouseParserROWS, ClickHouseParserSAMPLE, ClickHouseParserSELECT, ClickHouseParserSEMI, ClickHouseParserSENDS, ClickHouseParserSET, ClickHouseParserSETTINGS, ClickHouseParserSHOW, ClickHouseParserSOURCE, ClickHouseParserSTART, ClickHouseParserSTOP, ClickHouseParserSUBSTRING, ClickHouseParserSYNC, ClickHouseParserSYNTAX, ClickHouseParserSYSTEM, ClickHouseParserTABLE, ClickHouseParserTABLES, ClickHouseParserTEMPORARY, ClickHouseParserTEST, ClickHouseParserTHEN, ClickHouseParserTIES, ClickHouseParserTIMEOUT, ClickHouseParserTIMESTAMP, ClickHouseParserTO, ClickHouseParserTOP, ClickHouseParserTOTALS, ClickHouseParserTRAILING, ClickHouseParserTRIM, ClickHouseParserTRUNCATE, ClickHouseParserTTL, ClickHouseParserTYPE, ClickHouseParserUNBOUNDED, ClickHouseParserUNION, ClickHouseParserUPDATE, ClickHouseParserUSE, ClickHouseParserUSING, ClickHouseParserUUID, ClickHouseParserVALUES, ClickHouseParserVIEW, ClickHouseParserVOLUME, ClickHouseParserWATCH, ClickHouseParserWHEN, ClickHouseParserWHERE, ClickHouseParserWINDOW, ClickHouseParserWITH, ClickHouseParserFILL, ClickHouseParserSTEP, ClickHouseParserSTALENESS, ClickHouseParserINTERPOLATE, ClickHouseParserJSON_FALSE, ClickHouseParserJSON_TRUE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(987)
			p.Keyword()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIdentifierOrNullContext is an interface to support dynamic dispatch.
type IIdentifierOrNullContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	NULL_SQL() antlr.TerminalNode

	// IsIdentifierOrNullContext differentiates from other interfaces.
	IsIdentifierOrNullContext()
}

type IdentifierOrNullContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierOrNullContext() *IdentifierOrNullContext {
	var p = new(IdentifierOrNullContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_identifierOrNull
	return p
}

func InitEmptyIdentifierOrNullContext(p *IdentifierOrNullContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_identifierOrNull
}

func (*IdentifierOrNullContext) IsIdentifierOrNullContext() {}

func NewIdentifierOrNullContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierOrNullContext {
	var p = new(IdentifierOrNullContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_identifierOrNull

	return p
}

func (s *IdentifierOrNullContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierOrNullContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *IdentifierOrNullContext) NULL_SQL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNULL_SQL, 0)
}

func (s *IdentifierOrNullContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierOrNullContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierOrNullContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitIdentifierOrNull(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) IdentifierOrNull() (localctx IIdentifierOrNullContext) {
	localctx = NewIdentifierOrNullContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, ClickHouseParserRULE_identifierOrNull)
	p.SetState(992)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ClickHouseParserAFTER, ClickHouseParserALIAS, ClickHouseParserALL, ClickHouseParserALTER, ClickHouseParserAND, ClickHouseParserANTI, ClickHouseParserANY, ClickHouseParserARRAY, ClickHouseParserAS, ClickHouseParserASCENDING, ClickHouseParserASOF, ClickHouseParserAST, ClickHouseParserASYNC, ClickHouseParserATTACH, ClickHouseParserBETWEEN, ClickHouseParserBOTH, ClickHouseParserBY, ClickHouseParserCASE, ClickHouseParserCAST, ClickHouseParserCHECK, ClickHouseParserCLEAR, ClickHouseParserCLUSTER, ClickHouseParserCODEC, ClickHouseParserCOLLATE, ClickHouseParserCOLUMN, ClickHouseParserCOMMENT, ClickHouseParserCONSTRAINT, ClickHouseParserCREATE, ClickHouseParserCROSS, ClickHouseParserCUBE, ClickHouseParserCURRENT, ClickHouseParserDATABASE, ClickHouseParserDATABASES, ClickHouseParserDATE, ClickHouseParserDAY, ClickHouseParserDEDUPLICATE, ClickHouseParserDEFAULT, ClickHouseParserDELAY, ClickHouseParserDELETE, ClickHouseParserDESC, ClickHouseParserDESCENDING, ClickHouseParserDESCRIBE, ClickHouseParserDETACH, ClickHouseParserDICTIONARIES, ClickHouseParserDICTIONARY, ClickHouseParserDISK, ClickHouseParserDISTINCT, ClickHouseParserDISTRIBUTED, ClickHouseParserDROP, ClickHouseParserELSE, ClickHouseParserEND, ClickHouseParserENGINE, ClickHouseParserEVENTS, ClickHouseParserEXCEPT, ClickHouseParserEXISTS, ClickHouseParserEXPLAIN, ClickHouseParserEXPRESSION, ClickHouseParserEXTRACT, ClickHouseParserFETCHES, ClickHouseParserFINAL, ClickHouseParserFIRST, ClickHouseParserFLUSH, ClickHouseParserFOLLOWING, ClickHouseParserFOR, ClickHouseParserFORMAT, ClickHouseParserFREEZE, ClickHouseParserFROM, ClickHouseParserFULL, ClickHouseParserFUNCTION, ClickHouseParserGLOBAL, ClickHouseParserGRANULARITY, ClickHouseParserGROUP, ClickHouseParserHAVING, ClickHouseParserHIERARCHICAL, ClickHouseParserHOUR, ClickHouseParserID, ClickHouseParserIF, ClickHouseParserILIKE, ClickHouseParserIN, ClickHouseParserINDEX, ClickHouseParserINJECTIVE, ClickHouseParserINNER, ClickHouseParserINSERT, ClickHouseParserINTERSECT, ClickHouseParserINTERVAL, ClickHouseParserINTO, ClickHouseParserIS, ClickHouseParserIS_OBJECT_ID, ClickHouseParserJOIN, ClickHouseParserKEY, ClickHouseParserKILL, ClickHouseParserLAST, ClickHouseParserLAYOUT, ClickHouseParserLEADING, ClickHouseParserLEFT, ClickHouseParserLIFETIME, ClickHouseParserLIKE, ClickHouseParserLIMIT, ClickHouseParserLIVE, ClickHouseParserLOCAL, ClickHouseParserLOGS, ClickHouseParserMATERIALIZE, ClickHouseParserMATERIALIZED, ClickHouseParserMAX, ClickHouseParserMERGES, ClickHouseParserMIN, ClickHouseParserMINUTE, ClickHouseParserMODIFY, ClickHouseParserMONTH, ClickHouseParserMOVE, ClickHouseParserMUTATION, ClickHouseParserNO, ClickHouseParserNOT, ClickHouseParserNULLS, ClickHouseParserOFFSET, ClickHouseParserON, ClickHouseParserOPTIMIZE, ClickHouseParserOR, ClickHouseParserORDER, ClickHouseParserOUTER, ClickHouseParserOUTFILE, ClickHouseParserOVER, ClickHouseParserPARTITION, ClickHouseParserPOPULATE, ClickHouseParserPRECEDING, ClickHouseParserPREWHERE, ClickHouseParserPRIMARY, ClickHouseParserQUARTER, ClickHouseParserRANGE, ClickHouseParserRELOAD, ClickHouseParserREMOVE, ClickHouseParserRENAME, ClickHouseParserREPLACE, ClickHouseParserREPLICA, ClickHouseParserREPLICATED, ClickHouseParserRIGHT, ClickHouseParserROLLUP, ClickHouseParserROW, ClickHouseParserROWS, ClickHouseParserSAMPLE, ClickHouseParserSECOND, ClickHouseParserSELECT, ClickHouseParserSEMI, ClickHouseParserSENDS, ClickHouseParserSET, ClickHouseParserSETTINGS, ClickHouseParserSHOW, ClickHouseParserSOURCE, ClickHouseParserSTART, ClickHouseParserSTOP, ClickHouseParserSUBSTRING, ClickHouseParserSYNC, ClickHouseParserSYNTAX, ClickHouseParserSYSTEM, ClickHouseParserTABLE, ClickHouseParserTABLES, ClickHouseParserTEMPORARY, ClickHouseParserTEST, ClickHouseParserTHEN, ClickHouseParserTIES, ClickHouseParserTIMEOUT, ClickHouseParserTIMESTAMP, ClickHouseParserTO, ClickHouseParserTOP, ClickHouseParserTOTALS, ClickHouseParserTRAILING, ClickHouseParserTRIM, ClickHouseParserTRUNCATE, ClickHouseParserTTL, ClickHouseParserTYPE, ClickHouseParserUNBOUNDED, ClickHouseParserUNION, ClickHouseParserUPDATE, ClickHouseParserUSE, ClickHouseParserUSING, ClickHouseParserUUID, ClickHouseParserVALUES, ClickHouseParserVIEW, ClickHouseParserVOLUME, ClickHouseParserWATCH, ClickHouseParserWEEK, ClickHouseParserWHEN, ClickHouseParserWHERE, ClickHouseParserWINDOW, ClickHouseParserWITH, ClickHouseParserYEAR, ClickHouseParserFILL, ClickHouseParserSTEP, ClickHouseParserSTALENESS, ClickHouseParserINTERPOLATE, ClickHouseParserJSON_FALSE, ClickHouseParserJSON_TRUE, ClickHouseParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(990)
			p.Identifier()
		}

	case ClickHouseParserNULL_SQL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(991)
			p.Match(ClickHouseParserNULL_SQL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEnumValueContext is an interface to support dynamic dispatch.
type IEnumValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	STRING_LITERAL() antlr.TerminalNode
	EQ_SINGLE() antlr.TerminalNode
	NumberLiteral() INumberLiteralContext

	// IsEnumValueContext differentiates from other interfaces.
	IsEnumValueContext()
}

type EnumValueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumValueContext() *EnumValueContext {
	var p = new(EnumValueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_enumValue
	return p
}

func InitEmptyEnumValueContext(p *EnumValueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_enumValue
}

func (*EnumValueContext) IsEnumValueContext() {}

func NewEnumValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumValueContext {
	var p = new(EnumValueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_enumValue

	return p
}

func (s *EnumValueContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumValueContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTRING_LITERAL, 0)
}

func (s *EnumValueContext) EQ_SINGLE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEQ_SINGLE, 0)
}

func (s *EnumValueContext) NumberLiteral() INumberLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberLiteralContext)
}

func (s *EnumValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitEnumValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) EnumValue() (localctx IEnumValueContext) {
	localctx = NewEnumValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, ClickHouseParserRULE_enumValue)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(994)
		p.Match(ClickHouseParserSTRING_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(995)
		p.Match(ClickHouseParserEQ_SINGLE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(996)
		p.NumberLiteral()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

func (p *ClickHouseParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 25:
		var t *JoinExprContext = nil
		if localctx != nil {
			t = localctx.(*JoinExprContext)
		}
		return p.JoinExpr_Sempred(t, predIndex)

	case 46:
		var t *ColumnExprContext = nil
		if localctx != nil {
			t = localctx.(*ColumnExprContext)
		}
		return p.ColumnExpr_Sempred(t, predIndex)

	case 52:
		var t *TableExprContext = nil
		if localctx != nil {
			t = localctx.(*TableExprContext)
		}
		return p.TableExpr_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *ClickHouseParser) JoinExpr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 4)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ClickHouseParser) ColumnExpr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 2:
		return p.Precpred(p.GetParserRuleContext(), 16)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 15)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 14)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 31)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 19)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 18)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 7)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ClickHouseParser) TableExpr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 14:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
