// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package dto

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CmdRectFilledMultiColor struct {
	_tab flatbuffers.Table
}

func GetRootAsCmdRectFilledMultiColor(buf []byte, offset flatbuffers.UOffsetT) *CmdRectFilledMultiColor {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CmdRectFilledMultiColor{}
	x.Init(buf, n+offset)
	return x
}

func FinishCmdRectFilledMultiColorBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCmdRectFilledMultiColor(buf []byte, offset flatbuffers.UOffsetT) *CmdRectFilledMultiColor {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CmdRectFilledMultiColor{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCmdRectFilledMultiColorBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CmdRectFilledMultiColor) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CmdRectFilledMultiColor) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CmdRectFilledMultiColor) PMin(obj *SingleVec2) *SingleVec2 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(SingleVec2)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CmdRectFilledMultiColor) PMax(obj *SingleVec2) *SingleVec2 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(SingleVec2)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CmdRectFilledMultiColor) ColUprLeft() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CmdRectFilledMultiColor) MutateColUprLeft(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *CmdRectFilledMultiColor) ColUprRight() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CmdRectFilledMultiColor) MutateColUprRight(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *CmdRectFilledMultiColor) ColBotRight() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CmdRectFilledMultiColor) MutateColBotRight(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func (rcv *CmdRectFilledMultiColor) ColBotLeft() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CmdRectFilledMultiColor) MutateColBotLeft(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func CmdRectFilledMultiColorStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func CmdRectFilledMultiColorAddPMin(builder *flatbuffers.Builder, pMin flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(pMin), 0)
}
func CmdRectFilledMultiColorAddPMax(builder *flatbuffers.Builder, pMax flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(pMax), 0)
}
func CmdRectFilledMultiColorAddColUprLeft(builder *flatbuffers.Builder, colUprLeft uint32) {
	builder.PrependUint32Slot(2, colUprLeft, 0)
}
func CmdRectFilledMultiColorAddColUprRight(builder *flatbuffers.Builder, colUprRight uint32) {
	builder.PrependUint32Slot(3, colUprRight, 0)
}
func CmdRectFilledMultiColorAddColBotRight(builder *flatbuffers.Builder, colBotRight uint32) {
	builder.PrependUint32Slot(4, colBotRight, 0)
}
func CmdRectFilledMultiColorAddColBotLeft(builder *flatbuffers.Builder, colBotLeft uint32) {
	builder.PrependUint32Slot(5, colBotLeft, 0)
}
func CmdRectFilledMultiColorEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
