// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package dto

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CmdSimpleVertexDraw struct {
	_tab flatbuffers.Table
}

func GetRootAsCmdSimpleVertexDraw(buf []byte, offset flatbuffers.UOffsetT) *CmdSimpleVertexDraw {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CmdSimpleVertexDraw{}
	x.Init(buf, n+offset)
	return x
}

func FinishCmdSimpleVertexDrawBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCmdSimpleVertexDraw(buf []byte, offset flatbuffers.UOffsetT) *CmdSimpleVertexDraw {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CmdSimpleVertexDraw{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCmdSimpleVertexDrawBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CmdSimpleVertexDraw) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CmdSimpleVertexDraw) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CmdSimpleVertexDraw) ClipRect(obj *SingleVec4) *SingleVec4 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(SingleVec4)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CmdSimpleVertexDraw) PosXy(j int) float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *CmdSimpleVertexDraw) PosXyLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CmdSimpleVertexDraw) MutatePosXy(j int, n float32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *CmdSimpleVertexDraw) Col() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CmdSimpleVertexDraw) MutateCol(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func CmdSimpleVertexDrawStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func CmdSimpleVertexDrawAddClipRect(builder *flatbuffers.Builder, clipRect flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(clipRect), 0)
}
func CmdSimpleVertexDrawAddPosXy(builder *flatbuffers.Builder, posXy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(posXy), 0)
}
func CmdSimpleVertexDrawStartPosXyVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CmdSimpleVertexDrawAddCol(builder *flatbuffers.Builder, col uint32) {
	builder.PrependUint32Slot(2, col, 0)
}
func CmdSimpleVertexDrawEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
