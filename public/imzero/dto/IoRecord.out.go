// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package dto

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type IoRecord struct {
	_tab flatbuffers.Table
}

func GetRootAsIoRecord(buf []byte, offset flatbuffers.UOffsetT) *IoRecord {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &IoRecord{}
	x.Init(buf, n+offset)
	return x
}

func FinishIoRecordBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsIoRecord(buf []byte, offset flatbuffers.UOffsetT) *IoRecord {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &IoRecord{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedIoRecordBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *IoRecord) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *IoRecord) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *IoRecord) Flags() IoFlags {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return IoFlags(rcv._tab.GetUint16(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *IoRecord) MutateFlags(n IoFlags) bool {
	return rcv._tab.MutateUint16Slot(4, uint16(n))
}

func IoRecordStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func IoRecordAddFlags(builder *flatbuffers.Builder, flags IoFlags) {
	builder.PrependUint16Slot(0, uint16(flags), 0)
}
func IoRecordEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
