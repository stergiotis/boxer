// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package dto

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CmdRenderText struct {
	_tab flatbuffers.Table
}

func GetRootAsCmdRenderText(buf []byte, offset flatbuffers.UOffsetT) *CmdRenderText {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CmdRenderText{}
	x.Init(buf, n+offset)
	return x
}

func FinishCmdRenderTextBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCmdRenderText(buf []byte, offset flatbuffers.UOffsetT) *CmdRenderText {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CmdRenderText{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCmdRenderTextBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CmdRenderText) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CmdRenderText) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CmdRenderText) Imfont() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CmdRenderText) MutateImfont(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *CmdRenderText) Size() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CmdRenderText) MutateSize(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *CmdRenderText) Pos(obj *SingleVec2) *SingleVec2 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(SingleVec2)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CmdRenderText) Col() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CmdRenderText) MutateCol(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *CmdRenderText) ClipRect(obj *SingleVec4) *SingleVec4 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(SingleVec4)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CmdRenderText) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func CmdRenderTextStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func CmdRenderTextAddImfont(builder *flatbuffers.Builder, imfont uint64) {
	builder.PrependUint64Slot(0, imfont, 0)
}
func CmdRenderTextAddSize(builder *flatbuffers.Builder, size float32) {
	builder.PrependFloat32Slot(1, size, 0.0)
}
func CmdRenderTextAddPos(builder *flatbuffers.Builder, pos flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(pos), 0)
}
func CmdRenderTextAddCol(builder *flatbuffers.Builder, col uint32) {
	builder.PrependUint32Slot(3, col, 0)
}
func CmdRenderTextAddClipRect(builder *flatbuffers.Builder, clipRect flatbuffers.UOffsetT) {
	builder.PrependStructSlot(4, flatbuffers.UOffsetT(clipRect), 0)
}
func CmdRenderTextAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(text), 0)
}
func CmdRenderTextEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
