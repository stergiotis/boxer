// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package dto

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CmdTriangle struct {
	_tab flatbuffers.Table
}

func GetRootAsCmdTriangle(buf []byte, offset flatbuffers.UOffsetT) *CmdTriangle {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CmdTriangle{}
	x.Init(buf, n+offset)
	return x
}

func FinishCmdTriangleBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCmdTriangle(buf []byte, offset flatbuffers.UOffsetT) *CmdTriangle {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CmdTriangle{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCmdTriangleBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CmdTriangle) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CmdTriangle) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CmdTriangle) P1(obj *SingleVec2) *SingleVec2 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(SingleVec2)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CmdTriangle) P2(obj *SingleVec2) *SingleVec2 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(SingleVec2)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CmdTriangle) P3(obj *SingleVec2) *SingleVec2 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(SingleVec2)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CmdTriangle) Col() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CmdTriangle) MutateCol(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *CmdTriangle) Thickness() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CmdTriangle) MutateThickness(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func CmdTriangleStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func CmdTriangleAddP1(builder *flatbuffers.Builder, p1 flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(p1), 0)
}
func CmdTriangleAddP2(builder *flatbuffers.Builder, p2 flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(p2), 0)
}
func CmdTriangleAddP3(builder *flatbuffers.Builder, p3 flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(p3), 0)
}
func CmdTriangleAddCol(builder *flatbuffers.Builder, col uint32) {
	builder.PrependUint32Slot(3, col, 0)
}
func CmdTriangleAddThickness(builder *flatbuffers.Builder, thickness float32) {
	builder.PrependFloat32Slot(4, thickness, 0.0)
}
func CmdTriangleEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
