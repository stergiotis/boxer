// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package dto

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CmdRectRoundedCornersFilled struct {
	_tab flatbuffers.Table
}

func GetRootAsCmdRectRoundedCornersFilled(buf []byte, offset flatbuffers.UOffsetT) *CmdRectRoundedCornersFilled {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CmdRectRoundedCornersFilled{}
	x.Init(buf, n+offset)
	return x
}

func FinishCmdRectRoundedCornersFilledBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCmdRectRoundedCornersFilled(buf []byte, offset flatbuffers.UOffsetT) *CmdRectRoundedCornersFilled {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CmdRectRoundedCornersFilled{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCmdRectRoundedCornersFilledBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CmdRectRoundedCornersFilled) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CmdRectRoundedCornersFilled) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CmdRectRoundedCornersFilled) PMin(obj *SingleVec2) *SingleVec2 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(SingleVec2)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CmdRectRoundedCornersFilled) PMax(obj *SingleVec2) *SingleVec2 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(SingleVec2)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CmdRectRoundedCornersFilled) Col() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CmdRectRoundedCornersFilled) MutateCol(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *CmdRectRoundedCornersFilled) RoundingTopLeft() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CmdRectRoundedCornersFilled) MutateRoundingTopLeft(n float32) bool {
	return rcv._tab.MutateFloat32Slot(10, n)
}

func (rcv *CmdRectRoundedCornersFilled) RoundingTopRight() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CmdRectRoundedCornersFilled) MutateRoundingTopRight(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func (rcv *CmdRectRoundedCornersFilled) RoundingBottomRight() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CmdRectRoundedCornersFilled) MutateRoundingBottomRight(n float32) bool {
	return rcv._tab.MutateFloat32Slot(14, n)
}

func (rcv *CmdRectRoundedCornersFilled) RoundingBottomLeft() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CmdRectRoundedCornersFilled) MutateRoundingBottomLeft(n float32) bool {
	return rcv._tab.MutateFloat32Slot(16, n)
}

func CmdRectRoundedCornersFilledStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func CmdRectRoundedCornersFilledAddPMin(builder *flatbuffers.Builder, pMin flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(pMin), 0)
}
func CmdRectRoundedCornersFilledAddPMax(builder *flatbuffers.Builder, pMax flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(pMax), 0)
}
func CmdRectRoundedCornersFilledAddCol(builder *flatbuffers.Builder, col uint32) {
	builder.PrependUint32Slot(2, col, 0)
}
func CmdRectRoundedCornersFilledAddRoundingTopLeft(builder *flatbuffers.Builder, roundingTopLeft float32) {
	builder.PrependFloat32Slot(3, roundingTopLeft, 0.0)
}
func CmdRectRoundedCornersFilledAddRoundingTopRight(builder *flatbuffers.Builder, roundingTopRight float32) {
	builder.PrependFloat32Slot(4, roundingTopRight, 0.0)
}
func CmdRectRoundedCornersFilledAddRoundingBottomRight(builder *flatbuffers.Builder, roundingBottomRight float32) {
	builder.PrependFloat32Slot(5, roundingBottomRight, 0.0)
}
func CmdRectRoundedCornersFilledAddRoundingBottomLeft(builder *flatbuffers.Builder, roundingBottomLeft float32) {
	builder.PrependFloat32Slot(6, roundingBottomLeft, 0.0)
}
func CmdRectRoundedCornersFilledEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
