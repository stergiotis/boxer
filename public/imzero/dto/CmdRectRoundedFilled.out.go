// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package dto

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CmdRectRoundedFilled struct {
	_tab flatbuffers.Table
}

func GetRootAsCmdRectRoundedFilled(buf []byte, offset flatbuffers.UOffsetT) *CmdRectRoundedFilled {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CmdRectRoundedFilled{}
	x.Init(buf, n+offset)
	return x
}

func FinishCmdRectRoundedFilledBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCmdRectRoundedFilled(buf []byte, offset flatbuffers.UOffsetT) *CmdRectRoundedFilled {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CmdRectRoundedFilled{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCmdRectRoundedFilledBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CmdRectRoundedFilled) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CmdRectRoundedFilled) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CmdRectRoundedFilled) PMin(obj *SingleVec2) *SingleVec2 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(SingleVec2)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CmdRectRoundedFilled) PMax(obj *SingleVec2) *SingleVec2 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(SingleVec2)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CmdRectRoundedFilled) Col() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CmdRectRoundedFilled) MutateCol(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *CmdRectRoundedFilled) Rounding() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CmdRectRoundedFilled) MutateRounding(n float32) bool {
	return rcv._tab.MutateFloat32Slot(10, n)
}

func CmdRectRoundedFilledStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func CmdRectRoundedFilledAddPMin(builder *flatbuffers.Builder, pMin flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(pMin), 0)
}
func CmdRectRoundedFilledAddPMax(builder *flatbuffers.Builder, pMax flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(pMax), 0)
}
func CmdRectRoundedFilledAddCol(builder *flatbuffers.Builder, col uint32) {
	builder.PrependUint32Slot(2, col, 0)
}
func CmdRectRoundedFilledAddRounding(builder *flatbuffers.Builder, rounding float32) {
	builder.PrependFloat32Slot(3, rounding, 0.0)
}
func CmdRectRoundedFilledEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
