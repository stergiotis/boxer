// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package dto

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CmdImageQuad struct {
	_tab flatbuffers.Table
}

func GetRootAsCmdImageQuad(buf []byte, offset flatbuffers.UOffsetT) *CmdImageQuad {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CmdImageQuad{}
	x.Init(buf, n+offset)
	return x
}

func FinishCmdImageQuadBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCmdImageQuad(buf []byte, offset flatbuffers.UOffsetT) *CmdImageQuad {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CmdImageQuad{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCmdImageQuadBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CmdImageQuad) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CmdImageQuad) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CmdImageQuad) UserTextureId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CmdImageQuad) MutateUserTextureId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *CmdImageQuad) P1(obj *SingleVec2) *SingleVec2 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(SingleVec2)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CmdImageQuad) P2(obj *SingleVec2) *SingleVec2 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(SingleVec2)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CmdImageQuad) P3(obj *SingleVec2) *SingleVec2 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(SingleVec2)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CmdImageQuad) P4(obj *SingleVec2) *SingleVec2 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(SingleVec2)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CmdImageQuad) Uv1(obj *SingleVec2) *SingleVec2 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(SingleVec2)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CmdImageQuad) Uv2(obj *SingleVec2) *SingleVec2 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(SingleVec2)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CmdImageQuad) Uv3(obj *SingleVec2) *SingleVec2 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(SingleVec2)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CmdImageQuad) Uv4(obj *SingleVec2) *SingleVec2 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(SingleVec2)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CmdImageQuad) Col() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CmdImageQuad) MutateCol(n uint32) bool {
	return rcv._tab.MutateUint32Slot(22, n)
}

func CmdImageQuadStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func CmdImageQuadAddUserTextureId(builder *flatbuffers.Builder, userTextureId uint64) {
	builder.PrependUint64Slot(0, userTextureId, 0)
}
func CmdImageQuadAddP1(builder *flatbuffers.Builder, p1 flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(p1), 0)
}
func CmdImageQuadAddP2(builder *flatbuffers.Builder, p2 flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(p2), 0)
}
func CmdImageQuadAddP3(builder *flatbuffers.Builder, p3 flatbuffers.UOffsetT) {
	builder.PrependStructSlot(3, flatbuffers.UOffsetT(p3), 0)
}
func CmdImageQuadAddP4(builder *flatbuffers.Builder, p4 flatbuffers.UOffsetT) {
	builder.PrependStructSlot(4, flatbuffers.UOffsetT(p4), 0)
}
func CmdImageQuadAddUv1(builder *flatbuffers.Builder, uv1 flatbuffers.UOffsetT) {
	builder.PrependStructSlot(5, flatbuffers.UOffsetT(uv1), 0)
}
func CmdImageQuadAddUv2(builder *flatbuffers.Builder, uv2 flatbuffers.UOffsetT) {
	builder.PrependStructSlot(6, flatbuffers.UOffsetT(uv2), 0)
}
func CmdImageQuadAddUv3(builder *flatbuffers.Builder, uv3 flatbuffers.UOffsetT) {
	builder.PrependStructSlot(7, flatbuffers.UOffsetT(uv3), 0)
}
func CmdImageQuadAddUv4(builder *flatbuffers.Builder, uv4 flatbuffers.UOffsetT) {
	builder.PrependStructSlot(8, flatbuffers.UOffsetT(uv4), 0)
}
func CmdImageQuadAddCol(builder *flatbuffers.Builder, col uint32) {
	builder.PrependUint32Slot(9, col, 0)
}
func CmdImageQuadEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
