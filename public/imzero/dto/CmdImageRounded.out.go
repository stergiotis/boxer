// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package dto

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CmdImageRounded struct {
	_tab flatbuffers.Table
}

func GetRootAsCmdImageRounded(buf []byte, offset flatbuffers.UOffsetT) *CmdImageRounded {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CmdImageRounded{}
	x.Init(buf, n+offset)
	return x
}

func FinishCmdImageRoundedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCmdImageRounded(buf []byte, offset flatbuffers.UOffsetT) *CmdImageRounded {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CmdImageRounded{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCmdImageRoundedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CmdImageRounded) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CmdImageRounded) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CmdImageRounded) UserTextureId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CmdImageRounded) MutateUserTextureId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *CmdImageRounded) PMin(obj *SingleVec2) *SingleVec2 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(SingleVec2)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CmdImageRounded) PMax(obj *SingleVec2) *SingleVec2 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(SingleVec2)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CmdImageRounded) UvMin(obj *SingleVec2) *SingleVec2 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(SingleVec2)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CmdImageRounded) UvMax(obj *SingleVec2) *SingleVec2 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(SingleVec2)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CmdImageRounded) Col() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CmdImageRounded) MutateCol(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func (rcv *CmdImageRounded) Rounding() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CmdImageRounded) MutateRounding(n float32) bool {
	return rcv._tab.MutateFloat32Slot(16, n)
}

func (rcv *CmdImageRounded) Flags() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CmdImageRounded) MutateFlags(n uint32) bool {
	return rcv._tab.MutateUint32Slot(18, n)
}

func CmdImageRoundedStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func CmdImageRoundedAddUserTextureId(builder *flatbuffers.Builder, userTextureId uint64) {
	builder.PrependUint64Slot(0, userTextureId, 0)
}
func CmdImageRoundedAddPMin(builder *flatbuffers.Builder, pMin flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(pMin), 0)
}
func CmdImageRoundedAddPMax(builder *flatbuffers.Builder, pMax flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(pMax), 0)
}
func CmdImageRoundedAddUvMin(builder *flatbuffers.Builder, uvMin flatbuffers.UOffsetT) {
	builder.PrependStructSlot(3, flatbuffers.UOffsetT(uvMin), 0)
}
func CmdImageRoundedAddUvMax(builder *flatbuffers.Builder, uvMax flatbuffers.UOffsetT) {
	builder.PrependStructSlot(4, flatbuffers.UOffsetT(uvMax), 0)
}
func CmdImageRoundedAddCol(builder *flatbuffers.Builder, col uint32) {
	builder.PrependUint32Slot(5, col, 0)
}
func CmdImageRoundedAddRounding(builder *flatbuffers.Builder, rounding float32) {
	builder.PrependFloat32Slot(6, rounding, 0.0)
}
func CmdImageRoundedAddFlags(builder *flatbuffers.Builder, flags uint32) {
	builder.PrependUint32Slot(7, flags, 0)
}
func CmdImageRoundedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
