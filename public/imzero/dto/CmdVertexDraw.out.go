// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package dto

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CmdVertexDraw struct {
	_tab flatbuffers.Table
}

func GetRootAsCmdVertexDraw(buf []byte, offset flatbuffers.UOffsetT) *CmdVertexDraw {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CmdVertexDraw{}
	x.Init(buf, n+offset)
	return x
}

func FinishCmdVertexDrawBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCmdVertexDraw(buf []byte, offset flatbuffers.UOffsetT) *CmdVertexDraw {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CmdVertexDraw{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCmdVertexDrawBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CmdVertexDraw) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CmdVertexDraw) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CmdVertexDraw) ClipRect(obj *SingleVec4) *SingleVec4 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(SingleVec4)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CmdVertexDraw) ElementCount() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CmdVertexDraw) MutateElementCount(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *CmdVertexDraw) IndexOffset() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CmdVertexDraw) MutateIndexOffset(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *CmdVertexDraw) VtxOffset() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CmdVertexDraw) MutateVtxOffset(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func CmdVertexDrawStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func CmdVertexDrawAddClipRect(builder *flatbuffers.Builder, clipRect flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(clipRect), 0)
}
func CmdVertexDrawAddElementCount(builder *flatbuffers.Builder, elementCount uint32) {
	builder.PrependUint32Slot(1, elementCount, 0)
}
func CmdVertexDrawAddIndexOffset(builder *flatbuffers.Builder, indexOffset uint32) {
	builder.PrependUint32Slot(2, indexOffset, 0)
}
func CmdVertexDrawAddVtxOffset(builder *flatbuffers.Builder, vtxOffset uint32) {
	builder.PrependUint32Slot(3, vtxOffset, 0)
}
func CmdVertexDrawEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
