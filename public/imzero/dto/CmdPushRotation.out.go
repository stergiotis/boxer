// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package dto

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CmdPushRotation struct {
	_tab flatbuffers.Table
}

func GetRootAsCmdPushRotation(buf []byte, offset flatbuffers.UOffsetT) *CmdPushRotation {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CmdPushRotation{}
	x.Init(buf, n+offset)
	return x
}

func FinishCmdPushRotationBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCmdPushRotation(buf []byte, offset flatbuffers.UOffsetT) *CmdPushRotation {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CmdPushRotation{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCmdPushRotationBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CmdPushRotation) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CmdPushRotation) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CmdPushRotation) CosAlpha() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CmdPushRotation) MutateCosAlpha(n float32) bool {
	return rcv._tab.MutateFloat32Slot(4, n)
}

func (rcv *CmdPushRotation) SinAlpha() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CmdPushRotation) MutateSinAlpha(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func CmdPushRotationStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func CmdPushRotationAddCosAlpha(builder *flatbuffers.Builder, cosAlpha float32) {
	builder.PrependFloat32Slot(0, cosAlpha, 0.0)
}
func CmdPushRotationAddSinAlpha(builder *flatbuffers.Builder, sinAlpha float32) {
	builder.PrependFloat32Slot(1, sinAlpha, 0.0)
}
func CmdPushRotationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
