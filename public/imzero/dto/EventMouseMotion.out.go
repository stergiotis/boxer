// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package dto

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventMouseMotion struct {
	_tab flatbuffers.Table
}

func GetRootAsEventMouseMotion(buf []byte, offset flatbuffers.UOffsetT) *EventMouseMotion {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventMouseMotion{}
	x.Init(buf, n+offset)
	return x
}

func FinishEventMouseMotionBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsEventMouseMotion(buf []byte, offset flatbuffers.UOffsetT) *EventMouseMotion {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventMouseMotion{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEventMouseMotionBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *EventMouseMotion) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventMouseMotion) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventMouseMotion) Pos(obj *SingleVec2) *SingleVec2 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(SingleVec2)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *EventMouseMotion) MouseId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EventMouseMotion) MutateMouseId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *EventMouseMotion) IsTouch() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EventMouseMotion) MutateIsTouch(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func EventMouseMotionStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func EventMouseMotionAddPos(builder *flatbuffers.Builder, pos flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(pos), 0)
}
func EventMouseMotionAddMouseId(builder *flatbuffers.Builder, mouseId uint32) {
	builder.PrependUint32Slot(1, mouseId, 0)
}
func EventMouseMotionAddIsTouch(builder *flatbuffers.Builder, isTouch bool) {
	builder.PrependBoolSlot(2, isTouch, false)
}
func EventMouseMotionEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
