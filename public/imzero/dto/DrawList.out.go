// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package dto

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DrawList struct {
	_tab flatbuffers.Table
}

func GetRootAsDrawList(buf []byte, offset flatbuffers.UOffsetT) *DrawList {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DrawList{}
	x.Init(buf, n+offset)
	return x
}

func FinishDrawListBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDrawList(buf []byte, offset flatbuffers.UOffsetT) *DrawList {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DrawList{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDrawListBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *DrawList) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DrawList) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DrawList) Flags() DrawListFlags {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return DrawListFlags(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *DrawList) MutateFlags(n DrawListFlags) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *DrawList) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DrawList) Vertices(obj *VertexData) *VertexData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(VertexData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DrawList) Cmds(obj *SingleVectorCmdDto, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *DrawList) CmdsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func DrawListStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func DrawListAddFlags(builder *flatbuffers.Builder, flags DrawListFlags) {
	builder.PrependByteSlot(0, byte(flags), 0)
}
func DrawListAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func DrawListAddVertices(builder *flatbuffers.Builder, vertices flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(vertices), 0)
}
func DrawListAddCmds(builder *flatbuffers.Builder, cmds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(cmds), 0)
}
func DrawListStartCmdsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DrawListEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
