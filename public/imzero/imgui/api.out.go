// Code generated by fffi generator; DO NOT EDIT.
// -- deactivated -- // //go:build fffi_idl_code

package imgui

import "github.com/stergiotis/boxer/public/fffi/runtime"

func Checkbox(label string, state Tristate) (checked Tristate, clicked bool) {

	_f := currentFffiVar
	_f.AddFunctionId(0x00000000)
	runtime.AddStringArg(_f, label)
	runtime.AddInt8Arg(_f, state)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	checked = Tristate(runtime.GetInt8Retr[int8](_f))
	clicked = (runtime.GetBoolRetr[bool](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func ColoredButtonV(label string, size ImVec2, text_color uint32, bg_color1 uint32, bg_color2 uint32) (r bool) {

	_f := currentFffiVar
	_f.AddFunctionId(0x00000001)
	runtime.AddStringArg(_f, label)
	runtime.AddComplex64Arg(_f, size)
	runtime.AddUint32Arg(_f, text_color)
	runtime.AddUint32Arg(_f, bg_color1)
	runtime.AddUint32Arg(_f, bg_color2)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))
	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func ColorEdit3(label string, colP [3]float32, flags ImGuiColorEditFlags) (col [3]float32, changed bool) {

	_f := currentFffiVar
	_f.AddFunctionId(0x00000002)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Array3Arg(_f, colP)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	col = (runtime.GetFloat32Array3Retr[float32](_f))
	changed = (runtime.GetBoolRetr[bool](_f))
	return
}

func ColorEdit4(label string, colP ImVec4, flags ImGuiColorEditFlags) (col ImVec4, changed bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000003)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Array4Arg(_f, colP)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	col = ImVec4(runtime.GetFloat32Array4Retr[float32](_f))
	changed = (runtime.GetBoolRetr[bool](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func GetItemStatus() (status ItemStatusE) {

	_f := currentFffiVar
	_f.AddFunctionId(0x00000004)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	status = ItemStatusE(runtime.GetUint16Retr[uint16](_f))
	return
}

func GetItemStatusV(primary ImGuiHoveredFlags, secondary ImGuiHoveredFlags) (status ItemStatusE) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000005)
	runtime.AddIntArg(_f, primary)
	runtime.AddIntArg(_f, secondary)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	status = ItemStatusE(runtime.GetUint16Retr[uint16](_f))

	return
}

func CurrentCursorPos() (r ImVec2) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000006)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImVec2(runtime.GetComplex64Retr[complex64](_f))

	return
}

func GetContentRegionMaxAbs() (r ImVec2) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000007)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImVec2(runtime.GetComplex64Retr[complex64](_f))

	return
}

func BeginCustomWidget() (visible bool, currentWindowDrawList ImDrawListPtr, pos ImVec2, availableRegion ImVec2, keyboardNavActive bool, seed ImGuiID) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000008)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	visible = (runtime.GetBoolRetr[bool](_f))
	currentWindowDrawList = ImDrawListPtr(runtime.GetUintptrRetr[uintptr](_f))
	pos = ImVec2(runtime.GetComplex64Retr[complex64](_f))
	availableRegion = ImVec2(runtime.GetComplex64Retr[complex64](_f))
	keyboardNavActive = (runtime.GetBoolRetr[bool](_f))
	seed = ImGuiID(runtime.GetUint32Retr[uint32](_f))

	return
}

func SetTooltip(str string) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000009)
	runtime.AddStringArg(_f, str)
	_f.CallProcedure()

}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func MakeImCoolBarConfig() (r ImCoolBarConfigForeignPtr) {

	_f := currentFffiVar
	_f.AddFunctionId(0x0000000a)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImCoolBarConfigForeignPtr(runtime.GetUintptrRetr[uintptr](_f))
	return
}

func MakeImCoolBarConfigV(anchor ImVec2, normalSize float32, hoveredSize float32, animStep float32, effectStrength float32) (r ImCoolBarConfigForeignPtr) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000000b)
	runtime.AddComplex64Arg(_f, anchor)
	runtime.AddFloat32Arg(_f, normalSize)
	runtime.AddFloat32Arg(_f, hoveredSize)
	runtime.AddFloat32Arg(_f, animStep)
	runtime.AddFloat32Arg(_f, effectStrength)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImCoolBarConfigForeignPtr(runtime.GetUintptrRetr[uintptr](_f))

	return
}

func DestroyImCoolBarConfig(cfg ImCoolBarConfigForeignPtr) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000000c)
	runtime.AddUintptrArg(_f, cfg)
	_f.CallProcedure()

}

func (foreignptr ImCoolBarConfigForeignPtr) Get() (anchor ImVec2, normalSize float32, hoveredSize float32, animStep float32, effectStrength float32) {
	_f := foreignptr.getFffi()
	_f.AddFunctionId(0x0000000d)
	runtime.AddUintptrArg(_f, foreignptr)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		foreignptr.handleError(_err_)
		return
	}
	anchor = ImVec2(runtime.GetComplex64Retr[complex64](_f))
	normalSize = (runtime.GetFloat32Retr[float32](_f))
	hoveredSize = (runtime.GetFloat32Retr[float32](_f))
	animStep = (runtime.GetFloat32Retr[float32](_f))
	effectStrength = (runtime.GetFloat32Retr[float32](_f))

	return
}

func (foreignptr ImCoolBarConfigForeignPtr) Set(anchor ImVec2, normalSize float32, hoveredSize float32, animStep float32, effectStrength float32) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x0000000e)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, anchor)
	runtime.AddFloat32Arg(_f, normalSize)
	runtime.AddFloat32Arg(_f, hoveredSize)
	runtime.AddFloat32Arg(_f, animStep)
	runtime.AddFloat32Arg(_f, effectStrength)
	_f.CallProcedure()

}

func BeginCoolBar(label string) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000000f)
	runtime.AddStringArg(_f, label)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func BeginCoolBarV(label string, flags ImCoolBarFlags, cfg ImCoolBarConfigForeignPtr, windowFlags ImGuiWindowFlags) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000010)
	runtime.AddStringArg(_f, label)
	runtime.AddIntArg(_f, flags)
	runtime.AddUintptrArg(_f, cfg)
	runtime.AddIntArg(_f, windowFlags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func EndCoolBar() {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000011)
	_f.CallProcedure()

}

func CoolBarItem() (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000012)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func CoolBarItemProperties() (width float32, scale float32) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000013)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	width = (runtime.GetFloat32Retr[float32](_f))
	scale = (runtime.GetFloat32Retr[float32](_f))

	return
}

func CoolBarButtons(fontPtr ImFontPtr, labels []string, tooltips []string) (clickedIndex int, hoveredIndex int) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000014)
	runtime.AddUintptrArg(_f, fontPtr)
	runtime.AddStringsArg(_f, labels)
	runtime.AddStringsArg(_f, tooltips)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	clickedIndex = (runtime.GetIntRetr[int](_f))
	hoveredIndex = (runtime.GetIntRetr[int](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func DragFloat32(label string, vP float32) (v float32, r bool) {

	_f := currentFffiVar
	_f.AddFunctionId(0x00000015)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, vP)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat32Retr[float32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragFloat32V(label string, vP float32, v_speed float32, p_min float32, p_max float32, format string, flags ImGuiSliderFlags) (v float32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000016)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, vP)
	runtime.AddFloat32Arg(_f, v_speed)
	runtime.AddFloat32Arg(_f, p_min)
	runtime.AddFloat32Arg(_f, p_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat32Retr[float32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragFloat32NV(label string, vP []float32, v_speed float32, v_min float32, v_max float32, format string, flags ImGuiSliderFlags) (v []float32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000017)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32SliceArg(_f, vP)
	runtime.AddFloat32Arg(_f, v_speed)
	runtime.AddFloat32Arg(_f, v_min)
	runtime.AddFloat32Arg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat32SliceRetr[float32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragFloat32N(label string, vP []float32) (v []float32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000018)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32SliceArg(_f, vP)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat32SliceRetr[float32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func DragFloat64(label string, vP float64) (v float64, r bool) {

	_f := currentFffiVar
	_f.AddFunctionId(0x00000019)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat64Arg(_f, vP)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat64Retr[float64](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragFloat64V(label string, vP float64, v_speed float32, p_min float64, p_max float64, format string, flags ImGuiSliderFlags) (v float64, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000001a)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat64Arg(_f, vP)
	runtime.AddFloat32Arg(_f, v_speed)
	runtime.AddFloat64Arg(_f, p_min)
	runtime.AddFloat64Arg(_f, p_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat64Retr[float64](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragFloat64NV(label string, vP []float64, v_speed float32, v_min float64, v_max float64, format string, flags ImGuiSliderFlags) (v []float64, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000001b)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat64SliceArg(_f, vP)
	runtime.AddFloat32Arg(_f, v_speed)
	runtime.AddFloat64Arg(_f, v_min)
	runtime.AddFloat64Arg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat64SliceRetr[float64](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragFloat64N(label string, vP []float64) (v []float64, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000001c)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat64SliceArg(_f, vP)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat64SliceRetr[float64](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func DragInt(label string, vP int) (v int, r bool) {

	_f := currentFffiVar
	_f.AddFunctionId(0x0000001d)
	runtime.AddStringArg(_f, label)
	runtime.AddIntArg(_f, vP)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetIntRetr[int](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragIntV(label string, vP int, v_speed float32, p_min int, p_max int, format string, flags ImGuiSliderFlags) (v int, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000001e)
	runtime.AddStringArg(_f, label)
	runtime.AddIntArg(_f, vP)
	runtime.AddFloat32Arg(_f, v_speed)
	runtime.AddIntArg(_f, p_min)
	runtime.AddIntArg(_f, p_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetIntRetr[int](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragIntNV(label string, vP []int, v_speed float32, v_min int, v_max int, format string, flags ImGuiSliderFlags) (v []int, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000001f)
	runtime.AddStringArg(_f, label)
	runtime.AddIntSliceArg(_f, vP)
	runtime.AddFloat32Arg(_f, v_speed)
	runtime.AddIntArg(_f, v_min)
	runtime.AddIntArg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetIntSliceRetr[int](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragIntN(label string, vP []int) (v []int, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000020)
	runtime.AddStringArg(_f, label)
	runtime.AddIntSliceArg(_f, vP)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetIntSliceRetr[int](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func DragInt16(label string, vP int16) (v int16, r bool) {

	_f := currentFffiVar
	_f.AddFunctionId(0x00000021)
	runtime.AddStringArg(_f, label)
	runtime.AddInt16Arg(_f, vP)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetInt16Retr[int16](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragInt16V(label string, vP int16, v_speed float32, p_min int16, p_max int16, format string, flags ImGuiSliderFlags) (v int16, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000022)
	runtime.AddStringArg(_f, label)
	runtime.AddInt16Arg(_f, vP)
	runtime.AddFloat32Arg(_f, v_speed)
	runtime.AddInt16Arg(_f, p_min)
	runtime.AddInt16Arg(_f, p_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetInt16Retr[int16](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragInt16NV(label string, vP []int16, v_speed float32, v_min int16, v_max int16, format string, flags ImGuiSliderFlags) (v []int16, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000023)
	runtime.AddStringArg(_f, label)
	runtime.AddInt16SliceArg(_f, vP)
	runtime.AddFloat32Arg(_f, v_speed)
	runtime.AddInt16Arg(_f, v_min)
	runtime.AddInt16Arg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetInt16SliceRetr[int16](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragInt16N(label string, vP []int16) (v []int16, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000024)
	runtime.AddStringArg(_f, label)
	runtime.AddInt16SliceArg(_f, vP)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetInt16SliceRetr[int16](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func DragInt32(label string, vP int32) (v int32, r bool) {

	_f := currentFffiVar
	_f.AddFunctionId(0x00000025)
	runtime.AddStringArg(_f, label)
	runtime.AddInt32Arg(_f, vP)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetInt32Retr[int32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragInt32V(label string, vP int32, v_speed float32, p_min int32, p_max int32, format string, flags ImGuiSliderFlags) (v int32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000026)
	runtime.AddStringArg(_f, label)
	runtime.AddInt32Arg(_f, vP)
	runtime.AddFloat32Arg(_f, v_speed)
	runtime.AddInt32Arg(_f, p_min)
	runtime.AddInt32Arg(_f, p_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetInt32Retr[int32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragInt32NV(label string, vP []int32, v_speed float32, v_min int32, v_max int32, format string, flags ImGuiSliderFlags) (v []int32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000027)
	runtime.AddStringArg(_f, label)
	runtime.AddInt32SliceArg(_f, vP)
	runtime.AddFloat32Arg(_f, v_speed)
	runtime.AddInt32Arg(_f, v_min)
	runtime.AddInt32Arg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetInt32SliceRetr[int32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragInt32N(label string, vP []int32) (v []int32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000028)
	runtime.AddStringArg(_f, label)
	runtime.AddInt32SliceArg(_f, vP)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetInt32SliceRetr[int32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func DragInt8(label string, vP int8) (v int8, r bool) {

	_f := currentFffiVar
	_f.AddFunctionId(0x00000029)
	runtime.AddStringArg(_f, label)
	runtime.AddInt8Arg(_f, vP)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetInt8Retr[int8](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragInt8V(label string, vP int8, v_speed float32, p_min int8, p_max int8, format string, flags ImGuiSliderFlags) (v int8, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000002a)
	runtime.AddStringArg(_f, label)
	runtime.AddInt8Arg(_f, vP)
	runtime.AddFloat32Arg(_f, v_speed)
	runtime.AddInt8Arg(_f, p_min)
	runtime.AddInt8Arg(_f, p_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetInt8Retr[int8](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragInt8NV(label string, vP []int8, v_speed float32, v_min int8, v_max int8, format string, flags ImGuiSliderFlags) (v []int8, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000002b)
	runtime.AddStringArg(_f, label)
	runtime.AddInt8SliceArg(_f, vP)
	runtime.AddFloat32Arg(_f, v_speed)
	runtime.AddInt8Arg(_f, v_min)
	runtime.AddInt8Arg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetInt8SliceRetr[int8](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragInt8N(label string, vP []int8) (v []int8, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000002c)
	runtime.AddStringArg(_f, label)
	runtime.AddInt8SliceArg(_f, vP)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetInt8SliceRetr[int8](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func DragUInt(label string, vP uint) (v uint, r bool) {

	_f := currentFffiVar
	_f.AddFunctionId(0x0000002d)
	runtime.AddStringArg(_f, label)
	runtime.AddUintArg(_f, vP)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUintRetr[uint](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragUIntV(label string, vP uint, v_speed float32, p_min uint, p_max uint, format string, flags ImGuiSliderFlags) (v uint, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000002e)
	runtime.AddStringArg(_f, label)
	runtime.AddUintArg(_f, vP)
	runtime.AddFloat32Arg(_f, v_speed)
	runtime.AddUintArg(_f, p_min)
	runtime.AddUintArg(_f, p_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUintRetr[uint](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragUIntNV(label string, vP []uint, v_speed float32, v_min uint, v_max uint, format string, flags ImGuiSliderFlags) (v []uint, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000002f)
	runtime.AddStringArg(_f, label)
	runtime.AddUintSliceArg(_f, vP)
	runtime.AddFloat32Arg(_f, v_speed)
	runtime.AddUintArg(_f, v_min)
	runtime.AddUintArg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUintSliceRetr[uint](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragUIntN(label string, vP []uint) (v []uint, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000030)
	runtime.AddStringArg(_f, label)
	runtime.AddUintSliceArg(_f, vP)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUintSliceRetr[uint](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func DragUInt16(label string, vP uint16) (v uint16, r bool) {

	_f := currentFffiVar
	_f.AddFunctionId(0x00000031)
	runtime.AddStringArg(_f, label)
	runtime.AddUint16Arg(_f, vP)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUint16Retr[uint16](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragUInt16V(label string, vP uint16, v_speed float32, p_min uint16, p_max uint16, format string, flags ImGuiSliderFlags) (v uint16, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000032)
	runtime.AddStringArg(_f, label)
	runtime.AddUint16Arg(_f, vP)
	runtime.AddFloat32Arg(_f, v_speed)
	runtime.AddUint16Arg(_f, p_min)
	runtime.AddUint16Arg(_f, p_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUint16Retr[uint16](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragUInt16NV(label string, vP []uint16, v_speed float32, v_min uint16, v_max uint16, format string, flags ImGuiSliderFlags) (v []uint16, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000033)
	runtime.AddStringArg(_f, label)
	runtime.AddUint16SliceArg(_f, vP)
	runtime.AddFloat32Arg(_f, v_speed)
	runtime.AddUint16Arg(_f, v_min)
	runtime.AddUint16Arg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUint16SliceRetr[uint16](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragUInt16N(label string, vP []uint16) (v []uint16, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000034)
	runtime.AddStringArg(_f, label)
	runtime.AddUint16SliceArg(_f, vP)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUint16SliceRetr[uint16](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func DragUInt32(label string, vP uint32) (v uint32, r bool) {

	_f := currentFffiVar
	_f.AddFunctionId(0x00000035)
	runtime.AddStringArg(_f, label)
	runtime.AddUint32Arg(_f, vP)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUint32Retr[uint32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragUInt32V(label string, vP uint32, v_speed float32, p_min uint32, p_max uint32, format string, flags ImGuiSliderFlags) (v uint32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000036)
	runtime.AddStringArg(_f, label)
	runtime.AddUint32Arg(_f, vP)
	runtime.AddFloat32Arg(_f, v_speed)
	runtime.AddUint32Arg(_f, p_min)
	runtime.AddUint32Arg(_f, p_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUint32Retr[uint32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragUInt32NV(label string, vP []uint32, v_speed float32, v_min uint32, v_max uint32, format string, flags ImGuiSliderFlags) (v []uint32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000037)
	runtime.AddStringArg(_f, label)
	runtime.AddUint32SliceArg(_f, vP)
	runtime.AddFloat32Arg(_f, v_speed)
	runtime.AddUint32Arg(_f, v_min)
	runtime.AddUint32Arg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUint32SliceRetr[uint32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragUInt32N(label string, vP []uint32) (v []uint32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000038)
	runtime.AddStringArg(_f, label)
	runtime.AddUint32SliceArg(_f, vP)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUint32SliceRetr[uint32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func DragUInt8(label string, vP uint8) (v uint8, r bool) {

	_f := currentFffiVar
	_f.AddFunctionId(0x00000039)
	runtime.AddStringArg(_f, label)
	runtime.AddUint8Arg(_f, vP)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUint8Retr[uint8](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragUInt8V(label string, vP uint8, v_speed float32, p_min uint8, p_max uint8, format string, flags ImGuiSliderFlags) (v uint8, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000003a)
	runtime.AddStringArg(_f, label)
	runtime.AddUint8Arg(_f, vP)
	runtime.AddFloat32Arg(_f, v_speed)
	runtime.AddUint8Arg(_f, p_min)
	runtime.AddUint8Arg(_f, p_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUint8Retr[uint8](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragUInt8NV(label string, vP []uint8, v_speed float32, v_min uint8, v_max uint8, format string, flags ImGuiSliderFlags) (v []uint8, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000003b)
	runtime.AddStringArg(_f, label)
	runtime.AddUint8SliceArg(_f, vP)
	runtime.AddFloat32Arg(_f, v_speed)
	runtime.AddUint8Arg(_f, v_min)
	runtime.AddUint8Arg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUint8SliceRetr[uint8](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragUInt8N(label string, vP []uint8) (v []uint8, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000003c)
	runtime.AddStringArg(_f, label)
	runtime.AddUint8SliceArg(_f, vP)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUint8SliceRetr[uint8](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func DragFloat(label string, vP float32) (v float32, r bool) {

	_f := currentFffiVar
	_f.AddFunctionId(0x0000003d)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, vP)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat32Retr[float32](_f))
	r = (runtime.GetBoolRetr[bool](_f))
	return
}

func DragFloatV(label string, vP float32, v_speed float32, v_min float32, v_max float32, format string, flags ImGuiSliderFlags) (v float32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000003e)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, vP)
	runtime.AddFloat32Arg(_f, v_speed)
	runtime.AddFloat32Arg(_f, v_min)
	runtime.AddFloat32Arg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat32Retr[float32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragFloat2(label string, vP [2]float32) (v [2]float32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000003f)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Array2Arg(_f, vP)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat32Array2Retr[float32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragFloat2V(label string, vP [2]float32, v_speed float32, v_min float32, v_max float32, format string, flags ImGuiSliderFlags) (v [2]float32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000040)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Array2Arg(_f, vP)
	runtime.AddFloat32Arg(_f, v_speed)
	runtime.AddFloat32Arg(_f, v_min)
	runtime.AddFloat32Arg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat32Array2Retr[float32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragFloat3(label string, vP [3]float32) (v [2]float32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000041)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Array3Arg(_f, vP)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat32Array2Retr[float32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragFloat3V(label string, vP [3]float32, v_speed float32, v_min float32, v_max float32, format string, flags ImGuiSliderFlags) (v [4]float32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000042)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Array3Arg(_f, vP)
	runtime.AddFloat32Arg(_f, v_speed)
	runtime.AddFloat32Arg(_f, v_min)
	runtime.AddFloat32Arg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat32Array4Retr[float32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragFloat4(label string, vP [4]float32) (v [4]float32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000043)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Array4Arg(_f, vP)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat32Array4Retr[float32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragFloat4V(label string, vP [4]float32, v_speed float32, v_min float32, v_max float32, format string, flags ImGuiSliderFlags) (v [4]float32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000044)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Array4Arg(_f, vP)
	runtime.AddFloat32Arg(_f, v_speed)
	runtime.AddFloat32Arg(_f, v_min)
	runtime.AddFloat32Arg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat32Array4Retr[float32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragInt2(label string, vP [2]int) (v [2]int, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000045)
	runtime.AddStringArg(_f, label)
	runtime.AddIntArray2Arg(_f, vP)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetIntArray2Retr[int](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragInt2V(label string, vP [2]int, v_speed float32, v_min int, v_max int, format string, flags ImGuiSliderFlags) (v [2]int, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000046)
	runtime.AddStringArg(_f, label)
	runtime.AddIntArray2Arg(_f, vP)
	runtime.AddFloat32Arg(_f, v_speed)
	runtime.AddIntArg(_f, v_min)
	runtime.AddIntArg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetIntArray2Retr[int](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragInt3(label string, vP [3]int) (v [2]int, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000047)
	runtime.AddStringArg(_f, label)
	runtime.AddIntArray3Arg(_f, vP)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetIntArray2Retr[int](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragInt3V(label string, vP [3]int, v_speed float32, v_min int, v_max int, format string, flags ImGuiSliderFlags) (v [4]int, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000048)
	runtime.AddStringArg(_f, label)
	runtime.AddIntArray3Arg(_f, vP)
	runtime.AddFloat32Arg(_f, v_speed)
	runtime.AddIntArg(_f, v_min)
	runtime.AddIntArg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetIntArray4Retr[int](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragInt4(label string, vP [4]int) (v [4]int, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000049)
	runtime.AddStringArg(_f, label)
	runtime.AddIntArray4Arg(_f, vP)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetIntArray4Retr[int](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func DragInt4V(label string, vP [4]int, v_speed float32, v_min int, v_max int, format string, flags ImGuiSliderFlags) (v [4]int, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000004a)
	runtime.AddStringArg(_f, label)
	runtime.AddIntArray4Arg(_f, vP)
	runtime.AddFloat32Arg(_f, v_speed)
	runtime.AddIntArg(_f, v_min)
	runtime.AddIntArg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetIntArray4Retr[int](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderFloat(label string, vP float32, v_min float32, v_max float32) (v float32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000004b)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, vP)
	runtime.AddFloat32Arg(_f, v_min)
	runtime.AddFloat32Arg(_f, v_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat32Retr[float32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderFloatV(label string, vP float32, v_min float32, v_max float32, format string, flags ImGuiSliderFlags) (v float32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000004c)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, vP)
	runtime.AddFloat32Arg(_f, v_min)
	runtime.AddFloat32Arg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat32Retr[float32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderFloat2(label string, vP [2]float32, v_min float32, v_max float32) (v [2]float32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000004d)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Array2Arg(_f, vP)
	runtime.AddFloat32Arg(_f, v_min)
	runtime.AddFloat32Arg(_f, v_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat32Array2Retr[float32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderFloat2V(label string, vP [2]float32, v_min float32, v_max float32, format string, flags ImGuiSliderFlags) (v [2]float32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000004e)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Array2Arg(_f, vP)
	runtime.AddFloat32Arg(_f, v_min)
	runtime.AddFloat32Arg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat32Array2Retr[float32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderFloat3(label string, vP [3]float32, v_min float32, v_max float32) (v [2]float32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000004f)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Array3Arg(_f, vP)
	runtime.AddFloat32Arg(_f, v_min)
	runtime.AddFloat32Arg(_f, v_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat32Array2Retr[float32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderFloat3V(label string, vP [3]float32, v_min float32, v_max float32, format string, flags ImGuiSliderFlags) (v [4]float32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000050)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Array3Arg(_f, vP)
	runtime.AddFloat32Arg(_f, v_min)
	runtime.AddFloat32Arg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat32Array4Retr[float32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderFloat4(label string, vP [4]float32, v_min float32, v_max float32) (v [4]float32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000051)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Array4Arg(_f, vP)
	runtime.AddFloat32Arg(_f, v_min)
	runtime.AddFloat32Arg(_f, v_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat32Array4Retr[float32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderFloat4V(label string, vP [4]float32, v_min float32, v_max float32, format string, flags ImGuiSliderFlags) (v [4]float32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000052)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Array4Arg(_f, vP)
	runtime.AddFloat32Arg(_f, v_min)
	runtime.AddFloat32Arg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat32Array4Retr[float32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderInt2(label string, vP [2]int, v_min int, v_max int) (v [2]int, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000053)
	runtime.AddStringArg(_f, label)
	runtime.AddIntArray2Arg(_f, vP)
	runtime.AddIntArg(_f, v_min)
	runtime.AddIntArg(_f, v_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetIntArray2Retr[int](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderInt2V(label string, vP [2]int, v_min int, v_max int, format string, flags ImGuiSliderFlags) (v [2]int, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000054)
	runtime.AddStringArg(_f, label)
	runtime.AddIntArray2Arg(_f, vP)
	runtime.AddIntArg(_f, v_min)
	runtime.AddIntArg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetIntArray2Retr[int](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderInt3(label string, vP [3]int, v_min int, v_max int) (v [2]int, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000055)
	runtime.AddStringArg(_f, label)
	runtime.AddIntArray3Arg(_f, vP)
	runtime.AddIntArg(_f, v_min)
	runtime.AddIntArg(_f, v_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetIntArray2Retr[int](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderInt3V(label string, vP [3]int, v_min int, v_max int, format string, flags ImGuiSliderFlags) (v [4]int, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000056)
	runtime.AddStringArg(_f, label)
	runtime.AddIntArray3Arg(_f, vP)
	runtime.AddIntArg(_f, v_min)
	runtime.AddIntArg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetIntArray4Retr[int](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderInt4(label string, vP [4]int, v_min int, v_max int) (v [4]int, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000057)
	runtime.AddStringArg(_f, label)
	runtime.AddIntArray4Arg(_f, vP)
	runtime.AddIntArg(_f, v_min)
	runtime.AddIntArg(_f, v_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetIntArray4Retr[int](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderInt4V(label string, vP [4]int, v_min int, v_max int, format string, flags ImGuiSliderFlags) (v [4]int, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000058)
	runtime.AddStringArg(_f, label)
	runtime.AddIntArray4Arg(_f, vP)
	runtime.AddIntArg(_f, v_min)
	runtime.AddIntArg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetIntArray4Retr[int](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code
// -- deactivated -- // package imgui

// PushClipRect Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling)
//foreign code:
//  ((ImDrawList*)foreignptr)->PushClipRect(clip_rect_min, clip_rect_max)
func (foreignptr ImDrawListPtr) PushClipRect(clip_rect_min ImVec2, clip_rect_max ImVec2) {

	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000059)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, clip_rect_min)
	runtime.AddComplex64Arg(_f, clip_rect_max)
	_f.CallProcedure()
}

// PushClipRectV Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling)
// * intersect_with_current_clip_rect bool = false
//foreign code:
//  ((ImDrawList*)foreignptr)->PushClipRect(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect)
func (foreignptr ImDrawListPtr) PushClipRectV(clip_rect_min ImVec2, clip_rect_max ImVec2, intersect_with_current_clip_rect bool /* = false*/) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x0000005a)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, clip_rect_min)
	runtime.AddComplex64Arg(_f, clip_rect_max)
	runtime.AddBoolArg(_f, intersect_with_current_clip_rect)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) PushClipRectFullScreen() {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x0000005b)
	runtime.AddUintptrArg(_f, foreignptr)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) PopClipRect() {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x0000005c)
	runtime.AddUintptrArg(_f, foreignptr)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) PushTextureID(texture_id ImTextureID) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x0000005d)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddUintptrArg(_f, texture_id)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) PopTextureID() {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x0000005e)
	runtime.AddUintptrArg(_f, foreignptr)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) AddLine(p1 ImVec2, p2 ImVec2, col uint32) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x0000005f)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, p1)
	runtime.AddComplex64Arg(_f, p2)
	runtime.AddUint32Arg(_f, col)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) AddLineV(p1 ImVec2, p2 ImVec2, col uint32, thickness float32 /* = 1.0f*/) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000060)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, p1)
	runtime.AddComplex64Arg(_f, p2)
	runtime.AddUint32Arg(_f, col)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

// AddRect a: upper-left, b: lower-right (== upper-left + size)
//foreign code:
//  ((ImDrawList*)foreignptr)->AddRect(p_min, p_max, col)
func (foreignptr ImDrawListPtr) AddRect(p_min ImVec2, p_max ImVec2, col uint32) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000061)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, p_min)
	runtime.AddComplex64Arg(_f, p_max)
	runtime.AddUint32Arg(_f, col)
	_f.CallProcedure()

}

// AddRectV a: upper-left, b: lower-right (== upper-left + size)
// * rounding float = 0.0f
// * flags ImDrawFlags = 0
// * thickness float = 1.0f
//foreign code:
//  ((ImDrawList*)foreignptr)->AddRect(p_min, p_max, col, rounding, flags, thickness)
func (foreignptr ImDrawListPtr) AddRectV(p_min ImVec2, p_max ImVec2, col uint32, rounding float32 /* = 0.0f*/, flags ImDrawFlags /* = 0*/, thickness float32 /* = 1.0f*/) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000062)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, p_min)
	runtime.AddComplex64Arg(_f, p_max)
	runtime.AddUint32Arg(_f, col)
	runtime.AddFloat32Arg(_f, rounding)
	runtime.AddIntArg(_f, flags)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

// AddRectFilled a: upper-left, b: lower-right (== upper-left + size)
//foreign code:
//  ((ImDrawList*)foreignptr)->AddRectFilled(p_min, p_max, col)
func (foreignptr ImDrawListPtr) AddRectFilled(p_min ImVec2, p_max ImVec2, col uint32) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000063)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, p_min)
	runtime.AddComplex64Arg(_f, p_max)
	runtime.AddUint32Arg(_f, col)
	_f.CallProcedure()

}

// AddRectFilledV a: upper-left, b: lower-right (== upper-left + size)
// * rounding float = 0.0f
// * flags ImDrawFlags = 0
//foreign code:
//  ((ImDrawList*)foreignptr)->AddRectFilled(p_min, p_max, col, rounding, flags)
func (foreignptr ImDrawListPtr) AddRectFilledV(p_min ImVec2, p_max ImVec2, col uint32, rounding float32 /* = 0.0f*/, flags ImDrawFlags /* = 0*/) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000064)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, p_min)
	runtime.AddComplex64Arg(_f, p_max)
	runtime.AddUint32Arg(_f, col)
	runtime.AddFloat32Arg(_f, rounding)
	runtime.AddIntArg(_f, flags)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) AddRectFilledMultiColor(p_min ImVec2, p_max ImVec2, col_upr_left uint32, col_upr_right uint32, col_bot_right uint32, col_bot_left uint32) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000065)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, p_min)
	runtime.AddComplex64Arg(_f, p_max)
	runtime.AddUint32Arg(_f, col_upr_left)
	runtime.AddUint32Arg(_f, col_upr_right)
	runtime.AddUint32Arg(_f, col_bot_right)
	runtime.AddUint32Arg(_f, col_bot_left)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) AddQuad(p1 ImVec2, p2 ImVec2, p3 ImVec2, p4 ImVec2, col uint32) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000066)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, p1)
	runtime.AddComplex64Arg(_f, p2)
	runtime.AddComplex64Arg(_f, p3)
	runtime.AddComplex64Arg(_f, p4)
	runtime.AddUint32Arg(_f, col)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) AddQuadV(p1 ImVec2, p2 ImVec2, p3 ImVec2, p4 ImVec2, col uint32, thickness float32 /* = 1.0f*/) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000067)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, p1)
	runtime.AddComplex64Arg(_f, p2)
	runtime.AddComplex64Arg(_f, p3)
	runtime.AddComplex64Arg(_f, p4)
	runtime.AddUint32Arg(_f, col)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) AddQuadFilled(p1 ImVec2, p2 ImVec2, p3 ImVec2, p4 ImVec2, col uint32) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000068)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, p1)
	runtime.AddComplex64Arg(_f, p2)
	runtime.AddComplex64Arg(_f, p3)
	runtime.AddComplex64Arg(_f, p4)
	runtime.AddUint32Arg(_f, col)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) AddTriangle(p1 ImVec2, p2 ImVec2, p3 ImVec2, col uint32) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000069)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, p1)
	runtime.AddComplex64Arg(_f, p2)
	runtime.AddComplex64Arg(_f, p3)
	runtime.AddUint32Arg(_f, col)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) AddTriangleV(p1 ImVec2, p2 ImVec2, p3 ImVec2, col uint32, thickness float32 /* = 1.0f*/) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x0000006a)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, p1)
	runtime.AddComplex64Arg(_f, p2)
	runtime.AddComplex64Arg(_f, p3)
	runtime.AddUint32Arg(_f, col)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) AddTriangleFilled(p1 ImVec2, p2 ImVec2, p3 ImVec2, col uint32) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x0000006b)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, p1)
	runtime.AddComplex64Arg(_f, p2)
	runtime.AddComplex64Arg(_f, p3)
	runtime.AddUint32Arg(_f, col)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) AddCircle(center ImVec2, radius float32, col uint32) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x0000006c)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, center)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddUint32Arg(_f, col)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) AddCircleV(center ImVec2, radius float32, col uint32, num_segments int /* = 0*/, thickness float32 /* = 1.0f*/) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x0000006d)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, center)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddUint32Arg(_f, col)
	runtime.AddIntArg(_f, num_segments)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) AddCircleFilled(center ImVec2, radius float32, col uint32) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x0000006e)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, center)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddUint32Arg(_f, col)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) AddCircleFilledV(center ImVec2, radius float32, col uint32, num_segments int /* = 0*/) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x0000006f)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, center)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddUint32Arg(_f, col)
	runtime.AddIntArg(_f, num_segments)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) AddNgon(center ImVec2, radius float32, col uint32, num_segments int) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000070)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, center)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddUint32Arg(_f, col)
	runtime.AddIntArg(_f, num_segments)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) AddNgonV(center ImVec2, radius float32, col uint32, num_segments int, thickness float32 /* = 1.0f*/) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000071)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, center)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddUint32Arg(_f, col)
	runtime.AddIntArg(_f, num_segments)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) AddNgonFilled(center ImVec2, radius float32, col uint32, num_segments int) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000072)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, center)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddUint32Arg(_f, col)
	runtime.AddIntArg(_f, num_segments)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) AddEllipse(center ImVec2, radius_x float32, radius_y float32, col uint32) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000073)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, center)
	runtime.AddFloat32Arg(_f, radius_x)
	runtime.AddFloat32Arg(_f, radius_y)
	runtime.AddUint32Arg(_f, col)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) AddEllipseV(center ImVec2, radius_x float32, radius_y float32, col uint32, rot float32 /* = 0.0f*/, num_segments int /* = 0*/, thickness float32 /* = 1.0f*/) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000074)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, center)
	runtime.AddFloat32Arg(_f, radius_x)
	runtime.AddFloat32Arg(_f, radius_y)
	runtime.AddUint32Arg(_f, col)
	runtime.AddFloat32Arg(_f, rot)
	runtime.AddIntArg(_f, num_segments)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) AddEllipseFilled(center ImVec2, radius_x float32, radius_y float32, col uint32) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000075)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, center)
	runtime.AddFloat32Arg(_f, radius_x)
	runtime.AddFloat32Arg(_f, radius_y)
	runtime.AddUint32Arg(_f, col)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) AddEllipseFilledV(center ImVec2, radius_x float32, radius_y float32, col uint32, rot float32 /* = 0.0f*/, num_segments int /* = 0*/) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000076)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, center)
	runtime.AddFloat32Arg(_f, radius_x)
	runtime.AddFloat32Arg(_f, radius_y)
	runtime.AddUint32Arg(_f, col)
	runtime.AddFloat32Arg(_f, rot)
	runtime.AddIntArg(_f, num_segments)
	_f.CallProcedure()

}

// AddBezierCubic Cubic Bezier (4 control points)
//foreign code:
//  ((ImDrawList*)foreignptr)->AddBezierCubic(p1, p2, p3, p4, col, thickness)
func (foreignptr ImDrawListPtr) AddBezierCubic(p1 ImVec2, p2 ImVec2, p3 ImVec2, p4 ImVec2, col uint32, thickness float32) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000077)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, p1)
	runtime.AddComplex64Arg(_f, p2)
	runtime.AddComplex64Arg(_f, p3)
	runtime.AddComplex64Arg(_f, p4)
	runtime.AddUint32Arg(_f, col)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

// AddBezierCubicV Cubic Bezier (4 control points)
// * num_segments int = 0
//foreign code:
//  ((ImDrawList*)foreignptr)->AddBezierCubic(p1, p2, p3, p4, col, thickness, num_segments)
func (foreignptr ImDrawListPtr) AddBezierCubicV(p1 ImVec2, p2 ImVec2, p3 ImVec2, p4 ImVec2, col uint32, thickness float32, num_segments int /* = 0*/) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000078)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, p1)
	runtime.AddComplex64Arg(_f, p2)
	runtime.AddComplex64Arg(_f, p3)
	runtime.AddComplex64Arg(_f, p4)
	runtime.AddUint32Arg(_f, col)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddIntArg(_f, num_segments)
	_f.CallProcedure()

}

// AddBezierQuadratic Quadratic Bezier (3 control points)
//foreign code:
//  ((ImDrawList*)foreignptr)->AddBezierQuadratic(p1, p2, p3, col, thickness)
func (foreignptr ImDrawListPtr) AddBezierQuadratic(p1 ImVec2, p2 ImVec2, p3 ImVec2, col uint32, thickness float32) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000079)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, p1)
	runtime.AddComplex64Arg(_f, p2)
	runtime.AddComplex64Arg(_f, p3)
	runtime.AddUint32Arg(_f, col)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

// AddBezierQuadraticV Quadratic Bezier (3 control points)
// * num_segments int = 0
//foreign code:
//  ((ImDrawList*)foreignptr)->AddBezierQuadratic(p1, p2, p3, col, thickness, num_segments)
func (foreignptr ImDrawListPtr) AddBezierQuadraticV(p1 ImVec2, p2 ImVec2, p3 ImVec2, col uint32, thickness float32, num_segments int /* = 0*/) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x0000007a)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, p1)
	runtime.AddComplex64Arg(_f, p2)
	runtime.AddComplex64Arg(_f, p3)
	runtime.AddUint32Arg(_f, col)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddIntArg(_f, num_segments)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) AddImage(user_texture_id ImTextureID, p_min ImVec2, p_max ImVec2) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x0000007b)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddUintptrArg(_f, user_texture_id)
	runtime.AddComplex64Arg(_f, p_min)
	runtime.AddComplex64Arg(_f, p_max)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) AddImageV(user_texture_id ImTextureID, p_min ImVec2, p_max ImVec2, uv_min ImVec2 /* = ImVec2(0, 0)*/, uv_max ImVec2 /* = ImVec2(1, 1)*/, col uint32 /* = IM_COL32_WHITE*/) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x0000007c)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddUintptrArg(_f, user_texture_id)
	runtime.AddComplex64Arg(_f, p_min)
	runtime.AddComplex64Arg(_f, p_max)
	runtime.AddComplex64Arg(_f, uv_min)
	runtime.AddComplex64Arg(_f, uv_max)
	runtime.AddUint32Arg(_f, col)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) AddImageQuad(user_texture_id ImTextureID, p1 ImVec2, p2 ImVec2, p3 ImVec2, p4 ImVec2) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x0000007d)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddUintptrArg(_f, user_texture_id)
	runtime.AddComplex64Arg(_f, p1)
	runtime.AddComplex64Arg(_f, p2)
	runtime.AddComplex64Arg(_f, p3)
	runtime.AddComplex64Arg(_f, p4)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) AddImageQuadV(user_texture_id ImTextureID, p1 ImVec2, p2 ImVec2, p3 ImVec2, p4 ImVec2, uv1 ImVec2 /* = ImVec2(0, 0)*/, uv2 ImVec2 /* = ImVec2(1, 0)*/, uv3 ImVec2 /* = ImVec2(1, 1)*/, uv4 ImVec2 /* = ImVec2(0, 1)*/, col uint32 /* = IM_COL32_WHITE*/) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x0000007e)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddUintptrArg(_f, user_texture_id)
	runtime.AddComplex64Arg(_f, p1)
	runtime.AddComplex64Arg(_f, p2)
	runtime.AddComplex64Arg(_f, p3)
	runtime.AddComplex64Arg(_f, p4)
	runtime.AddComplex64Arg(_f, uv1)
	runtime.AddComplex64Arg(_f, uv2)
	runtime.AddComplex64Arg(_f, uv3)
	runtime.AddComplex64Arg(_f, uv4)
	runtime.AddUint32Arg(_f, col)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) AddImageRounded(user_texture_id ImTextureID, p_min ImVec2, p_max ImVec2, uv_min ImVec2, uv_max ImVec2, col uint32, rounding float32) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x0000007f)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddUintptrArg(_f, user_texture_id)
	runtime.AddComplex64Arg(_f, p_min)
	runtime.AddComplex64Arg(_f, p_max)
	runtime.AddComplex64Arg(_f, uv_min)
	runtime.AddComplex64Arg(_f, uv_max)
	runtime.AddUint32Arg(_f, col)
	runtime.AddFloat32Arg(_f, rounding)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) AddImageRoundedV(user_texture_id ImTextureID, p_min ImVec2, p_max ImVec2, uv_min ImVec2, uv_max ImVec2, col uint32, rounding float32, flags ImDrawFlags /* = 0*/) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000080)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddUintptrArg(_f, user_texture_id)
	runtime.AddComplex64Arg(_f, p_min)
	runtime.AddComplex64Arg(_f, p_max)
	runtime.AddComplex64Arg(_f, uv_min)
	runtime.AddComplex64Arg(_f, uv_max)
	runtime.AddUint32Arg(_f, col)
	runtime.AddFloat32Arg(_f, rounding)
	runtime.AddIntArg(_f, flags)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) PathArcTo(center ImVec2, radius float32, a_min float32, a_max float32) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000081)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, center)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, a_min)
	runtime.AddFloat32Arg(_f, a_max)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) PathArcToV(center ImVec2, radius float32, a_min float32, a_max float32, num_segments int /* = 0*/) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000082)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, center)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, a_min)
	runtime.AddFloat32Arg(_f, a_max)
	runtime.AddIntArg(_f, num_segments)
	_f.CallProcedure()

}

// PathArcToFast Use precomputed angles for a 12 steps circle
//foreign code:
//  ((ImDrawList*)foreignptr)->PathArcToFast(center, radius, a_min_of_12, a_max_of_12)
func (foreignptr ImDrawListPtr) PathArcToFast(center ImVec2, radius float32, a_min_of_12 int, a_max_of_12 int) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000083)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, center)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddIntArg(_f, a_min_of_12)
	runtime.AddIntArg(_f, a_max_of_12)
	_f.CallProcedure()

}

// PathEllipticalArcTo Ellipse
//foreign code:
//  ((ImDrawList*)foreignptr)->PathEllipticalArcTo(center, radius_x, radius_y, rot, a_min, a_max)
func (foreignptr ImDrawListPtr) PathEllipticalArcTo(center ImVec2, radius_x float32, radius_y float32, rot float32, a_min float32, a_max float32) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000084)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, center)
	runtime.AddFloat32Arg(_f, radius_x)
	runtime.AddFloat32Arg(_f, radius_y)
	runtime.AddFloat32Arg(_f, rot)
	runtime.AddFloat32Arg(_f, a_min)
	runtime.AddFloat32Arg(_f, a_max)
	_f.CallProcedure()

}

// PathEllipticalArcToV Ellipse
// * num_segments int = 0
//foreign code:
//  ((ImDrawList*)foreignptr)->PathEllipticalArcTo(center, radius_x, radius_y, rot, a_min, a_max, num_segments)
func (foreignptr ImDrawListPtr) PathEllipticalArcToV(center ImVec2, radius_x float32, radius_y float32, rot float32, a_min float32, a_max float32, num_segments int /* = 0*/) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000085)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, center)
	runtime.AddFloat32Arg(_f, radius_x)
	runtime.AddFloat32Arg(_f, radius_y)
	runtime.AddFloat32Arg(_f, rot)
	runtime.AddFloat32Arg(_f, a_min)
	runtime.AddFloat32Arg(_f, a_max)
	runtime.AddIntArg(_f, num_segments)
	_f.CallProcedure()

}

// PathBezierCubicCurveTo Cubic Bezier (4 control points)
//foreign code:
//  ((ImDrawList*)foreignptr)->PathBezierCubicCurveTo(p2, p3, p4)
func (foreignptr ImDrawListPtr) PathBezierCubicCurveTo(p2 ImVec2, p3 ImVec2, p4 ImVec2) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000086)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, p2)
	runtime.AddComplex64Arg(_f, p3)
	runtime.AddComplex64Arg(_f, p4)
	_f.CallProcedure()

}

// PathBezierCubicCurveToV Cubic Bezier (4 control points)
// * num_segments int = 0
//foreign code:
//  ((ImDrawList*)foreignptr)->PathBezierCubicCurveTo(p2, p3, p4, num_segments)
func (foreignptr ImDrawListPtr) PathBezierCubicCurveToV(p2 ImVec2, p3 ImVec2, p4 ImVec2, num_segments int /* = 0*/) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000087)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, p2)
	runtime.AddComplex64Arg(_f, p3)
	runtime.AddComplex64Arg(_f, p4)
	runtime.AddIntArg(_f, num_segments)
	_f.CallProcedure()

}

// PathBezierQuadraticCurveTo Quadratic Bezier (3 control points)
//foreign code:
//  ((ImDrawList*)foreignptr)->PathBezierQuadraticCurveTo(p2, p3)
func (foreignptr ImDrawListPtr) PathBezierQuadraticCurveTo(p2 ImVec2, p3 ImVec2) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000088)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, p2)
	runtime.AddComplex64Arg(_f, p3)
	_f.CallProcedure()

}

// PathBezierQuadraticCurveToV Quadratic Bezier (3 control points)
// * num_segments int = 0
//foreign code:
//  ((ImDrawList*)foreignptr)->PathBezierQuadraticCurveTo(p2, p3, num_segments)
func (foreignptr ImDrawListPtr) PathBezierQuadraticCurveToV(p2 ImVec2, p3 ImVec2, num_segments int /* = 0*/) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000089)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, p2)
	runtime.AddComplex64Arg(_f, p3)
	runtime.AddIntArg(_f, num_segments)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) PathRect(rect_min ImVec2, rect_max ImVec2) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x0000008a)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, rect_min)
	runtime.AddComplex64Arg(_f, rect_max)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) PathRectV(rect_min ImVec2, rect_max ImVec2, rounding float32 /* = 0.0f*/, flags ImDrawFlags /* = 0*/) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x0000008b)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, rect_min)
	runtime.AddComplex64Arg(_f, rect_max)
	runtime.AddFloat32Arg(_f, rounding)
	runtime.AddIntArg(_f, flags)
	_f.CallProcedure()

}

// AddDrawCmd This is useful if you need to forcefully create a new draw call (to allow for dependent rendering / blending). Otherwise primitives are merged into the same draw-call as much as possible
//foreign code:
//  ((ImDrawList*)foreignptr)->AddDrawCmd()
func (foreignptr ImDrawListPtr) AddDrawCmd() {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x0000008c)
	runtime.AddUintptrArg(_f, foreignptr)
	_f.CallProcedure()

}

// CloneOutput Create a clone of the CmdBuffer/IdxBuffer/VtxBuffer.
//foreign code:
//  auto r = ((ImDrawList*)foreignptr)->CloneOutput()
func (foreignptr ImDrawListPtr) CloneOutput() (r ImDrawListPtr) {
	_f := foreignptr.getFffi()
	_f.AddFunctionId(0x0000008d)
	runtime.AddUintptrArg(_f, foreignptr)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		foreignptr.handleError(_err_)
		return
	}
	r = ImDrawListPtr(runtime.GetUintptrRetr[uintptr](_f))

	return
}

func (foreignptr ImDrawListPtr) PrimReserve(idx_count int, vtx_count int) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x0000008e)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddIntArg(_f, idx_count)
	runtime.AddIntArg(_f, vtx_count)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) PrimUnreserve(idx_count int, vtx_count int) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x0000008f)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddIntArg(_f, idx_count)
	runtime.AddIntArg(_f, vtx_count)
	_f.CallProcedure()

}

// PrimRect Axis aligned rectangle (composed of two triangles)
//foreign code:
//  ((ImDrawList*)foreignptr)->PrimRect(a, b, col)
func (foreignptr ImDrawListPtr) PrimRect(a ImVec2, b ImVec2, col uint32) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000090)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, a)
	runtime.AddComplex64Arg(_f, b)
	runtime.AddUint32Arg(_f, col)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) PrimRectUV(a ImVec2, b ImVec2, uv_a ImVec2, uv_b ImVec2, col uint32) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000091)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, a)
	runtime.AddComplex64Arg(_f, b)
	runtime.AddComplex64Arg(_f, uv_a)
	runtime.AddComplex64Arg(_f, uv_b)
	runtime.AddUint32Arg(_f, col)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) PrimQuadUV(a ImVec2, b ImVec2, c ImVec2, d ImVec2, uv_a ImVec2, uv_b ImVec2, uv_c ImVec2, uv_d ImVec2, col uint32) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000092)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, a)
	runtime.AddComplex64Arg(_f, b)
	runtime.AddComplex64Arg(_f, c)
	runtime.AddComplex64Arg(_f, d)
	runtime.AddComplex64Arg(_f, uv_a)
	runtime.AddComplex64Arg(_f, uv_b)
	runtime.AddComplex64Arg(_f, uv_c)
	runtime.AddComplex64Arg(_f, uv_d)
	runtime.AddUint32Arg(_f, col)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) _ResetForNewFrame() {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000093)
	runtime.AddUintptrArg(_f, foreignptr)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) _ClearFreeMemory() {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000094)
	runtime.AddUintptrArg(_f, foreignptr)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) _PopUnusedDrawCmd() {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000095)
	runtime.AddUintptrArg(_f, foreignptr)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) _TryMergeDrawCmds() {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000096)
	runtime.AddUintptrArg(_f, foreignptr)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) _OnChangedClipRect() {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000097)
	runtime.AddUintptrArg(_f, foreignptr)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) _OnChangedTextureID() {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000098)
	runtime.AddUintptrArg(_f, foreignptr)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) _OnChangedVtxOffset() {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000099)
	runtime.AddUintptrArg(_f, foreignptr)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) _CalcCircleAutoSegmentCount(radius float32) (r int) {
	_f := foreignptr.getFffi()
	_f.AddFunctionId(0x0000009a)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddFloat32Arg(_f, radius)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		foreignptr.handleError(_err_)
		return
	}
	r = (runtime.GetIntRetr[int](_f))

	return
}

func (foreignptr ImDrawListPtr) _PathArcToFastEx(center ImVec2, radius float32, a_min_sample int, a_max_sample int, a_step int) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x0000009b)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, center)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddIntArg(_f, a_min_sample)
	runtime.AddIntArg(_f, a_max_sample)
	runtime.AddIntArg(_f, a_step)
	_f.CallProcedure()

}

func (foreignptr ImDrawListPtr) _PathArcToN(center ImVec2, radius float32, a_min float32, a_max float32, num_segments int) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x0000009c)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddComplex64Arg(_f, center)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, a_min)
	runtime.AddFloat32Arg(_f, a_max)
	runtime.AddIntArg(_f, num_segments)
	_f.CallProcedure()

}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

type ImGuiKnobFlags int

const (
	ImGuiKnobFlags_NoTitle        ImGuiKnobFlags = 1 << 0
	ImGuiKnobFlags_NoInput        ImGuiKnobFlags = 1 << 1
	ImGuiKnobFlags_ValueTooltip   ImGuiKnobFlags = 1 << 2
	ImGuiKnobFlags_DragHorizontal ImGuiKnobFlags = 1 << 3
)

type ImGuiKnobVariant int

const (
	ImGuiKnobVariant_Tick      ImGuiKnobVariant = 1 << 0
	ImGuiKnobVariant_Dot       ImGuiKnobVariant = 1 << 1
	ImGuiKnobVariant_Wiper     ImGuiKnobVariant = 1 << 2
	ImGuiKnobVariant_WiperOnly ImGuiKnobVariant = 1 << 3
	ImGuiKnobVariant_WiperDot  ImGuiKnobVariant = 1 << 4
	ImGuiKnobVariant_Stepped   ImGuiKnobVariant = 1 << 5
	ImGuiKnobVariant_Space     ImGuiKnobVariant = 1 << 6
)
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func PlotFlameV(label string, starts []float32, stops []float32, levels []uint8, captions []string, overlayText string, scaleMin float32, scaleMax float32, size ImVec2) {

	_f := currentFffiVar
	_f.AddProcedureId(0x0000009d)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32SliceArg(_f, starts)
	runtime.AddFloat32SliceArg(_f, stops)
	runtime.AddUint8SliceArg(_f, levels)
	runtime.AddStringsArg(_f, captions)
	runtime.AddStringArg(_f, overlayText)
	runtime.AddFloat32Arg(_f, scaleMin)
	runtime.AddFloat32Arg(_f, scaleMax)
	runtime.AddComplex64Arg(_f, size)
	_f.CallProcedure()

}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

//import "github.com/stergiotis/boxer/public/imzero/utils"

func PushFont(font ImFontPtr) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000009e)
	runtime.AddUintptrArg(_f, font)
	_f.CallProcedure()
}

func GetFont() (font ImFontPtr) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000009f)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	font = ImFontPtr(runtime.GetUintptrRetr[uintptr](_f))

	return
}

func GetFontTexID() (tex ImTextureID) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000000a0)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	tex = ImTextureID(runtime.GetUintptrRetr[uintptr](_f))

	return
}

func addFontFromMemoryTrueTypeFontV(name string, fontData []byte, sizeInPixels float32,
	glyphRanges []ImWchar,
	oversampleH int, oversampleV int,
	pixelSnapH bool,
	glyphExtraSpacing ImVec2,
	glyphOffset ImVec2,
	glyphMinAdvanceX float32, glyphMaxAdvanceX float32,
	mergeMode bool,
	fontBuilderFlags uint,
	rasterizerMultiply float32,
	ellipsisChar ImWchar,
) (font ImFontPtr) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000000a1)
	runtime.AddStringArg(_f, name)
	runtime.AddBytesArg(_f, fontData)
	runtime.AddFloat32Arg(_f, sizeInPixels)
	runtime.AddRuneSliceArg(_f, glyphRanges)
	runtime.AddIntArg(_f, oversampleH)
	runtime.AddIntArg(_f, oversampleV)
	runtime.AddBoolArg(_f, pixelSnapH)
	runtime.AddComplex64Arg(_f, glyphExtraSpacing)
	runtime.AddComplex64Arg(_f, glyphOffset)
	runtime.AddFloat32Arg(_f, glyphMinAdvanceX)
	runtime.AddFloat32Arg(_f, glyphMaxAdvanceX)
	runtime.AddBoolArg(_f, mergeMode)
	runtime.AddUintArg(_f, fontBuilderFlags)
	runtime.AddFloat32Arg(_f, rasterizerMultiply)
	runtime.AddRuneArg(_f, ellipsisChar)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	font =

	//name = utils.TruncateDescriptiveNameLeft(name, 40-1, "…")
	ImFontPtr(runtime.GetUintptrRetr[uintptr](_f))

	return
}

func (foreignptr ImFontPtr) RenderChar(drawList ImDrawListPtr, size float32, pos ImVec2, color uint32, charP rune) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x000000a2)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddUintptrArg(_f, drawList)
	runtime.AddFloat32Arg(_f, size)
	runtime.AddComplex64Arg(_f, pos)
	runtime.AddUint32Arg(_f, color)
	runtime.AddRuneArg(_f, charP)
	_f.CallProcedure()

}

func (foreignptr ImFontPtr) FontRenderText(drawList ImDrawListPtr, size float32, pos ImVec2, color uint32, clipRect ImVec4, text string) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x000000a3)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddUintptrArg(_f, drawList)
	runtime.AddFloat32Arg(_f, size)
	runtime.AddComplex64Arg(_f, pos)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Array4Arg(_f, clipRect)
	runtime.AddStringArg(_f, text)
	_f.CallProcedure()

}

func (foreignptr ImFontPtr) FontRenderTextV(drawList ImDrawListPtr, size float32, pos ImVec2, color uint32, clipRect ImVec4, text string, wrapWidth float32, cpuFineClip bool) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x000000a4)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddUintptrArg(_f, drawList)
	runtime.AddFloat32Arg(_f, size)
	runtime.AddComplex64Arg(_f, pos)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Array4Arg(_f, clipRect)
	runtime.AddStringArg(_f, text)
	runtime.AddFloat32Arg(_f, wrapWidth)
	runtime.AddBoolArg(_f, cpuFineClip)
	_f.CallProcedure()

}

// CalcTextSizeA
// 'max_width' stops rendering after a certain width (could be turned into a 2d size). FLT_MAX to disable.
// 'wrap_width' enable automatic word-wrapping across multiple lines to fit into given width. 0.0f to disable.
//foreign code:
//  
//           ImVec2 r;
//           const char **remaining = nullptr;
//           auto end = text+getStringLength(text);
//           r = ((ImFont*)foreignptr)->CalcTextSizeA(size,max_width,wrap_width,text,end,remaining);
//           // see https://github.com/ocornut/imgui/pull/3437 https://github.com/ocornut/imgui/issues/3776 https://github.com/ocornut/imgui/issues/791
//           if(pixel_perfect) {
//              // original
//              //r.x = IM_TRUNC(r.x + 0.99999f);
//              // improved, see https://github.com/ocornut/imgui/issues/791
//              r.x = ceilf(r.x);
//           }
//           remainingBytes = (uintptr_t)end-(uintptr_t)remaining;
//
func (foreignptr ImFontPtr) CalcTextSizeA(size float32, max_width float32, wrap_width float32, text string, pixel_perfect bool) (r ImVec2, remainingBytes Size_t) {
	_f := foreignptr.getFffi()
	_f.AddFunctionId(0x000000a5)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddFloat32Arg(_f, size)
	runtime.AddFloat32Arg(_f, max_width)
	runtime.AddFloat32Arg(_f, wrap_width)
	runtime.AddStringArg(_f, text)
	runtime.AddBoolArg(_f, pixel_perfect)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		foreignptr.handleError(_err_)
		return
	}
	r = ImVec2(runtime.GetComplex64Retr[complex64](_f))
	remainingBytes = Size_t(runtime.GetUint64Retr[uint64](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code
// -- deactivated -- // package imgui

// DestroyContext NULL = destroy current context
//foreign code:
//  ImGui::DestroyContext()
func DestroyContext() {

	_f := currentFffiVar
	_f.AddProcedureId(0x000000a6)
	_f.CallProcedure()
}

// NewFrame start a new Dear ImGui frame, you can submit any command from this point until Render()/EndFrame().
//foreign code:
//  ImGui::NewFrame()
func NewFrame() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000a7)
	_f.CallProcedure()

}

// EndFrame ends the Dear ImGui frame. automatically called by Render(). If you don't need to render data (skipping rendering) you may call EndFrame() without Render()... but you'll have wasted CPU already! If you don't need to render, better to not create any windows and not call NewFrame() at all!
//foreign code:
//  ImGui::EndFrame()
func EndFrame() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000a8)
	_f.CallProcedure()

}

// Render ends the Dear ImGui frame, finalize the draw data. You can then get call GetDrawData().
//foreign code:
//  ImGui::Render()
func Render() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000a9)
	_f.CallProcedure()

}

// ShowDemoWindow create Demo window. demonstrate most ImGui features. call this to learn about the library! try to make it always available in your application!
//foreign code:
//  ImGui::ShowDemoWindow()
func ShowDemoWindow() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000aa)
	_f.CallProcedure()

}

// ShowMetricsWindow create Metrics/Debugger window. display Dear ImGui internals: windows, draw commands, various internal state, etc.
//foreign code:
//  ImGui::ShowMetricsWindow()
func ShowMetricsWindow() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000ab)
	_f.CallProcedure()

}

// ShowDebugLogWindow create Debug Log window. display a simplified log of important dear imgui events.
//foreign code:
//  ImGui::ShowDebugLogWindow()
func ShowDebugLogWindow() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000ac)
	_f.CallProcedure()

}

// ShowIDStackToolWindow create Stack Tool window. hover items with mouse to query information about the source of their unique ID.
//foreign code:
//  ImGui::ShowIDStackToolWindow()
func ShowIDStackToolWindow() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000ad)
	_f.CallProcedure()

}

// ShowAboutWindow create About window. display Dear ImGui version, credits and build/system information.
//foreign code:
//  ImGui::ShowAboutWindow()
func ShowAboutWindow() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000ae)
	_f.CallProcedure()

}

// ShowStyleEditor add style editor block (not a window). you can pass in a reference ImGuiStyle structure to compare to, revert to and save to (else it uses the default style)
//foreign code:
//  ImGui::ShowStyleEditor()
func ShowStyleEditor() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000af)
	_f.CallProcedure()

}

// ShowStyleSelector add style selector block (not a window), essentially a combo listing the default styles.
//foreign code:
//  auto r = ImGui::ShowStyleSelector(label)
func ShowStyleSelector(label string) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000000b0)
	runtime.AddStringArg(_f, label)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// ShowFontSelector add font selector block (not a window), essentially a combo listing the loaded fonts.
//foreign code:
//  ImGui::ShowFontSelector(label)
func ShowFontSelector(label string) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000b1)
	runtime.AddStringArg(_f, label)
	_f.CallProcedure()

}

// ShowUserGuide add basic help/info block (not a window): how to manipulate ImGui as an end-user (mouse/keyboard controls).
//foreign code:
//  ImGui::ShowUserGuide()
func ShowUserGuide() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000b2)
	_f.CallProcedure()

}

// GetVersion get the compiled version string e.g. "1.80 WIP" (essentially the value for IMGUI_VERSION from the compiled version of imgui.cpp)
//foreign code:
//  auto r = ImGui::GetVersion()
func GetVersion() (r string) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000000b3)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetStringRetr[string](_f))

	return
}

// StyleColorsDark new, recommended style (default)
//foreign code:
//  ImGui::StyleColorsDark()
func StyleColorsDark() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000b4)
	_f.CallProcedure()

}

// StyleColorsLight best used with borders and a custom, thicker font
//foreign code:
//  ImGui::StyleColorsLight()
func StyleColorsLight() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000b5)
	_f.CallProcedure()

}

// StyleColorsClassic classic imgui style
//foreign code:
//  ImGui::StyleColorsClassic()
func StyleColorsClassic() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000b6)
	_f.CallProcedure()

}

func Begin(name string) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000000b7)
	runtime.AddStringArg(_f, name)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func BeginV(name string, flags ImGuiWindowFlags /* = 0*/) (r bool, p_open bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000000b8)
	runtime.AddStringArg(_f, name)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))
	p_open = (runtime.GetBoolRetr[bool](_f))

	return
}

func End() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000b9)
	_f.CallProcedure()

}

func BeginChild(str_id string) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000000ba)
	runtime.AddStringArg(_f, str_id)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func BeginChildV(str_id string, size ImVec2 /* = ImVec2(0, 0)*/, child_flags ImGuiChildFlags /* = 0*/, window_flags ImGuiWindowFlags /* = 0*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000000bb)
	runtime.AddStringArg(_f, str_id)
	runtime.AddComplex64Arg(_f, size)
	runtime.AddIntArg(_f, child_flags)
	runtime.AddIntArg(_f, window_flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func BeginChildID(id ImGuiID) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000000bc)
	runtime.AddUint32Arg(_f, id)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func BeginChildVID(id ImGuiID, size ImVec2 /* = ImVec2(0, 0)*/, child_flags ImGuiChildFlags /* = 0*/, window_flags ImGuiWindowFlags /* = 0*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000000bd)
	runtime.AddUint32Arg(_f, id)
	runtime.AddComplex64Arg(_f, size)
	runtime.AddIntArg(_f, child_flags)
	runtime.AddIntArg(_f, window_flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func EndChild() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000be)
	_f.CallProcedure()

}

func IsWindowAppearing() (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000000bf)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func IsWindowCollapsed() (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000000c0)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsWindowFocused is current window focused? or its root/child, depending on flags. see flags for options.
//foreign code:
//  auto r = ImGui::IsWindowFocused()
func IsWindowFocused() (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000000c1)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsWindowFocusedV is current window focused? or its root/child, depending on flags. see flags for options.
// * flags ImGuiFocusedFlags = 0
//foreign code:
//  auto r = ImGui::IsWindowFocused(flags)
func IsWindowFocusedV(flags ImGuiFocusedFlags /* = 0*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000000c2)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsWindowHovered is current window hovered and hoverable (e.g. not blocked by a popup/modal)? See ImGuiHoveredFlags_ for options. IMPORTANT: If you are trying to check whether your mouse should be dispatched to Dear ImGui or to your underlying app, you should not use this function! Use the 'io.WantCaptureMouse' boolean for that! Refer to FAQ entry "How can I tell whether to dispatch mouse/keyboard to Dear ImGui or my application?" for details.
//foreign code:
//  auto r = ImGui::IsWindowHovered()
func IsWindowHovered() (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000000c3)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsWindowHoveredV is current window hovered and hoverable (e.g. not blocked by a popup/modal)? See ImGuiHoveredFlags_ for options. IMPORTANT: If you are trying to check whether your mouse should be dispatched to Dear ImGui or to your underlying app, you should not use this function! Use the 'io.WantCaptureMouse' boolean for that! Refer to FAQ entry "How can I tell whether to dispatch mouse/keyboard to Dear ImGui or my application?" for details.
// * flags ImGuiHoveredFlags = 0
//foreign code:
//  auto r = ImGui::IsWindowHovered(flags)
func IsWindowHoveredV(flags ImGuiHoveredFlags /* = 0*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000000c4)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// GetWindowDrawList get draw list associated to the current window, to append your own drawing primitives
//foreign code:
//  auto r = ImGui::GetWindowDrawList()
func GetWindowDrawList() (r ImDrawListPtr) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000000c5)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImDrawListPtr(runtime.GetUintptrRetr[uintptr](_f))

	return
}

// GetWindowDpiScale get DPI scale currently associated to the current window's viewport.
//foreign code:
//  auto r = ImGui::GetWindowDpiScale()
func GetWindowDpiScale() (r float32) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000000c6)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetFloat32Retr[float32](_f))

	return
}

// GetWindowPos get current window position in screen space (note: it is unlikely you need to use this. Consider using current layout pos instead, GetCursorScreenPos())
//foreign code:
//  auto r = ImGui::GetWindowPos()
func GetWindowPos() (r ImVec2) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000000c7)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImVec2(runtime.GetComplex64Retr[complex64](_f))

	return
}

// GetWindowSize get current window size (note: it is unlikely you need to use this. Consider using GetCursorScreenPos() and e.g. GetContentRegionAvail() instead)
//foreign code:
//  auto r = ImGui::GetWindowSize()
func GetWindowSize() (r ImVec2) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000000c8)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImVec2(runtime.GetComplex64Retr[complex64](_f))

	return
}

// GetWindowWidth get current window width (shortcut for GetWindowSize().x)
//foreign code:
//  auto r = ImGui::GetWindowWidth()
func GetWindowWidth() (r float32) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000000c9)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetFloat32Retr[float32](_f))

	return
}

// GetWindowHeight get current window height (shortcut for GetWindowSize().y)
//foreign code:
//  auto r = ImGui::GetWindowHeight()
func GetWindowHeight() (r float32) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000000ca)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetFloat32Retr[float32](_f))

	return
}

// SetNextWindowPos set next window position. call before Begin(). use pivot=(0.5f,0.5f) to center on given point, etc.
//foreign code:
//  ImGui::SetNextWindowPos(pos)
func SetNextWindowPos(pos ImVec2) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000cb)
	runtime.AddComplex64Arg(_f, pos)
	_f.CallProcedure()

}

// SetNextWindowPosV set next window position. call before Begin(). use pivot=(0.5f,0.5f) to center on given point, etc.
// * cond ImGuiCond = 0
// * pivot const ImVec2 & = ImVec2(0, 0)
//foreign code:
//  ImGui::SetNextWindowPos(pos, cond, pivot)
func SetNextWindowPosV(pos ImVec2, cond ImGuiCond /* = 0*/, pivot ImVec2 /* = ImVec2(0, 0)*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000cc)
	runtime.AddComplex64Arg(_f, pos)
	runtime.AddIntArg(_f, cond)
	runtime.AddComplex64Arg(_f, pivot)
	_f.CallProcedure()

}

// SetNextWindowSize set next window size. set axis to 0.0f to force an auto-fit on this axis. call before Begin()
//foreign code:
//  ImGui::SetNextWindowSize(size)
func SetNextWindowSize(size ImVec2) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000cd)
	runtime.AddComplex64Arg(_f, size)
	_f.CallProcedure()

}

// SetNextWindowSizeV set next window size. set axis to 0.0f to force an auto-fit on this axis. call before Begin()
// * cond ImGuiCond = 0
//foreign code:
//  ImGui::SetNextWindowSize(size, cond)
func SetNextWindowSizeV(size ImVec2, cond ImGuiCond /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000ce)
	runtime.AddComplex64Arg(_f, size)
	runtime.AddIntArg(_f, cond)
	_f.CallProcedure()

}

// SetNextWindowSizeConstraints set next window size limits. use 0.0f or FLT_MAX if you don't want limits. Use -1 for both min and max of same axis to preserve current size (which itself is a constraint). Use callback to apply non-trivial programmatic constraints.
//foreign code:
//  ImGui::SetNextWindowSizeConstraints(size_min, size_max)
func SetNextWindowSizeConstraints(size_min ImVec2, size_max ImVec2) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000cf)
	runtime.AddComplex64Arg(_f, size_min)
	runtime.AddComplex64Arg(_f, size_max)
	_f.CallProcedure()

}

// SetNextWindowContentSize set next window content size (~ scrollable client area, which enforce the range of scrollbars). Not including window decorations (title bar, menu bar, etc.) nor WindowPadding. set an axis to 0.0f to leave it automatic. call before Begin()
//foreign code:
//  ImGui::SetNextWindowContentSize(size)
func SetNextWindowContentSize(size ImVec2) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000d0)
	runtime.AddComplex64Arg(_f, size)
	_f.CallProcedure()

}

// SetNextWindowCollapsed set next window collapsed state. call before Begin()
//foreign code:
//  ImGui::SetNextWindowCollapsed(collapsed)
func SetNextWindowCollapsed(collapsed bool) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000d1)
	runtime.AddBoolArg(_f, collapsed)
	_f.CallProcedure()

}

// SetNextWindowCollapsedV set next window collapsed state. call before Begin()
// * cond ImGuiCond = 0
//foreign code:
//  ImGui::SetNextWindowCollapsed(collapsed, cond)
func SetNextWindowCollapsedV(collapsed bool, cond ImGuiCond /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000d2)
	runtime.AddBoolArg(_f, collapsed)
	runtime.AddIntArg(_f, cond)
	_f.CallProcedure()

}

// SetNextWindowFocus set next window to be focused / top-most. call before Begin()
//foreign code:
//  ImGui::SetNextWindowFocus()
func SetNextWindowFocus() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000d3)
	_f.CallProcedure()

}

// SetNextWindowScroll set next window scrolling value (use < 0.0f to not affect a given axis).
//foreign code:
//  ImGui::SetNextWindowScroll(scroll)
func SetNextWindowScroll(scroll ImVec2) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000d4)
	runtime.AddComplex64Arg(_f, scroll)
	_f.CallProcedure()

}

// SetNextWindowBgAlpha set next window background color alpha. helper to easily override the Alpha component of ImGuiCol_WindowBg/ChildBg/PopupBg. you may also use ImGuiWindowFlags_NoBackground.
//foreign code:
//  ImGui::SetNextWindowBgAlpha(alpha)
func SetNextWindowBgAlpha(alpha float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000d5)
	runtime.AddFloat32Arg(_f, alpha)
	_f.CallProcedure()

}

// SetNextWindowViewport set next window viewport
//foreign code:
//  ImGui::SetNextWindowViewport(viewport_id)
func SetNextWindowViewport(viewport_id ImGuiID) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000d6)
	runtime.AddUint32Arg(_f, viewport_id)
	_f.CallProcedure()

}

// SetWindowPos set named window position.
//foreign code:
//  ImGui::SetWindowPos(name, pos)
func SetWindowPos(name string, pos ImVec2) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000d7)
	runtime.AddStringArg(_f, name)
	runtime.AddComplex64Arg(_f, pos)
	_f.CallProcedure()

}

// SetWindowPosV set named window position.
// * cond ImGuiCond = 0
//foreign code:
//  ImGui::SetWindowPos(name, pos, cond)
func SetWindowPosV(name string, pos ImVec2, cond ImGuiCond /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000d8)
	runtime.AddStringArg(_f, name)
	runtime.AddComplex64Arg(_f, pos)
	runtime.AddIntArg(_f, cond)
	_f.CallProcedure()

}

// SetWindowSize set named window size. set axis to 0.0f to force an auto-fit on this axis.
//foreign code:
//  ImGui::SetWindowSize(name, size)
func SetWindowSize(name string, size ImVec2) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000d9)
	runtime.AddStringArg(_f, name)
	runtime.AddComplex64Arg(_f, size)
	_f.CallProcedure()

}

// SetWindowSizeV set named window size. set axis to 0.0f to force an auto-fit on this axis.
// * cond ImGuiCond = 0
//foreign code:
//  ImGui::SetWindowSize(name, size, cond)
func SetWindowSizeV(name string, size ImVec2, cond ImGuiCond /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000da)
	runtime.AddStringArg(_f, name)
	runtime.AddComplex64Arg(_f, size)
	runtime.AddIntArg(_f, cond)
	_f.CallProcedure()

}

// SetWindowCollapsed set named window collapsed state
//foreign code:
//  ImGui::SetWindowCollapsed(name, collapsed)
func SetWindowCollapsed(name string, collapsed bool) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000db)
	runtime.AddStringArg(_f, name)
	runtime.AddBoolArg(_f, collapsed)
	_f.CallProcedure()

}

// SetWindowCollapsedV set named window collapsed state
// * cond ImGuiCond = 0
//foreign code:
//  ImGui::SetWindowCollapsed(name, collapsed, cond)
func SetWindowCollapsedV(name string, collapsed bool, cond ImGuiCond /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000dc)
	runtime.AddStringArg(_f, name)
	runtime.AddBoolArg(_f, collapsed)
	runtime.AddIntArg(_f, cond)
	_f.CallProcedure()

}

// SetWindowFocus set named window to be focused / top-most. use NULL to remove focus.
//foreign code:
//  ImGui::SetWindowFocus(name)
func SetWindowFocus(name string) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000dd)
	runtime.AddStringArg(_f, name)
	_f.CallProcedure()

}

// GetContentRegionAvail == GetContentRegionMax() - GetCursorPos()
//foreign code:
//  auto r = ImGui::GetContentRegionAvail()
func GetContentRegionAvail() (r ImVec2) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000000de)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImVec2(runtime.GetComplex64Retr[complex64](_f))

	return
}

// GetContentRegionMax current content boundaries (typically window boundaries including scrolling, or current column boundaries), in windows coordinates
//foreign code:
//  auto r = ImGui::GetContentRegionMax()
func GetContentRegionMax() (r ImVec2) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000000df)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImVec2(runtime.GetComplex64Retr[complex64](_f))

	return
}

// GetWindowContentRegionMin content boundaries min for the full window (roughly (0,0)-Scroll), in window coordinates
//foreign code:
//  auto r = ImGui::GetWindowContentRegionMin()
func GetWindowContentRegionMin() (r ImVec2) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000000e0)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImVec2(runtime.GetComplex64Retr[complex64](_f))

	return
}

// GetWindowContentRegionMax content boundaries max for the full window (roughly (0,0)+Size-Scroll) where Size can be overridden with SetNextWindowContentSize(), in window coordinates
//foreign code:
//  auto r = ImGui::GetWindowContentRegionMax()
func GetWindowContentRegionMax() (r ImVec2) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000000e1)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImVec2(runtime.GetComplex64Retr[complex64](_f))

	return
}

// GetScrollX get scrolling amount [0 .. GetScrollMaxX()]
//foreign code:
//  auto r = ImGui::GetScrollX()
func GetScrollX() (r float32) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000000e2)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetFloat32Retr[float32](_f))

	return
}

// GetScrollY get scrolling amount [0 .. GetScrollMaxY()]
//foreign code:
//  auto r = ImGui::GetScrollY()
func GetScrollY() (r float32) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000000e3)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetFloat32Retr[float32](_f))

	return
}

// SetScrollX set scrolling amount [0 .. GetScrollMaxX()]
//foreign code:
//  ImGui::SetScrollX(scroll_x)
func SetScrollX(scroll_x float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000e4)
	runtime.AddFloat32Arg(_f, scroll_x)
	_f.CallProcedure()

}

// SetScrollY set scrolling amount [0 .. GetScrollMaxY()]
//foreign code:
//  ImGui::SetScrollY(scroll_y)
func SetScrollY(scroll_y float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000e5)
	runtime.AddFloat32Arg(_f, scroll_y)
	_f.CallProcedure()

}

// GetScrollMaxX get maximum scrolling amount ~~ ContentSize.x - WindowSize.x - DecorationsSize.x
//foreign code:
//  auto r = ImGui::GetScrollMaxX()
func GetScrollMaxX() (r float32) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000000e6)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetFloat32Retr[float32](_f))

	return
}

// GetScrollMaxY get maximum scrolling amount ~~ ContentSize.y - WindowSize.y - DecorationsSize.y
//foreign code:
//  auto r = ImGui::GetScrollMaxY()
func GetScrollMaxY() (r float32) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000000e7)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetFloat32Retr[float32](_f))

	return
}

// SetScrollHereX adjust scrolling amount to make current cursor position visible. center_x_ratio=0.0: left, 0.5: center, 1.0: right. When using to make a "default/current item" visible, consider using SetItemDefaultFocus() instead.
//foreign code:
//  ImGui::SetScrollHereX()
func SetScrollHereX() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000e8)
	_f.CallProcedure()

}

// SetScrollHereXV adjust scrolling amount to make current cursor position visible. center_x_ratio=0.0: left, 0.5: center, 1.0: right. When using to make a "default/current item" visible, consider using SetItemDefaultFocus() instead.
// * center_x_ratio float = 0.5f
//foreign code:
//  ImGui::SetScrollHereX(center_x_ratio)
func SetScrollHereXV(center_x_ratio float32 /* = 0.5f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000e9)
	runtime.AddFloat32Arg(_f, center_x_ratio)
	_f.CallProcedure()

}

// SetScrollHereY adjust scrolling amount to make current cursor position visible. center_y_ratio=0.0: top, 0.5: center, 1.0: bottom. When using to make a "default/current item" visible, consider using SetItemDefaultFocus() instead.
//foreign code:
//  ImGui::SetScrollHereY()
func SetScrollHereY() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000ea)
	_f.CallProcedure()

}

// SetScrollHereYV adjust scrolling amount to make current cursor position visible. center_y_ratio=0.0: top, 0.5: center, 1.0: bottom. When using to make a "default/current item" visible, consider using SetItemDefaultFocus() instead.
// * center_y_ratio float = 0.5f
//foreign code:
//  ImGui::SetScrollHereY(center_y_ratio)
func SetScrollHereYV(center_y_ratio float32 /* = 0.5f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000eb)
	runtime.AddFloat32Arg(_f, center_y_ratio)
	_f.CallProcedure()

}

// SetScrollFromPosX adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position.
//foreign code:
//  ImGui::SetScrollFromPosX(local_x)
func SetScrollFromPosX(local_x float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000ec)
	runtime.AddFloat32Arg(_f, local_x)
	_f.CallProcedure()

}

// SetScrollFromPosXV adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position.
// * center_x_ratio float = 0.5f
//foreign code:
//  ImGui::SetScrollFromPosX(local_x, center_x_ratio)
func SetScrollFromPosXV(local_x float32, center_x_ratio float32 /* = 0.5f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000ed)
	runtime.AddFloat32Arg(_f, local_x)
	runtime.AddFloat32Arg(_f, center_x_ratio)
	_f.CallProcedure()

}

// SetScrollFromPosY adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position.
//foreign code:
//  ImGui::SetScrollFromPosY(local_y)
func SetScrollFromPosY(local_y float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000ee)
	runtime.AddFloat32Arg(_f, local_y)
	_f.CallProcedure()

}

// SetScrollFromPosYV adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position.
// * center_y_ratio float = 0.5f
//foreign code:
//  ImGui::SetScrollFromPosY(local_y, center_y_ratio)
func SetScrollFromPosYV(local_y float32, center_y_ratio float32 /* = 0.5f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000ef)
	runtime.AddFloat32Arg(_f, local_y)
	runtime.AddFloat32Arg(_f, center_y_ratio)
	_f.CallProcedure()

}

func PopFont() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000f0)
	_f.CallProcedure()

}

// PushStyleColor modify a style color. always use this if you modify the style after NewFrame().
//foreign code:
//  ImGui::PushStyleColor(idx, col)
func PushStyleColor(idx ImGuiCol, col uint32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000f1)
	runtime.AddIntArg(_f, idx)
	runtime.AddUint32Arg(_f, col)
	_f.CallProcedure()

}

func PushStyleColorImVec4(idx ImGuiCol, col ImVec4) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000f2)
	runtime.AddIntArg(_f, idx)
	runtime.AddFloat32Array4Arg(_f, col)
	_f.CallProcedure()

}

func PopStyleColor() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000f3)
	_f.CallProcedure()

}

func PopStyleColorV(count int /* = 1*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000f4)
	runtime.AddIntArg(_f, count)
	_f.CallProcedure()

}

// PushStyleVar modify a style float variable. always use this if you modify the style after NewFrame().
//foreign code:
//  ImGui::PushStyleVar(idx, val)
func PushStyleVar(idx ImGuiStyleVar, val float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000f5)
	runtime.AddIntArg(_f, idx)
	runtime.AddFloat32Arg(_f, val)
	_f.CallProcedure()

}

// PushStyleVar modify a style ImVec2 variable. always use this if you modify the style after NewFrame().
//foreign code:
//  ImGui::PushStyleVar(idx, val)
func PushStyleVarImVec2(idx ImGuiStyleVar, val ImVec2) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000f6)
	runtime.AddIntArg(_f, idx)
	runtime.AddComplex64Arg(_f, val)
	_f.CallProcedure()

}

func PopStyleVar() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000f7)
	_f.CallProcedure()

}

func PopStyleVarV(count int /* = 1*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000f8)
	runtime.AddIntArg(_f, count)
	_f.CallProcedure()

}

// PushTabStop == tab stop enable. Allow focusing using TAB/Shift-TAB, enabled by default but you can disable it for certain widgets
//foreign code:
//  ImGui::PushTabStop(tab_stop)
func PushTabStop(tab_stop bool) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000f9)
	runtime.AddBoolArg(_f, tab_stop)
	_f.CallProcedure()

}

func PopTabStop() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000fa)
	_f.CallProcedure()

}

// PushButtonRepeat in 'repeat' mode, Button*() functions return repeated true in a typematic manner (using io.KeyRepeatDelay/io.KeyRepeatRate setting). Note that you can call IsItemActive() after any Button() to tell if the button is held in the current frame.
//foreign code:
//  ImGui::PushButtonRepeat(repeat)
func PushButtonRepeat(repeat bool) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000fb)
	runtime.AddBoolArg(_f, repeat)
	_f.CallProcedure()

}

func PopButtonRepeat() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000fc)
	_f.CallProcedure()

}

// PushItemWidth push width of items for common large "item+label" widgets. >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -FLT_MIN always align width to the right side).
//foreign code:
//  ImGui::PushItemWidth(item_width)
func PushItemWidth(item_width float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000fd)
	runtime.AddFloat32Arg(_f, item_width)
	_f.CallProcedure()

}

func PopItemWidth() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000fe)
	_f.CallProcedure()

}

// SetNextItemWidth set width of the _next_ common large "item+label" widget. >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -FLT_MIN always align width to the right side)
//foreign code:
//  ImGui::SetNextItemWidth(item_width)
func SetNextItemWidth(item_width float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000000ff)
	runtime.AddFloat32Arg(_f, item_width)
	_f.CallProcedure()

}

// CalcItemWidth width of item given pushed settings and current cursor position. NOT necessarily the width of last item unlike most 'Item' functions.
//foreign code:
//  auto r = ImGui::CalcItemWidth()
func CalcItemWidth() (r float32) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000100)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetFloat32Retr[float32](_f))

	return
}

// PushTextWrapPos push word-wrapping position for Text*() commands. < 0.0f: no wrapping; 0.0f: wrap to end of window (or column); > 0.0f: wrap at 'wrap_pos_x' position in window local space
//foreign code:
//  ImGui::PushTextWrapPos()
func PushTextWrapPos() {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000101)
	_f.CallProcedure()

}

// PushTextWrapPosV push word-wrapping position for Text*() commands. < 0.0f: no wrapping; 0.0f: wrap to end of window (or column); > 0.0f: wrap at 'wrap_pos_x' position in window local space
// * wrap_local_pos_x float = 0.0f
//foreign code:
//  ImGui::PushTextWrapPos(wrap_local_pos_x)
func PushTextWrapPosV(wrap_local_pos_x float32 /* = 0.0f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000102)
	runtime.AddFloat32Arg(_f, wrap_local_pos_x)
	_f.CallProcedure()

}

func PopTextWrapPos() {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000103)
	_f.CallProcedure()

}

// GetFontSize get current font size (= height in pixels) of current font with current scale applied
//foreign code:
//  auto r = ImGui::GetFontSize()
func GetFontSize() (r float32) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000104)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetFloat32Retr[float32](_f))

	return
}

// GetFontTexUvWhitePixel get UV coordinate for a while pixel, useful to draw custom shapes via the ImDrawList API
//foreign code:
//  auto r = ImGui::GetFontTexUvWhitePixel()
func GetFontTexUvWhitePixel() (r ImVec2) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000105)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImVec2(runtime.GetComplex64Retr[complex64](_f))

	return
}

// GetColorU32 retrieve given style color with style alpha applied and optional extra alpha multiplier, packed as a 32-bit value suitable for ImDrawList
//foreign code:
//  auto r = ImGui::GetColorU32(idx)
func GetColorU32ImGuiCol(idx ImGuiCol) (r uint32) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000106)
	runtime.AddIntArg(_f, idx)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetUint32Retr[uint32](_f))

	return
}

// GetColorU32V retrieve given style color with style alpha applied and optional extra alpha multiplier, packed as a 32-bit value suitable for ImDrawList
// * alpha_mul float = 1.0f
//foreign code:
//  auto r = ImGui::GetColorU32(idx, alpha_mul)
func GetColorU32V(idx ImGuiCol, alpha_mul float32 /* = 1.0f*/) (r uint32) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000107)
	runtime.AddIntArg(_f, idx)
	runtime.AddFloat32Arg(_f, alpha_mul)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetUint32Retr[uint32](_f))

	return
}

// GetColorU32 retrieve given color with style alpha applied, packed as a 32-bit value suitable for ImDrawList
//foreign code:
//  auto r = ImGui::GetColorU32(col)
func GetColorU32ImVec4(col ImVec4) (r uint32) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000108)
	runtime.AddFloat32Array4Arg(_f, col)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetUint32Retr[uint32](_f))

	return
}

// GetColorU32 retrieve given color with style alpha applied, packed as a 32-bit value suitable for ImDrawList
//foreign code:
//  auto r = ImGui::GetColorU32(col)
func GetColorU32(col uint32) (r uint32) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000109)
	runtime.AddUint32Arg(_f, col)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetUint32Retr[uint32](_f))

	return
}

// GetStyleColorVec4 retrieve style color as stored in ImGuiStyle structure. use to feed back into PushStyleColor(), otherwise use GetColorU32() to get style color with style alpha baked in.
//foreign code:
//  auto r = ImGui::GetStyleColorVec4(idx)
func GetStyleColorVec4(idx ImGuiCol) (r ImVec4) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000010a)
	runtime.AddIntArg(_f, idx)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImVec4(runtime.GetFloat32Array4Retr[float32](_f))

	return
}

// GetCursorScreenPos cursor position in absolute coordinates (prefer using this, also more useful to work with ImDrawList API).
//foreign code:
//  auto r = ImGui::GetCursorScreenPos()
func GetCursorScreenPos() (r ImVec2) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000010b)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImVec2(runtime.GetComplex64Retr[complex64](_f))

	return
}

// SetCursorScreenPos cursor position in absolute coordinates
//foreign code:
//  ImGui::SetCursorScreenPos(pos)
func SetCursorScreenPos(pos ImVec2) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000010c)
	runtime.AddComplex64Arg(_f, pos)
	_f.CallProcedure()

}

// GetCursorPos [window-local] cursor position in window coordinates (relative to window position)
//foreign code:
//  auto r = ImGui::GetCursorPos()
func GetCursorPos() (r ImVec2) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000010d)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImVec2(runtime.GetComplex64Retr[complex64](_f))

	return
}

// GetCursorPosX [window-local] "
//foreign code:
//  auto r = ImGui::GetCursorPosX()
func GetCursorPosX() (r float32) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000010e)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetFloat32Retr[float32](_f))

	return
}

// GetCursorPosY [window-local] "
//foreign code:
//  auto r = ImGui::GetCursorPosY()
func GetCursorPosY() (r float32) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000010f)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetFloat32Retr[float32](_f))

	return
}

// SetCursorPos [window-local] "
//foreign code:
//  ImGui::SetCursorPos(local_pos)
func SetCursorPos(local_pos ImVec2) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000110)
	runtime.AddComplex64Arg(_f, local_pos)
	_f.CallProcedure()

}

// SetCursorPosX [window-local] "
//foreign code:
//  ImGui::SetCursorPosX(local_x)
func SetCursorPosX(local_x float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000111)
	runtime.AddFloat32Arg(_f, local_x)
	_f.CallProcedure()

}

// SetCursorPosY [window-local] "
//foreign code:
//  ImGui::SetCursorPosY(local_y)
func SetCursorPosY(local_y float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000112)
	runtime.AddFloat32Arg(_f, local_y)
	_f.CallProcedure()

}

// GetCursorStartPos [window-local] initial cursor position, in window coordinates
//foreign code:
//  auto r = ImGui::GetCursorStartPos()
func GetCursorStartPos() (r ImVec2) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000113)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImVec2(runtime.GetComplex64Retr[complex64](_f))

	return
}

// Separator separator, generally horizontal. inside a menu bar or in horizontal layout mode, this becomes a vertical separator.
//foreign code:
//  ImGui::Separator()
func Separator() {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000114)
	_f.CallProcedure()

}

// SameLine call between widgets or groups to layout them horizontally. X position given in window coordinates.
//foreign code:
//  ImGui::SameLine()
func SameLine() {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000115)
	_f.CallProcedure()

}

// SameLineV call between widgets or groups to layout them horizontally. X position given in window coordinates.
// * offset_from_start_x float = 0.0f
// * spacing float = -1.0f
//foreign code:
//  ImGui::SameLine(offset_from_start_x, spacing)
func SameLineV(offset_from_start_x float32 /* = 0.0f*/, spacing float32 /* = -1.0f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000116)
	runtime.AddFloat32Arg(_f, offset_from_start_x)
	runtime.AddFloat32Arg(_f, spacing)
	_f.CallProcedure()

}

// NewLine undo a SameLine() or force a new line when in a horizontal-layout context.
//foreign code:
//  ImGui::NewLine()
func NewLine() {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000117)
	_f.CallProcedure()

}

// Spacing add vertical spacing.
//foreign code:
//  ImGui::Spacing()
func Spacing() {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000118)
	_f.CallProcedure()

}

// Dummy add a dummy item of given size. unlike InvisibleButton(), Dummy() won't take the mouse click or be navigable into.
//foreign code:
//  ImGui::Dummy(size)
func Dummy(size ImVec2) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000119)
	runtime.AddComplex64Arg(_f, size)
	_f.CallProcedure()

}

// Indent move content position toward the right, by indent_w, or style.IndentSpacing if indent_w <= 0
//foreign code:
//  ImGui::Indent()
func Indent() {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000011a)
	_f.CallProcedure()

}

// IndentV move content position toward the right, by indent_w, or style.IndentSpacing if indent_w <= 0
// * indent_w float = 0.0f
//foreign code:
//  ImGui::Indent(indent_w)
func IndentV(indent_w float32 /* = 0.0f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000011b)
	runtime.AddFloat32Arg(_f, indent_w)
	_f.CallProcedure()

}

// Unindent move content position back to the left, by indent_w, or style.IndentSpacing if indent_w <= 0
//foreign code:
//  ImGui::Unindent()
func Unindent() {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000011c)
	_f.CallProcedure()

}

// UnindentV move content position back to the left, by indent_w, or style.IndentSpacing if indent_w <= 0
// * indent_w float = 0.0f
//foreign code:
//  ImGui::Unindent(indent_w)
func UnindentV(indent_w float32 /* = 0.0f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000011d)
	runtime.AddFloat32Arg(_f, indent_w)
	_f.CallProcedure()

}

// BeginGroup lock horizontal starting position
//foreign code:
//  ImGui::BeginGroup()
func BeginGroup() {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000011e)
	_f.CallProcedure()

}

// EndGroup unlock horizontal starting position + capture the whole group bounding box into one "item" (so you can use IsItemHovered() or layout primitives such as SameLine() on whole group, etc.)
//foreign code:
//  ImGui::EndGroup()
func EndGroup() {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000011f)
	_f.CallProcedure()

}

// AlignTextToFramePadding vertically align upcoming text baseline to FramePadding.y so that it will align properly to regularly framed items (call if you have text on a line before a framed item)
//foreign code:
//  ImGui::AlignTextToFramePadding()
func AlignTextToFramePadding() {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000120)
	_f.CallProcedure()

}

// GetTextLineHeight ~ FontSize
//foreign code:
//  auto r = ImGui::GetTextLineHeight()
func GetTextLineHeight() (r float32) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000121)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetFloat32Retr[float32](_f))

	return
}

// GetTextLineHeightWithSpacing ~ FontSize + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of text)
//foreign code:
//  auto r = ImGui::GetTextLineHeightWithSpacing()
func GetTextLineHeightWithSpacing() (r float32) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000122)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetFloat32Retr[float32](_f))

	return
}

// GetFrameHeight ~ FontSize + style.FramePadding.y * 2
//foreign code:
//  auto r = ImGui::GetFrameHeight()
func GetFrameHeight() (r float32) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000123)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetFloat32Retr[float32](_f))

	return
}

// GetFrameHeightWithSpacing ~ FontSize + style.FramePadding.y * 2 + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of framed widgets)
//foreign code:
//  auto r = ImGui::GetFrameHeightWithSpacing()
func GetFrameHeightWithSpacing() (r float32) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000124)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetFloat32Retr[float32](_f))

	return
}

// PushID push string into the ID stack (will hash string).
//foreign code:
//  ImGui::PushID(str_id)
func PushID(str_id string) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000125)
	runtime.AddStringArg(_f, str_id)
	_f.CallProcedure()

}

// PushID push integer into the ID stack (will hash integer).
//foreign code:
//  ImGui::PushID(int_id)
func PushIDInt(int_id int) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000126)
	runtime.AddIntArg(_f, int_id)
	_f.CallProcedure()

}

// PopID pop from the ID stack.
//foreign code:
//  ImGui::PopID()
func PopID() {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000127)
	_f.CallProcedure()

}

// GetID calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself
//foreign code:
//  auto r = ImGui::GetID(str_id)
func GetID(str_id string) (r ImGuiID) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000128)
	runtime.AddStringArg(_f, str_id)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImGuiID(runtime.GetUint32Retr[uint32](_f))

	return
}

// SeparatorText currently: formatted text with an horizontal line
//foreign code:
//  ImGui::SeparatorText(label)
func SeparatorText(label string) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000129)
	runtime.AddStringArg(_f, label)
	_f.CallProcedure()

}

// Button button
//foreign code:
//  auto r = ImGui::Button(label)
func Button(label string) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000012a)
	runtime.AddStringArg(_f, label)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// ButtonV button
// * size const ImVec2 & = ImVec2(0, 0)
//foreign code:
//  auto r = ImGui::Button(label, size)
func ButtonV(label string, size ImVec2 /* = ImVec2(0, 0)*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000012b)
	runtime.AddStringArg(_f, label)
	runtime.AddComplex64Arg(_f, size)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// SmallButton button with (FramePadding.y == 0) to easily embed within text
//foreign code:
//  auto r = ImGui::SmallButton(label)
func SmallButton(label string) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000012c)
	runtime.AddStringArg(_f, label)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// InvisibleButton flexible button behavior without the visuals, frequently useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)
//foreign code:
//  auto r = ImGui::InvisibleButton(str_id, size)
func InvisibleButton(str_id string, size ImVec2) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000012d)
	runtime.AddStringArg(_f, str_id)
	runtime.AddComplex64Arg(_f, size)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// InvisibleButtonV flexible button behavior without the visuals, frequently useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)
// * flags ImGuiButtonFlags = 0
//foreign code:
//  auto r = ImGui::InvisibleButton(str_id, size, flags)
func InvisibleButtonV(str_id string, size ImVec2, flags ImGuiButtonFlags /* = 0*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000012e)
	runtime.AddStringArg(_f, str_id)
	runtime.AddComplex64Arg(_f, size)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// ArrowButton square button with an arrow shape
//foreign code:
//  auto r = ImGui::ArrowButton(str_id, dir)
func ArrowButton(str_id string, dir ImGuiDir) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000012f)
	runtime.AddStringArg(_f, str_id)
	runtime.AddIntArg(_f, dir)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// RadioButton use with e.g. if (RadioButton("one", my_value==1)) { my_value = 1; }
//foreign code:
//  auto r = ImGui::RadioButton(label, active)
func RadioButton(label string, active bool) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000130)
	runtime.AddStringArg(_f, label)
	runtime.AddBoolArg(_f, active)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func ProgressBar(fraction float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000131)
	runtime.AddFloat32Arg(_f, fraction)
	_f.CallProcedure()

}

func ProgressBarV(fraction float32, size_arg ImVec2 /* = ImVec2(-FLT_MIN, 0)*/, overlay string /* = NULL*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000132)
	runtime.AddFloat32Arg(_f, fraction)
	runtime.AddComplex64Arg(_f, size_arg)
	runtime.AddStringArg(_f, overlay)
	_f.CallProcedure()

}

// Bullet draw a small circle + keep the cursor on the same line. advance cursor x position by GetTreeNodeToLabelSpacing(), same distance that TreeNode() uses
//foreign code:
//  ImGui::Bullet()
func Bullet() {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000133)
	_f.CallProcedure()

}

func Image(user_texture_id ImTextureID, image_size ImVec2) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000134)
	runtime.AddUintptrArg(_f, user_texture_id)
	runtime.AddComplex64Arg(_f, image_size)
	_f.CallProcedure()

}

func ImageV(user_texture_id ImTextureID, image_size ImVec2, uv0 ImVec2 /* = ImVec2(0, 0)*/, uv1 ImVec2 /* = ImVec2(1, 1)*/, tint_col ImVec4 /* = ImVec4(1, 1, 1, 1)*/, border_col ImVec4 /* = ImVec4(0, 0, 0, 0)*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000135)
	runtime.AddUintptrArg(_f, user_texture_id)
	runtime.AddComplex64Arg(_f, image_size)
	runtime.AddComplex64Arg(_f, uv0)
	runtime.AddComplex64Arg(_f, uv1)
	runtime.AddFloat32Array4Arg(_f, tint_col)
	runtime.AddFloat32Array4Arg(_f, border_col)
	_f.CallProcedure()

}

func ImageButton(str_id string, user_texture_id ImTextureID, image_size ImVec2) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000136)
	runtime.AddStringArg(_f, str_id)
	runtime.AddUintptrArg(_f, user_texture_id)
	runtime.AddComplex64Arg(_f, image_size)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func ImageButtonV(str_id string, user_texture_id ImTextureID, image_size ImVec2, uv0 ImVec2 /* = ImVec2(0, 0)*/, uv1 ImVec2 /* = ImVec2(1, 1)*/, bg_col ImVec4 /* = ImVec4(0, 0, 0, 0)*/, tint_col ImVec4 /* = ImVec4(1, 1, 1, 1)*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000137)
	runtime.AddStringArg(_f, str_id)
	runtime.AddUintptrArg(_f, user_texture_id)
	runtime.AddComplex64Arg(_f, image_size)
	runtime.AddComplex64Arg(_f, uv0)
	runtime.AddComplex64Arg(_f, uv1)
	runtime.AddFloat32Array4Arg(_f, bg_col)
	runtime.AddFloat32Array4Arg(_f, tint_col)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func BeginCombo(label string, preview_value string) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000138)
	runtime.AddStringArg(_f, label)
	runtime.AddStringArg(_f, preview_value)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func BeginComboV(label string, preview_value string, flags ImGuiComboFlags /* = 0*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000139)
	runtime.AddStringArg(_f, label)
	runtime.AddStringArg(_f, preview_value)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// EndCombo only call EndCombo() if BeginCombo() returns true!
//foreign code:
//  ImGui::EndCombo()
func EndCombo() {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000013a)
	_f.CallProcedure()

}

// ColorButton display a color square/button, hover for details, return true when pressed.
//foreign code:
//  auto r = ImGui::ColorButton(desc_id, col)
func ColorButton(desc_id string, col ImVec4) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000013b)
	runtime.AddStringArg(_f, desc_id)
	runtime.AddFloat32Array4Arg(_f, col)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// ColorButtonV display a color square/button, hover for details, return true when pressed.
// * flags ImGuiColorEditFlags = 0
// * size const ImVec2 & = ImVec2(0, 0)
//foreign code:
//  auto r = ImGui::ColorButton(desc_id, col, flags, size)
func ColorButtonV(desc_id string, col ImVec4, flags ImGuiColorEditFlags /* = 0*/, size ImVec2 /* = ImVec2(0, 0)*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000013c)
	runtime.AddStringArg(_f, desc_id)
	runtime.AddFloat32Array4Arg(_f, col)
	runtime.AddIntArg(_f, flags)
	runtime.AddComplex64Arg(_f, size)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// SetColorEditOptions initialize current options (generally on application startup) if you want to select a default format, picker type, etc. User will be able to change many settings, unless you pass the _NoOptions flag to your calls.
//foreign code:
//  ImGui::SetColorEditOptions(flags)
func SetColorEditOptions(flags ImGuiColorEditFlags) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000013d)
	runtime.AddIntArg(_f, flags)
	_f.CallProcedure()

}

func TreeNode(label string) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000013e)
	runtime.AddStringArg(_f, label)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func TreeNodeEx(label string) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000013f)
	runtime.AddStringArg(_f, label)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func TreeNodeExV(label string, flags ImGuiTreeNodeFlags /* = 0*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000140)
	runtime.AddStringArg(_f, label)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// TreePush ~ Indent()+PushID(). Already called by TreeNode() when returning true, but you can call TreePush/TreePop yourself if desired.
//foreign code:
//  ImGui::TreePush(str_id)
func TreePush(str_id string) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000141)
	runtime.AddStringArg(_f, str_id)
	_f.CallProcedure()

}

// TreePop ~ Unindent()+PopID()
//foreign code:
//  ImGui::TreePop()
func TreePop() {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000142)
	_f.CallProcedure()

}

// GetTreeNodeToLabelSpacing horizontal distance preceding label when using TreeNode*() or Bullet() == (g.FontSize + style.FramePadding.x*2) for a regular unframed TreeNode
//foreign code:
//  auto r = ImGui::GetTreeNodeToLabelSpacing()
func GetTreeNodeToLabelSpacing() (r float32) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000143)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetFloat32Retr[float32](_f))

	return
}

// CollapsingHeader if returning 'true' the header is open. doesn't indent nor push on ID stack. user doesn't have to call TreePop().
//foreign code:
//  auto r = ImGui::CollapsingHeader(label)
func CollapsingHeader(label string) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000144)
	runtime.AddStringArg(_f, label)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// CollapsingHeaderV if returning 'true' the header is open. doesn't indent nor push on ID stack. user doesn't have to call TreePop().
// * flags ImGuiTreeNodeFlags = 0
//foreign code:
//  auto r = ImGui::CollapsingHeader(label, flags)
func CollapsingHeaderV(label string, flags ImGuiTreeNodeFlags /* = 0*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000145)
	runtime.AddStringArg(_f, label)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// SetNextItemOpen set next TreeNode/CollapsingHeader open state.
//foreign code:
//  ImGui::SetNextItemOpen(is_open)
func SetNextItemOpen(is_open bool) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000146)
	runtime.AddBoolArg(_f, is_open)
	_f.CallProcedure()

}

// SetNextItemOpenV set next TreeNode/CollapsingHeader open state.
// * cond ImGuiCond = 0
//foreign code:
//  ImGui::SetNextItemOpen(is_open, cond)
func SetNextItemOpenV(is_open bool, cond ImGuiCond /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000147)
	runtime.AddBoolArg(_f, is_open)
	runtime.AddIntArg(_f, cond)
	_f.CallProcedure()

}

// Selectable "bool selected" carry the selection state (read-only). Selectable() is clicked is returns true so you can modify your selection state. size.x==0.0: use remaining width, size.x>0.0: specify width. size.y==0.0: use label height, size.y>0.0: specify height
//foreign code:
//  auto r = ImGui::Selectable(label)
func Selectable(label string) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000148)
	runtime.AddStringArg(_f, label)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// SelectableV "bool selected" carry the selection state (read-only). Selectable() is clicked is returns true so you can modify your selection state. size.x==0.0: use remaining width, size.x>0.0: specify width. size.y==0.0: use label height, size.y>0.0: specify height
// * selected bool = false
// * flags ImGuiSelectableFlags = 0
// * size const ImVec2 & = ImVec2(0, 0)
//foreign code:
//  auto r = ImGui::Selectable(label, selected, flags, size)
func SelectableV(label string, selected bool /* = false*/, flags ImGuiSelectableFlags /* = 0*/, size ImVec2 /* = ImVec2(0, 0)*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000149)
	runtime.AddStringArg(_f, label)
	runtime.AddBoolArg(_f, selected)
	runtime.AddIntArg(_f, flags)
	runtime.AddComplex64Arg(_f, size)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// BeginListBox open a framed scrolling region
//foreign code:
//  auto r = ImGui::BeginListBox(label)
func BeginListBox(label string) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000014a)
	runtime.AddStringArg(_f, label)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// BeginListBoxV open a framed scrolling region
// * size const ImVec2 & = ImVec2(0, 0)
//foreign code:
//  auto r = ImGui::BeginListBox(label, size)
func BeginListBoxV(label string, size ImVec2 /* = ImVec2(0, 0)*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000014b)
	runtime.AddStringArg(_f, label)
	runtime.AddComplex64Arg(_f, size)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// EndListBox only call EndListBox() if BeginListBox() returned true!
//foreign code:
//  ImGui::EndListBox()
func EndListBox() {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000014c)
	_f.CallProcedure()

}

// BeginMenuBar append to menu-bar of current window (requires ImGuiWindowFlags_MenuBar flag set on parent window).
//foreign code:
//  auto r = ImGui::BeginMenuBar()
func BeginMenuBar() (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000014d)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// EndMenuBar only call EndMenuBar() if BeginMenuBar() returns true!
//foreign code:
//  ImGui::EndMenuBar()
func EndMenuBar() {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000014e)
	_f.CallProcedure()

}

// BeginMainMenuBar create and append to a full screen menu-bar.
//foreign code:
//  auto r = ImGui::BeginMainMenuBar()
func BeginMainMenuBar() (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000014f)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// EndMainMenuBar only call EndMainMenuBar() if BeginMainMenuBar() returns true!
//foreign code:
//  ImGui::EndMainMenuBar()
func EndMainMenuBar() {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000150)
	_f.CallProcedure()

}

// BeginMenu create a sub-menu entry. only call EndMenu() if this returns true!
//foreign code:
//  auto r = ImGui::BeginMenu(label)
func BeginMenu(label string) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000151)
	runtime.AddStringArg(_f, label)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// BeginMenuV create a sub-menu entry. only call EndMenu() if this returns true!
// * enabled bool = true
//foreign code:
//  auto r = ImGui::BeginMenu(label, enabled)
func BeginMenuV(label string, enabled bool /* = true*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000152)
	runtime.AddStringArg(_f, label)
	runtime.AddBoolArg(_f, enabled)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// EndMenu only call EndMenu() if BeginMenu() returns true!
//foreign code:
//  ImGui::EndMenu()
func EndMenu() {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000153)
	_f.CallProcedure()

}

// MenuItem return true when activated.
//foreign code:
//  auto r = ImGui::MenuItem(label)
func MenuItem(label string) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000154)
	runtime.AddStringArg(_f, label)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// MenuItemV return true when activated.
// * shortcut const char * = NULL
// * selected bool = false
// * enabled bool = true
//foreign code:
//  auto r = ImGui::MenuItem(label, shortcut, selected, enabled)
func MenuItemV(label string, shortcut string /* = NULL*/, selected bool /* = false*/, enabled bool /* = true*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000155)
	runtime.AddStringArg(_f, label)
	runtime.AddStringArg(_f, shortcut)
	runtime.AddBoolArg(_f, selected)
	runtime.AddBoolArg(_f, enabled)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// BeginTooltip begin/append a tooltip window.
//foreign code:
//  auto r = ImGui::BeginTooltip()
func BeginTooltip() (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000156)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// EndTooltip only call EndTooltip() if BeginTooltip()/BeginItemTooltip() returns true!
//foreign code:
//  ImGui::EndTooltip()
func EndTooltip() {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000157)
	_f.CallProcedure()

}

// BeginItemTooltip begin/append a tooltip window if preceding item was hovered.
//foreign code:
//  auto r = ImGui::BeginItemTooltip()
func BeginItemTooltip() (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000158)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// BeginPopup return true if the popup is open, and you can start outputting to it.
//foreign code:
//  auto r = ImGui::BeginPopup(str_id)
func BeginPopup(str_id string) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000159)
	runtime.AddStringArg(_f, str_id)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// BeginPopupV return true if the popup is open, and you can start outputting to it.
// * flags ImGuiWindowFlags = 0
//foreign code:
//  auto r = ImGui::BeginPopup(str_id, flags)
func BeginPopupV(str_id string, flags ImGuiWindowFlags /* = 0*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000015a)
	runtime.AddStringArg(_f, str_id)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// BeginPopupModal return true if the modal is open, and you can start outputting to it.
//foreign code:
//  auto r = ImGui::BeginPopupModal(name)
func BeginPopupModal(name string) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000015b)
	runtime.AddStringArg(_f, name)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// BeginPopupModalV return true if the modal is open, and you can start outputting to it.
// * p_open bool * = NULL
// * flags ImGuiWindowFlags = 0
//foreign code:
//  p_open = true; /* see issue #5 */
//  auto r = ImGui::BeginPopupModal(name, &p_open, flags)
func BeginPopupModalV(name string, flags ImGuiWindowFlags /* = 0*/) (r bool, p_open bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000015c)
	runtime.AddStringArg(_f, name)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))
	p_open = (runtime.GetBoolRetr[bool](_f))

	return
}

// EndPopup only call EndPopup() if BeginPopupXXX() returns true!
//foreign code:
//  ImGui::EndPopup()
func EndPopup() {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000015d)
	_f.CallProcedure()

}

// OpenPopup call to mark popup as open (don't call every frame!).
//foreign code:
//  ImGui::OpenPopup(str_id)
func OpenPopup(str_id string) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000015e)
	runtime.AddStringArg(_f, str_id)
	_f.CallProcedure()

}

// OpenPopupV call to mark popup as open (don't call every frame!).
// * popup_flags ImGuiPopupFlags = 0
//foreign code:
//  ImGui::OpenPopup(str_id, popup_flags)
func OpenPopupV(str_id string, popup_flags ImGuiPopupFlags /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000015f)
	runtime.AddStringArg(_f, str_id)
	runtime.AddIntArg(_f, popup_flags)
	_f.CallProcedure()

}

// OpenPopup id overload to facilitate calling from nested stacks
//foreign code:
//  ImGui::OpenPopup(id)
func OpenPopupID(id ImGuiID) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000160)
	runtime.AddUint32Arg(_f, id)
	_f.CallProcedure()

}

// OpenPopupV id overload to facilitate calling from nested stacks
// * popup_flags ImGuiPopupFlags = 0
//foreign code:
//  ImGui::OpenPopup(id, popup_flags)
func OpenPopupVID(id ImGuiID, popup_flags ImGuiPopupFlags /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000161)
	runtime.AddUint32Arg(_f, id)
	runtime.AddIntArg(_f, popup_flags)
	_f.CallProcedure()

}

// OpenPopupOnItemClick helper to open popup when clicked on last item. Default to ImGuiPopupFlags_MouseButtonRight == 1. (note: actually triggers on the mouse _released_ event to be consistent with popup behaviors)
//foreign code:
//  ImGui::OpenPopupOnItemClick()
func OpenPopupOnItemClick() {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000162)
	_f.CallProcedure()

}

// OpenPopupOnItemClickV helper to open popup when clicked on last item. Default to ImGuiPopupFlags_MouseButtonRight == 1. (note: actually triggers on the mouse _released_ event to be consistent with popup behaviors)
// * str_id const char * = NULL
// * popup_flags ImGuiPopupFlags = 1
//foreign code:
//  ImGui::OpenPopupOnItemClick(str_id, popup_flags)
func OpenPopupOnItemClickV(str_id string /* = NULL*/, popup_flags ImGuiPopupFlags /* = 1*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000163)
	runtime.AddStringArg(_f, str_id)
	runtime.AddIntArg(_f, popup_flags)
	_f.CallProcedure()

}

// CloseCurrentPopup manually close the popup we have begin-ed into.
//foreign code:
//  ImGui::CloseCurrentPopup()
func CloseCurrentPopup() {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000164)
	_f.CallProcedure()

}

// BeginPopupContextItem open+begin popup when clicked on last item. Use str_id==NULL to associate the popup to previous item. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!
//foreign code:
//  auto r = ImGui::BeginPopupContextItem()
func BeginPopupContextItem() (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000165)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// BeginPopupContextItemV open+begin popup when clicked on last item. Use str_id==NULL to associate the popup to previous item. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!
// * str_id const char * = NULL
// * popup_flags ImGuiPopupFlags = 1
//foreign code:
//  auto r = ImGui::BeginPopupContextItem(str_id, popup_flags)
func BeginPopupContextItemV(str_id string /* = NULL*/, popup_flags ImGuiPopupFlags /* = 1*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000166)
	runtime.AddStringArg(_f, str_id)
	runtime.AddIntArg(_f, popup_flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// BeginPopupContextWindow open+begin popup when clicked on current window.
//foreign code:
//  auto r = ImGui::BeginPopupContextWindow()
func BeginPopupContextWindow() (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000167)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// BeginPopupContextWindowV open+begin popup when clicked on current window.
// * str_id const char * = NULL
// * popup_flags ImGuiPopupFlags = 1
//foreign code:
//  auto r = ImGui::BeginPopupContextWindow(str_id, popup_flags)
func BeginPopupContextWindowV(str_id string /* = NULL*/, popup_flags ImGuiPopupFlags /* = 1*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000168)
	runtime.AddStringArg(_f, str_id)
	runtime.AddIntArg(_f, popup_flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// BeginPopupContextVoid open+begin popup when clicked in void (where there are no windows).
//foreign code:
//  auto r = ImGui::BeginPopupContextVoid()
func BeginPopupContextVoid() (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000169)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// BeginPopupContextVoidV open+begin popup when clicked in void (where there are no windows).
// * str_id const char * = NULL
// * popup_flags ImGuiPopupFlags = 1
//foreign code:
//  auto r = ImGui::BeginPopupContextVoid(str_id, popup_flags)
func BeginPopupContextVoidV(str_id string /* = NULL*/, popup_flags ImGuiPopupFlags /* = 1*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000016a)
	runtime.AddStringArg(_f, str_id)
	runtime.AddIntArg(_f, popup_flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsPopupOpen return true if the popup is open.
//foreign code:
//  auto r = ImGui::IsPopupOpen(str_id)
func IsPopupOpen(str_id string) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000016b)
	runtime.AddStringArg(_f, str_id)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsPopupOpenV return true if the popup is open.
// * flags ImGuiPopupFlags = 0
//foreign code:
//  auto r = ImGui::IsPopupOpen(str_id, flags)
func IsPopupOpenV(str_id string, flags ImGuiPopupFlags /* = 0*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000016c)
	runtime.AddStringArg(_f, str_id)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func BeginTable(str_id string, column int) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000016d)
	runtime.AddStringArg(_f, str_id)
	runtime.AddIntArg(_f, column)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func BeginTableV(str_id string, column int, flags ImGuiTableFlags /* = 0*/, outer_size ImVec2 /* = ImVec2(0.0f, 0.0f)*/, inner_width float32 /* = 0.0f*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000016e)
	runtime.AddStringArg(_f, str_id)
	runtime.AddIntArg(_f, column)
	runtime.AddIntArg(_f, flags)
	runtime.AddComplex64Arg(_f, outer_size)
	runtime.AddFloat32Arg(_f, inner_width)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// EndTable only call EndTable() if BeginTable() returns true!
//foreign code:
//  ImGui::EndTable()
func EndTable() {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000016f)
	_f.CallProcedure()

}

// TableNextRow append into the first cell of a new row.
//foreign code:
//  ImGui::TableNextRow()
func TableNextRow() {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000170)
	_f.CallProcedure()

}

// TableNextRowV append into the first cell of a new row.
// * row_flags ImGuiTableRowFlags = 0
// * min_row_height float = 0.0f
//foreign code:
//  ImGui::TableNextRow(row_flags, min_row_height)
func TableNextRowV(row_flags ImGuiTableRowFlags /* = 0*/, min_row_height float32 /* = 0.0f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000171)
	runtime.AddIntArg(_f, row_flags)
	runtime.AddFloat32Arg(_f, min_row_height)
	_f.CallProcedure()

}

// TableNextColumn append into the next column (or first column of next row if currently in last column). Return true when column is visible.
//foreign code:
//  auto r = ImGui::TableNextColumn()
func TableNextColumn() (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000172)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// TableSetColumnIndex append into the specified column. Return true when column is visible.
//foreign code:
//  auto r = ImGui::TableSetColumnIndex(column_n)
func TableSetColumnIndex(column_n int) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000173)
	runtime.AddIntArg(_f, column_n)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func TableSetupColumn(label string) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000174)
	runtime.AddStringArg(_f, label)
	_f.CallProcedure()

}

func TableSetupColumnV(label string, flags ImGuiTableColumnFlags /* = 0*/, init_width_or_weight float32 /* = 0.0f*/, user_id ImGuiID /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000175)
	runtime.AddStringArg(_f, label)
	runtime.AddIntArg(_f, flags)
	runtime.AddFloat32Arg(_f, init_width_or_weight)
	runtime.AddUint32Arg(_f, user_id)
	_f.CallProcedure()

}

// TableSetupScrollFreeze lock columns/rows so they stay visible when scrolled.
//foreign code:
//  ImGui::TableSetupScrollFreeze(cols, rows)
func TableSetupScrollFreeze(cols int, rows int) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000176)
	runtime.AddIntArg(_f, cols)
	runtime.AddIntArg(_f, rows)
	_f.CallProcedure()

}

// TableHeader submit one header cell manually (rarely used)
//foreign code:
//  ImGui::TableHeader(label)
func TableHeader(label string) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000177)
	runtime.AddStringArg(_f, label)
	_f.CallProcedure()

}

// TableHeadersRow submit a row with headers cells based on data provided to TableSetupColumn() + submit context menu
//foreign code:
//  ImGui::TableHeadersRow()
func TableHeadersRow() {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000178)
	_f.CallProcedure()

}

// TableAngledHeadersRow submit a row with angled headers for every column with the ImGuiTableColumnFlags_AngledHeader flag. MUST BE FIRST ROW.
//foreign code:
//  ImGui::TableAngledHeadersRow()
func TableAngledHeadersRow() {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000179)
	_f.CallProcedure()

}

// TableGetColumnCount return number of columns (value passed to BeginTable)
//foreign code:
//  auto r = ImGui::TableGetColumnCount()
func TableGetColumnCount() (r int) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000017a)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetIntRetr[int](_f))

	return
}

// TableGetColumnIndex return current column index.
//foreign code:
//  auto r = ImGui::TableGetColumnIndex()
func TableGetColumnIndex() (r int) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000017b)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetIntRetr[int](_f))

	return
}

// TableGetRowIndex return current row index.
//foreign code:
//  auto r = ImGui::TableGetRowIndex()
func TableGetRowIndex() (r int) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000017c)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetIntRetr[int](_f))

	return
}

// TableGetColumnName return "" if column didn't have a name declared by TableSetupColumn(). Pass -1 to use current column.
//foreign code:
//  auto r = ImGui::TableGetColumnName()
func TableGetColumnName() (r string) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000017d)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetStringRetr[string](_f))

	return
}

// TableGetColumnNameV return "" if column didn't have a name declared by TableSetupColumn(). Pass -1 to use current column.
// * column_n int = -1
//foreign code:
//  auto r = ImGui::TableGetColumnName(column_n)
func TableGetColumnNameV(column_n int /* = -1*/) (r string) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000017e)
	runtime.AddIntArg(_f, column_n)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetStringRetr[string](_f))

	return
}

// TableGetColumnFlags return column flags so you can query their Enabled/Visible/Sorted/Hovered status flags. Pass -1 to use current column.
//foreign code:
//  auto r = ImGui::TableGetColumnFlags()
func TableGetColumnFlags() (r ImGuiTableColumnFlags) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000017f)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImGuiTableColumnFlags(runtime.GetIntRetr[int](_f))

	return
}

// TableGetColumnFlagsV return column flags so you can query their Enabled/Visible/Sorted/Hovered status flags. Pass -1 to use current column.
// * column_n int = -1
//foreign code:
//  auto r = ImGui::TableGetColumnFlags(column_n)
func TableGetColumnFlagsV(column_n int /* = -1*/) (r ImGuiTableColumnFlags) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000180)
	runtime.AddIntArg(_f, column_n)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImGuiTableColumnFlags(runtime.GetIntRetr[int](_f))

	return
}

// TableSetColumnEnabled change user accessible enabled/disabled state of a column. Set to false to hide the column. User can use the context menu to change this themselves (right-click in headers, or right-click in columns body with ImGuiTableFlags_ContextMenuInBody)
//foreign code:
//  ImGui::TableSetColumnEnabled(column_n, v)
func TableSetColumnEnabled(column_n int, v bool) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000181)
	runtime.AddIntArg(_f, column_n)
	runtime.AddBoolArg(_f, v)
	_f.CallProcedure()

}

// TableSetBgColor change the color of a cell, row, or column. See ImGuiTableBgTarget_ flags for details.
//foreign code:
//  ImGui::TableSetBgColor(target, color)
func TableSetBgColor(target ImGuiTableBgTarget, color uint32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000182)
	runtime.AddIntArg(_f, target)
	runtime.AddUint32Arg(_f, color)
	_f.CallProcedure()

}

// TableSetBgColorV change the color of a cell, row, or column. See ImGuiTableBgTarget_ flags for details.
// * column_n int = -1
//foreign code:
//  ImGui::TableSetBgColor(target, color, column_n)
func TableSetBgColorV(target ImGuiTableBgTarget, color uint32, column_n int /* = -1*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000183)
	runtime.AddIntArg(_f, target)
	runtime.AddUint32Arg(_f, color)
	runtime.AddIntArg(_f, column_n)
	_f.CallProcedure()

}

func Columns() {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000184)
	_f.CallProcedure()

}

func ColumnsV(count int /* = 1*/, id string /* = NULL*/, border bool /* = true*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000185)
	runtime.AddIntArg(_f, count)
	runtime.AddStringArg(_f, id)
	runtime.AddBoolArg(_f, border)
	_f.CallProcedure()

}

// NextColumn next column, defaults to current row or next row if the current row is finished
//foreign code:
//  ImGui::NextColumn()
func NextColumn() {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000186)
	_f.CallProcedure()

}

// GetColumnIndex get current column index
//foreign code:
//  auto r = ImGui::GetColumnIndex()
func GetColumnIndex() (r int) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000187)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetIntRetr[int](_f))

	return
}

// GetColumnWidth get column width (in pixels). pass -1 to use current column
//foreign code:
//  auto r = ImGui::GetColumnWidth()
func GetColumnWidth() (r float32) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000188)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetFloat32Retr[float32](_f))

	return
}

// GetColumnWidthV get column width (in pixels). pass -1 to use current column
// * column_index int = -1
//foreign code:
//  auto r = ImGui::GetColumnWidth(column_index)
func GetColumnWidthV(column_index int /* = -1*/) (r float32) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000189)
	runtime.AddIntArg(_f, column_index)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetFloat32Retr[float32](_f))

	return
}

// SetColumnWidth set column width (in pixels). pass -1 to use current column
//foreign code:
//  ImGui::SetColumnWidth(column_index, width)
func SetColumnWidth(column_index int, width float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000018a)
	runtime.AddIntArg(_f, column_index)
	runtime.AddFloat32Arg(_f, width)
	_f.CallProcedure()

}

// GetColumnOffset get position of column line (in pixels, from the left side of the contents region). pass -1 to use current column, otherwise 0..GetColumnsCount() inclusive. column 0 is typically 0.0f
//foreign code:
//  auto r = ImGui::GetColumnOffset()
func GetColumnOffset() (r float32) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000018b)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetFloat32Retr[float32](_f))

	return
}

// GetColumnOffsetV get position of column line (in pixels, from the left side of the contents region). pass -1 to use current column, otherwise 0..GetColumnsCount() inclusive. column 0 is typically 0.0f
// * column_index int = -1
//foreign code:
//  auto r = ImGui::GetColumnOffset(column_index)
func GetColumnOffsetV(column_index int /* = -1*/) (r float32) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000018c)
	runtime.AddIntArg(_f, column_index)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetFloat32Retr[float32](_f))

	return
}

// SetColumnOffset set position of column line (in pixels, from the left side of the contents region). pass -1 to use current column
//foreign code:
//  ImGui::SetColumnOffset(column_index, offset_x)
func SetColumnOffset(column_index int, offset_x float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000018d)
	runtime.AddIntArg(_f, column_index)
	runtime.AddFloat32Arg(_f, offset_x)
	_f.CallProcedure()

}

func GetColumnsCount() (r int) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000018e)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetIntRetr[int](_f))

	return
}

// BeginTabBar create and append into a TabBar
//foreign code:
//  auto r = ImGui::BeginTabBar(str_id)
func BeginTabBar(str_id string) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000018f)
	runtime.AddStringArg(_f, str_id)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// BeginTabBarV create and append into a TabBar
// * flags ImGuiTabBarFlags = 0
//foreign code:
//  auto r = ImGui::BeginTabBar(str_id, flags)
func BeginTabBarV(str_id string, flags ImGuiTabBarFlags /* = 0*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000190)
	runtime.AddStringArg(_f, str_id)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// EndTabBar only call EndTabBar() if BeginTabBar() returns true!
//foreign code:
//  ImGui::EndTabBar()
func EndTabBar() {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000191)
	_f.CallProcedure()

}

// BeginTabItem create a Tab. Returns true if the Tab is selected.
//foreign code:
//  auto r = ImGui::BeginTabItem(label)
func BeginTabItem(label string) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000192)
	runtime.AddStringArg(_f, label)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// BeginTabItemV create a Tab. Returns true if the Tab is selected.
// * p_open bool * = NULL
// * flags ImGuiTabItemFlags = 0
//foreign code:
//  p_open = true; /* see issue #5 */
//  auto r = ImGui::BeginTabItem(label, &p_open, flags)
func BeginTabItemV(label string, flags ImGuiTabItemFlags /* = 0*/) (r bool, p_open bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000193)
	runtime.AddStringArg(_f, label)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))
	p_open = (runtime.GetBoolRetr[bool](_f))

	return
}

// EndTabItem only call EndTabItem() if BeginTabItem() returns true!
//foreign code:
//  ImGui::EndTabItem()
func EndTabItem() {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000194)
	_f.CallProcedure()

}

// TabItemButton create a Tab behaving like a button. return true when clicked. cannot be selected in the tab bar.
//foreign code:
//  auto r = ImGui::TabItemButton(label)
func TabItemButton(label string) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000195)
	runtime.AddStringArg(_f, label)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// TabItemButtonV create a Tab behaving like a button. return true when clicked. cannot be selected in the tab bar.
// * flags ImGuiTabItemFlags = 0
//foreign code:
//  auto r = ImGui::TabItemButton(label, flags)
func TabItemButtonV(label string, flags ImGuiTabItemFlags /* = 0*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000196)
	runtime.AddStringArg(_f, label)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// SetTabItemClosed notify TabBar or Docking system of a closed tab/window ahead (useful to reduce visual flicker on reorderable tab bars). For tab-bar: call after BeginTabBar() and before Tab submissions. Otherwise call with a window name.
//foreign code:
//  ImGui::SetTabItemClosed(tab_or_docked_window_label)
func SetTabItemClosed(tab_or_docked_window_label string) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000197)
	runtime.AddStringArg(_f, tab_or_docked_window_label)
	_f.CallProcedure()

}

func DockSpace(id ImGuiID) (r ImGuiID) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000198)
	runtime.AddUint32Arg(_f, id)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImGuiID(runtime.GetUint32Retr[uint32](_f))

	return
}

func DockSpaceOverViewport() (r ImGuiID) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000199)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImGuiID(runtime.GetUint32Retr[uint32](_f))

	return
}

// SetNextWindowDockID set next window dock id
//foreign code:
//  ImGui::SetNextWindowDockID(dock_id)
func SetNextWindowDockID(dock_id ImGuiID) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000019a)
	runtime.AddUint32Arg(_f, dock_id)
	_f.CallProcedure()

}

// SetNextWindowDockIDV set next window dock id
// * cond ImGuiCond = 0
//foreign code:
//  ImGui::SetNextWindowDockID(dock_id, cond)
func SetNextWindowDockIDV(dock_id ImGuiID, cond ImGuiCond /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000019b)
	runtime.AddUint32Arg(_f, dock_id)
	runtime.AddIntArg(_f, cond)
	_f.CallProcedure()

}

func GetWindowDockID() (r ImGuiID) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000019c)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImGuiID(runtime.GetUint32Retr[uint32](_f))

	return
}

// IsWindowDocked is current window docked into another window?
//foreign code:
//  auto r = ImGui::IsWindowDocked()
func IsWindowDocked() (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000019d)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// LogToTTY start logging to tty (stdout)
//foreign code:
//  ImGui::LogToTTY()
func LogToTTY() {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000019e)
	_f.CallProcedure()

}

// LogToTTYV start logging to tty (stdout)
// * auto_open_depth int = -1
//foreign code:
//  ImGui::LogToTTY(auto_open_depth)
func LogToTTYV(auto_open_depth int /* = -1*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000019f)
	runtime.AddIntArg(_f, auto_open_depth)
	_f.CallProcedure()

}

// LogToFile start logging to file
//foreign code:
//  ImGui::LogToFile()
func LogToFile() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001a0)
	_f.CallProcedure()

}

// LogToFileV start logging to file
// * auto_open_depth int = -1
// * filename const char * = NULL
//foreign code:
//  ImGui::LogToFile(auto_open_depth, filename)
func LogToFileV(auto_open_depth int /* = -1*/, filename string /* = NULL*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001a1)
	runtime.AddIntArg(_f, auto_open_depth)
	runtime.AddStringArg(_f, filename)
	_f.CallProcedure()

}

// LogToClipboard start logging to OS clipboard
//foreign code:
//  ImGui::LogToClipboard()
func LogToClipboard() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001a2)
	_f.CallProcedure()

}

// LogToClipboardV start logging to OS clipboard
// * auto_open_depth int = -1
//foreign code:
//  ImGui::LogToClipboard(auto_open_depth)
func LogToClipboardV(auto_open_depth int /* = -1*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001a3)
	runtime.AddIntArg(_f, auto_open_depth)
	_f.CallProcedure()

}

// LogFinish stop logging (close file, etc.)
//foreign code:
//  ImGui::LogFinish()
func LogFinish() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001a4)
	_f.CallProcedure()

}

// LogButtons helper to display buttons for logging to tty/file/clipboard
//foreign code:
//  ImGui::LogButtons()
func LogButtons() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001a5)
	_f.CallProcedure()

}

// BeginDragDropSource call after submitting an item which may be dragged. when this return true, you can call SetDragDropPayload() + EndDragDropSource()
//foreign code:
//  auto r = ImGui::BeginDragDropSource()
func BeginDragDropSource() (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001a6)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// BeginDragDropSourceV call after submitting an item which may be dragged. when this return true, you can call SetDragDropPayload() + EndDragDropSource()
// * flags ImGuiDragDropFlags = 0
//foreign code:
//  auto r = ImGui::BeginDragDropSource(flags)
func BeginDragDropSourceV(flags ImGuiDragDropFlags /* = 0*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001a7)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// EndDragDropSource only call EndDragDropSource() if BeginDragDropSource() returns true!
//foreign code:
//  ImGui::EndDragDropSource()
func EndDragDropSource() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001a8)
	_f.CallProcedure()

}

// BeginDragDropTarget call after submitting an item that may receive a payload. If this returns true, you can call AcceptDragDropPayload() + EndDragDropTarget()
//foreign code:
//  auto r = ImGui::BeginDragDropTarget()
func BeginDragDropTarget() (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001a9)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// EndDragDropTarget only call EndDragDropTarget() if BeginDragDropTarget() returns true!
//foreign code:
//  ImGui::EndDragDropTarget()
func EndDragDropTarget() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001aa)
	_f.CallProcedure()

}

func BeginDisabled() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001ab)
	_f.CallProcedure()

}

func BeginDisabledV(disabled bool /* = true*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001ac)
	runtime.AddBoolArg(_f, disabled)
	_f.CallProcedure()

}

func EndDisabled() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001ad)
	_f.CallProcedure()

}

func PushClipRect(clip_rect_min ImVec2, clip_rect_max ImVec2, intersect_with_current_clip_rect bool) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001ae)
	runtime.AddComplex64Arg(_f, clip_rect_min)
	runtime.AddComplex64Arg(_f, clip_rect_max)
	runtime.AddBoolArg(_f, intersect_with_current_clip_rect)
	_f.CallProcedure()

}

func PopClipRect() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001af)
	_f.CallProcedure()

}

// SetItemDefaultFocus make last item the default focused item of a window.
//foreign code:
//  ImGui::SetItemDefaultFocus()
func SetItemDefaultFocus() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001b0)
	_f.CallProcedure()

}

// SetKeyboardFocusHere focus keyboard on the next widget. Use positive 'offset' to access sub components of a multiple component widget. Use -1 to access previous widget.
//foreign code:
//  ImGui::SetKeyboardFocusHere()
func SetKeyboardFocusHere() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001b1)
	_f.CallProcedure()

}

// SetKeyboardFocusHereV focus keyboard on the next widget. Use positive 'offset' to access sub components of a multiple component widget. Use -1 to access previous widget.
// * offset int = 0
//foreign code:
//  ImGui::SetKeyboardFocusHere(offset)
func SetKeyboardFocusHereV(offset int /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001b2)
	runtime.AddIntArg(_f, offset)
	_f.CallProcedure()

}

// SetNextItemAllowOverlap allow next item to be overlapped by a subsequent item. Useful with invisible buttons, selectable, treenode covering an area where subsequent items may need to be added. Note that both Selectable() and TreeNode() have dedicated flags doing this.
//foreign code:
//  ImGui::SetNextItemAllowOverlap()
func SetNextItemAllowOverlap() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001b3)
	_f.CallProcedure()

}

// IsItemHovered is the last item hovered? (and usable, aka not blocked by a popup, etc.). See ImGuiHoveredFlags for more options.
//foreign code:
//  auto r = ImGui::IsItemHovered()
func IsItemHovered() (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001b4)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsItemHoveredV is the last item hovered? (and usable, aka not blocked by a popup, etc.). See ImGuiHoveredFlags for more options.
// * flags ImGuiHoveredFlags = 0
//foreign code:
//  auto r = ImGui::IsItemHovered(flags)
func IsItemHoveredV(flags ImGuiHoveredFlags /* = 0*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001b5)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsItemActive is the last item active? (e.g. button being held, text field being edited. This will continuously return true while holding mouse button on an item. Items that don't interact will always return false)
//foreign code:
//  auto r = ImGui::IsItemActive()
func IsItemActive() (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001b6)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsItemFocused is the last item focused for keyboard/gamepad navigation?
//foreign code:
//  auto r = ImGui::IsItemFocused()
func IsItemFocused() (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001b7)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsItemClicked is the last item hovered and mouse clicked on? (**) == IsMouseClicked(mouse_button) && IsItemHovered()Important. (**) this is NOT equivalent to the behavior of e.g. Button(). Read comments in function definition.
//foreign code:
//  auto r = ImGui::IsItemClicked()
func IsItemClicked() (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001b8)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsItemClickedV is the last item hovered and mouse clicked on? (**) == IsMouseClicked(mouse_button) && IsItemHovered()Important. (**) this is NOT equivalent to the behavior of e.g. Button(). Read comments in function definition.
// * mouse_button ImGuiMouseButton = 0
//foreign code:
//  auto r = ImGui::IsItemClicked(mouse_button)
func IsItemClickedV(mouse_button ImGuiMouseButton /* = 0*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001b9)
	runtime.AddIntArg(_f, mouse_button)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsItemVisible is the last item visible? (items may be out of sight because of clipping/scrolling)
//foreign code:
//  auto r = ImGui::IsItemVisible()
func IsItemVisible() (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001ba)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsItemEdited did the last item modify its underlying value this frame? or was pressed? This is generally the same as the "bool" return value of many widgets.
//foreign code:
//  auto r = ImGui::IsItemEdited()
func IsItemEdited() (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001bb)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsItemActivated was the last item just made active (item was previously inactive).
//foreign code:
//  auto r = ImGui::IsItemActivated()
func IsItemActivated() (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001bc)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsItemDeactivated was the last item just made inactive (item was previously active). Useful for Undo/Redo patterns with widgets that require continuous editing.
//foreign code:
//  auto r = ImGui::IsItemDeactivated()
func IsItemDeactivated() (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001bd)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsItemDeactivatedAfterEdit was the last item just made inactive and made a value change when it was active? (e.g. Slider/Drag moved). Useful for Undo/Redo patterns with widgets that require continuous editing. Note that you may get false positives (some widgets such as Combo()/ListBox()/Selectable() will return true even when clicking an already selected item).
//foreign code:
//  auto r = ImGui::IsItemDeactivatedAfterEdit()
func IsItemDeactivatedAfterEdit() (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001be)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsItemToggledOpen was the last item open state toggled? set by TreeNode().
//foreign code:
//  auto r = ImGui::IsItemToggledOpen()
func IsItemToggledOpen() (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001bf)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsAnyItemHovered is any item hovered?
//foreign code:
//  auto r = ImGui::IsAnyItemHovered()
func IsAnyItemHovered() (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001c0)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsAnyItemActive is any item active?
//foreign code:
//  auto r = ImGui::IsAnyItemActive()
func IsAnyItemActive() (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001c1)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsAnyItemFocused is any item focused?
//foreign code:
//  auto r = ImGui::IsAnyItemFocused()
func IsAnyItemFocused() (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001c2)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// GetItemID get ID of last item (~~ often same ImGui::GetID(label) beforehand)
//foreign code:
//  auto r = ImGui::GetItemID()
func GetItemID() (r ImGuiID) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001c3)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImGuiID(runtime.GetUint32Retr[uint32](_f))

	return
}

// GetItemRectMin get upper-left bounding rectangle of the last item (screen space)
//foreign code:
//  auto r = ImGui::GetItemRectMin()
func GetItemRectMin() (r ImVec2) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001c4)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImVec2(runtime.GetComplex64Retr[complex64](_f))

	return
}

// GetItemRectMax get lower-right bounding rectangle of the last item (screen space)
//foreign code:
//  auto r = ImGui::GetItemRectMax()
func GetItemRectMax() (r ImVec2) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001c5)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImVec2(runtime.GetComplex64Retr[complex64](_f))

	return
}

// GetItemRectSize get size of last item
//foreign code:
//  auto r = ImGui::GetItemRectSize()
func GetItemRectSize() (r ImVec2) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001c6)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImVec2(runtime.GetComplex64Retr[complex64](_f))

	return
}

// GetBackgroundDrawList get background draw list for the viewport associated to the current window. this draw list will be the first rendering one. Useful to quickly draw shapes/text behind dear imgui contents.
//foreign code:
//  auto r = ImGui::GetBackgroundDrawList()
func GetBackgroundDrawList() (r ImDrawListPtr) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001c7)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImDrawListPtr(runtime.GetUintptrRetr[uintptr](_f))

	return
}

// GetForegroundDrawList get foreground draw list for the viewport associated to the current window. this draw list will be the last rendered one. Useful to quickly draw shapes/text over dear imgui contents.
//foreign code:
//  auto r = ImGui::GetForegroundDrawList()
func GetForegroundDrawList() (r ImDrawListPtr) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001c8)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImDrawListPtr(runtime.GetUintptrRetr[uintptr](_f))

	return
}

// IsRectVisible test if rectangle (of given size, starting from cursor position) is visible / not clipped.
//foreign code:
//  auto r = ImGui::IsRectVisible(size)
func IsRectVisible(size ImVec2) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001c9)
	runtime.AddComplex64Arg(_f, size)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsRectVisible test if rectangle (in screen space) is visible / not clipped. to perform coarse clipping on user's side.
//foreign code:
//  auto r = ImGui::IsRectVisible(rect_min, rect_max)
func IsRectVisible2(rect_min ImVec2, rect_max ImVec2) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001ca)
	runtime.AddComplex64Arg(_f, rect_min)
	runtime.AddComplex64Arg(_f, rect_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// GetTime get global imgui time. incremented by io.DeltaTime every frame.
//foreign code:
//  auto r = ImGui::GetTime()
func GetTime() (r float64) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001cb)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetFloat64Retr[float64](_f))

	return
}

// GetFrameCount get global imgui frame count. incremented by 1 every frame.
//foreign code:
//  auto r = ImGui::GetFrameCount()
func GetFrameCount() (r int) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001cc)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetIntRetr[int](_f))

	return
}

// GetStyleColorName get a string corresponding to the enum value (for display, saving, etc.).
//foreign code:
//  auto r = ImGui::GetStyleColorName(idx)
func GetStyleColorName(idx ImGuiCol) (r string) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001cd)
	runtime.AddIntArg(_f, idx)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetStringRetr[string](_f))

	return
}

func ColorConvertU32ToFloat4(in uint32) (r ImVec4) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001ce)
	runtime.AddUint32Arg(_f, in)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImVec4(runtime.GetFloat32Array4Retr[float32](_f))

	return
}

func ColorConvertFloat4ToU32(in ImVec4) (r uint32) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001cf)
	runtime.AddFloat32Array4Arg(_f, in)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetUint32Retr[uint32](_f))

	return
}

// IsKeyDown is key being held.
//foreign code:
//  auto r = ImGui::IsKeyDown(ImGuiKey(key))
func IsKeyDown(key ImGuiKey) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001d0)
	runtime.AddIntArg(_f, key)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsKeyPressed was key pressed (went from !Down to Down)? if repeat=true, uses io.KeyRepeatDelay / KeyRepeatRate
//foreign code:
//  auto r = ImGui::IsKeyPressed(ImGuiKey(key))
func IsKeyPressed(key ImGuiKey) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001d1)
	runtime.AddIntArg(_f, key)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsKeyPressedV was key pressed (went from !Down to Down)? if repeat=true, uses io.KeyRepeatDelay / KeyRepeatRate
// * repeat bool = true
//foreign code:
//  auto r = ImGui::IsKeyPressed(ImGuiKey(key), repeat)
func IsKeyPressedV(key ImGuiKey, repeat bool /* = true*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001d2)
	runtime.AddIntArg(_f, key)
	runtime.AddBoolArg(_f, repeat)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsKeyReleased was key released (went from Down to !Down)?
//foreign code:
//  auto r = ImGui::IsKeyReleased(ImGuiKey(key))
func IsKeyReleased(key ImGuiKey) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001d3)
	runtime.AddIntArg(_f, key)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// GetKeyPressedAmount uses provided repeat rate/delay. return a count, most often 0 or 1 but might be >1 if RepeatRate is small enough that DeltaTime > RepeatRate
//foreign code:
//  auto r = ImGui::GetKeyPressedAmount(ImGuiKey(key), repeat_delay, rate)
func GetKeyPressedAmount(key ImGuiKey, repeat_delay float32, rate float32) (r int) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001d4)
	runtime.AddIntArg(_f, key)
	runtime.AddFloat32Arg(_f, repeat_delay)
	runtime.AddFloat32Arg(_f, rate)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetIntRetr[int](_f))

	return
}

// GetKeyName [DEBUG] returns English name of the key. Those names a provided for debugging purpose and are not meant to be saved persistently not compared.
//foreign code:
//  auto r = ImGui::GetKeyName(ImGuiKey(key))
func GetKeyName(key ImGuiKey) (r string) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001d5)
	runtime.AddIntArg(_f, key)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetStringRetr[string](_f))

	return
}

// SetNextFrameWantCaptureKeyboard Override io.WantCaptureKeyboard flag next frame (said flag is left for your application to handle, typically when true it instructs your app to ignore inputs). e.g. force capture keyboard when your widget is being hovered. This is equivalent to setting "io.WantCaptureKeyboard = want_capture_keyboard"; after the next NewFrame() call.
//foreign code:
//  ImGui::SetNextFrameWantCaptureKeyboard(want_capture_keyboard)
func SetNextFrameWantCaptureKeyboard(want_capture_keyboard bool) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001d6)
	runtime.AddBoolArg(_f, want_capture_keyboard)
	_f.CallProcedure()

}

// IsMouseDown is mouse button held?
//foreign code:
//  auto r = ImGui::IsMouseDown(button)
func IsMouseDown(button ImGuiMouseButton) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001d7)
	runtime.AddIntArg(_f, button)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsMouseClicked did mouse button clicked? (went from !Down to Down). Same as GetMouseClickedCount() == 1.
//foreign code:
//  auto r = ImGui::IsMouseClicked(button)
func IsMouseClicked(button ImGuiMouseButton) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001d8)
	runtime.AddIntArg(_f, button)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsMouseClickedV did mouse button clicked? (went from !Down to Down). Same as GetMouseClickedCount() == 1.
// * repeat bool = false
//foreign code:
//  auto r = ImGui::IsMouseClicked(button, repeat)
func IsMouseClickedV(button ImGuiMouseButton, repeat bool /* = false*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001d9)
	runtime.AddIntArg(_f, button)
	runtime.AddBoolArg(_f, repeat)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsMouseReleased did mouse button released? (went from Down to !Down)
//foreign code:
//  auto r = ImGui::IsMouseReleased(button)
func IsMouseReleased(button ImGuiMouseButton) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001da)
	runtime.AddIntArg(_f, button)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsMouseDoubleClicked did mouse button double-clicked? Same as GetMouseClickedCount() == 2. (note that a double-click will also report IsMouseClicked() == true)
//foreign code:
//  auto r = ImGui::IsMouseDoubleClicked(button)
func IsMouseDoubleClicked(button ImGuiMouseButton) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001db)
	runtime.AddIntArg(_f, button)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// GetMouseClickedCount return the number of successive mouse-clicks at the time where a click happen (otherwise 0).
//foreign code:
//  auto r = ImGui::GetMouseClickedCount(button)
func GetMouseClickedCount(button ImGuiMouseButton) (r int) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001dc)
	runtime.AddIntArg(_f, button)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetIntRetr[int](_f))

	return
}

// IsMouseHoveringRect is mouse hovering given bounding rect (in screen space). clipped by current clipping settings, but disregarding of other consideration of focus/window ordering/popup-block.
//foreign code:
//  auto r = ImGui::IsMouseHoveringRect(r_min, r_max)
func IsMouseHoveringRect(r_min ImVec2, r_max ImVec2) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001dd)
	runtime.AddComplex64Arg(_f, r_min)
	runtime.AddComplex64Arg(_f, r_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsMouseHoveringRectV is mouse hovering given bounding rect (in screen space). clipped by current clipping settings, but disregarding of other consideration of focus/window ordering/popup-block.
// * clip bool = true
//foreign code:
//  auto r = ImGui::IsMouseHoveringRect(r_min, r_max, clip)
func IsMouseHoveringRectV(r_min ImVec2, r_max ImVec2, clip bool /* = true*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001de)
	runtime.AddComplex64Arg(_f, r_min)
	runtime.AddComplex64Arg(_f, r_max)
	runtime.AddBoolArg(_f, clip)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsMousePosValid by convention we use (-FLT_MAX,-FLT_MAX) to denote that there is no mouse available
//foreign code:
//  auto r = ImGui::IsMousePosValid()
func IsMousePosValid() (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001df)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// GetMousePos shortcut to ImGui::GetIO().MousePos provided by user, to be consistent with other calls
//foreign code:
//  auto r = ImGui::GetMousePos()
func GetMousePos() (r ImVec2) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001e0)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImVec2(runtime.GetComplex64Retr[complex64](_f))

	return
}

// GetMousePosOnOpeningCurrentPopup retrieve mouse position at the time of opening popup we have BeginPopup() into (helper to avoid user backing that value themselves)
//foreign code:
//  auto r = ImGui::GetMousePosOnOpeningCurrentPopup()
func GetMousePosOnOpeningCurrentPopup() (r ImVec2) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001e1)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImVec2(runtime.GetComplex64Retr[complex64](_f))

	return
}

// IsMouseDragging is mouse dragging? (if lock_threshold < -1.0f, uses io.MouseDraggingThreshold)
//foreign code:
//  auto r = ImGui::IsMouseDragging(button)
func IsMouseDragging(button ImGuiMouseButton) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001e2)
	runtime.AddIntArg(_f, button)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// IsMouseDraggingV is mouse dragging? (if lock_threshold < -1.0f, uses io.MouseDraggingThreshold)
// * lock_threshold float = -1.0f
//foreign code:
//  auto r = ImGui::IsMouseDragging(button, lock_threshold)
func IsMouseDraggingV(button ImGuiMouseButton, lock_threshold float32 /* = -1.0f*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001e3)
	runtime.AddIntArg(_f, button)
	runtime.AddFloat32Arg(_f, lock_threshold)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// GetMouseDragDelta return the delta from the initial clicking position while the mouse button is pressed or was just released. This is locked and return 0.0f until the mouse moves past a distance threshold at least once (if lock_threshold < -1.0f, uses io.MouseDraggingThreshold)
//foreign code:
//  auto r = ImGui::GetMouseDragDelta()
func GetMouseDragDelta() (r ImVec2) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001e4)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImVec2(runtime.GetComplex64Retr[complex64](_f))

	return
}

// GetMouseDragDeltaV return the delta from the initial clicking position while the mouse button is pressed or was just released. This is locked and return 0.0f until the mouse moves past a distance threshold at least once (if lock_threshold < -1.0f, uses io.MouseDraggingThreshold)
// * button ImGuiMouseButton = 0
// * lock_threshold float = -1.0f
//foreign code:
//  auto r = ImGui::GetMouseDragDelta(button, lock_threshold)
func GetMouseDragDeltaV(button ImGuiMouseButton /* = 0*/, lock_threshold float32 /* = -1.0f*/) (r ImVec2) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001e5)
	runtime.AddIntArg(_f, button)
	runtime.AddFloat32Arg(_f, lock_threshold)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImVec2(runtime.GetComplex64Retr[complex64](_f))

	return
}

func ResetMouseDragDelta() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001e6)
	_f.CallProcedure()

}

func ResetMouseDragDeltaV(button ImGuiMouseButton /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001e7)
	runtime.AddIntArg(_f, button)
	_f.CallProcedure()

}

// GetMouseCursor get desired mouse cursor shape. Important: reset in ImGui::NewFrame(), this is updated during the frame. valid before Render(). If you use software rendering by setting io.MouseDrawCursor ImGui will render those for you
//foreign code:
//  auto r = ImGui::GetMouseCursor()
func GetMouseCursor() (r ImGuiMouseCursor) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001e8)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImGuiMouseCursor(runtime.GetIntRetr[int](_f))

	return
}

// SetMouseCursor set desired mouse cursor shape
//foreign code:
//  ImGui::SetMouseCursor(cursor_type)
func SetMouseCursor(cursor_type ImGuiMouseCursor) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001e9)
	runtime.AddIntArg(_f, cursor_type)
	_f.CallProcedure()

}

// SetNextFrameWantCaptureMouse Override io.WantCaptureMouse flag next frame (said flag is left for your application to handle, typical when true it instucts your app to ignore inputs). This is equivalent to setting "io.WantCaptureMouse = want_capture_mouse;" after the next NewFrame() call.
//foreign code:
//  ImGui::SetNextFrameWantCaptureMouse(want_capture_mouse)
func SetNextFrameWantCaptureMouse(want_capture_mouse bool) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001ea)
	runtime.AddBoolArg(_f, want_capture_mouse)
	_f.CallProcedure()

}

func GetClipboardText() (r string) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001eb)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetStringRetr[string](_f))

	return
}

func SetClipboardText(text string) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001ec)
	runtime.AddStringArg(_f, text)
	_f.CallProcedure()

}

// LoadIniSettingsFromDisk call after CreateContext() and before the first call to NewFrame(). NewFrame() automatically calls LoadIniSettingsFromDisk(io.IniFilename).
//foreign code:
//  ImGui::LoadIniSettingsFromDisk(ini_filename)
func LoadIniSettingsFromDisk(ini_filename string) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001ed)
	runtime.AddStringArg(_f, ini_filename)
	_f.CallProcedure()

}

// LoadIniSettingsFromMemory call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source.
//foreign code:
//  ImGui::LoadIniSettingsFromMemory(ini_data)
func LoadIniSettingsFromMemory(ini_data string) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001ee)
	runtime.AddStringArg(_f, ini_data)
	_f.CallProcedure()

}

// LoadIniSettingsFromMemoryV call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source.
// * ini_size size_t = 0
//foreign code:
//  ImGui::LoadIniSettingsFromMemory(ini_data, ini_size)
func LoadIniSettingsFromMemoryV(ini_data string, ini_size Size_t /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001ef)
	runtime.AddStringArg(_f, ini_data)
	runtime.AddUint64Arg(_f, ini_size)
	_f.CallProcedure()

}

// SaveIniSettingsToDisk this is automatically called (if io.IniFilename is not empty) a few seconds after any modification that should be reflected in the .ini file (and also by DestroyContext).
//foreign code:
//  ImGui::SaveIniSettingsToDisk(ini_filename)
func SaveIniSettingsToDisk(ini_filename string) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001f0)
	runtime.AddStringArg(_f, ini_filename)
	_f.CallProcedure()

}

// SaveIniSettingsToMemory return a zero-terminated string with the .ini data which you can save by your own mean. call when io.WantSaveIniSettings is set, then save data by your own mean and clear io.WantSaveIniSettings.
//foreign code:
//  auto r = ImGui::SaveIniSettingsToMemory()
func SaveIniSettingsToMemory() (r string) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001f1)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetStringRetr[string](_f))

	return
}

func DebugTextEncoding(text string) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001f2)
	runtime.AddStringArg(_f, text)
	_f.CallProcedure()

}

func DebugFlashStyleColor(idx ImGuiCol) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001f3)
	runtime.AddIntArg(_f, idx)
	_f.CallProcedure()

}

// DebugCheckVersionAndDataLayout This is called by IMGUI_CHECKVERSION() macro.
//foreign code:
//  auto r = ImGui::DebugCheckVersionAndDataLayout(version_str, sz_io, sz_style, sz_vec2, sz_vec4, sz_drawvert, sz_drawidx)
func DebugCheckVersionAndDataLayout(version_str string, sz_io Size_t, sz_style Size_t, sz_vec2 Size_t, sz_vec4 Size_t, sz_drawvert Size_t, sz_drawidx Size_t) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001f4)
	runtime.AddStringArg(_f, version_str)
	runtime.AddUint64Arg(_f, sz_io)
	runtime.AddUint64Arg(_f, sz_style)
	runtime.AddUint64Arg(_f, sz_vec2)
	runtime.AddUint64Arg(_f, sz_vec4)
	runtime.AddUint64Arg(_f, sz_drawvert)
	runtime.AddUint64Arg(_f, sz_drawidx)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// UpdatePlatformWindows call in main loop. will call CreateWindow/ResizeWindow/etc. platform functions for each secondary viewport, and DestroyWindow for each inactive viewport.
//foreign code:
//  ImGui::UpdatePlatformWindows()
func UpdatePlatformWindows() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001f5)
	_f.CallProcedure()

}

// RenderPlatformWindowsDefault call in main loop. will call RenderWindow/SwapBuffers platform functions for each secondary viewport which doesn't have the ImGuiViewportFlags_Minimized flag set. May be reimplemented by user for custom rendering needs.
//foreign code:
//  ImGui::RenderPlatformWindowsDefault()
func RenderPlatformWindowsDefault() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001f6)
	_f.CallProcedure()

}

// DestroyPlatformWindows call DestroyWindow platform functions for all viewports. call from backend Shutdown() if you need to close platform windows before imgui shutdown. otherwise will be called by DestroyContext().
//foreign code:
//  ImGui::DestroyPlatformWindows()
func DestroyPlatformWindows() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001f7)
	_f.CallProcedure()

}

// GetKeyIndex map ImGuiKey_* values into legacy native key index. == io.KeyMap[key]
//foreign code:
//  auto r = ImGui::GetKeyIndex(ImGuiKey(key))
func GetKeyIndex(key ImGuiKey) (r ImGuiKey) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001f8)
	runtime.AddIntArg(_f, key)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImGuiKey(runtime.GetIntRetr[int](_f))

	return
}

// SetItemAllowOverlap Use SetNextItemAllowOverlap() before item.
//foreign code:
//  ImGui::SetItemAllowOverlap()
func SetItemAllowOverlap() {
	_f := currentFffiVar
	_f.AddProcedureId(0x000001f9)
	_f.CallProcedure()

}

// ImageButton Use new ImageButton() signature (explicit item id, regular FramePadding)
//foreign code:
//  auto r = ImGui::ImageButton(ImTextureID(user_texture_id), size)
func ImageButtonOld(user_texture_id ImTextureID, size ImVec2) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001fa)
	runtime.AddUintptrArg(_f, user_texture_id)
	runtime.AddComplex64Arg(_f, size)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

// ImageButtonV Use new ImageButton() signature (explicit item id, regular FramePadding)
// * uv0 const ImVec2 & = ImVec2(0, 0)
// * uv1 const ImVec2 & = ImVec2(1, 1)
// * frame_padding int = -1
// * bg_col const ImVec4 & = ImVec4(0, 0, 0, 0)
// * tint_col const ImVec4 & = ImVec4(1, 1, 1, 1)
//foreign code:
//  auto r = ImGui::ImageButton(ImTextureID(user_texture_id), size, uv0, uv1, frame_padding, bg_col, tint_col)
func ImageButtonVOld(user_texture_id ImTextureID, size ImVec2, uv0 ImVec2 /* = ImVec2(0, 0)*/, uv1 ImVec2 /* = ImVec2(1, 1)*/, frame_padding int /* = -1*/, bg_col ImVec4 /* = ImVec4(0, 0, 0, 0)*/, tint_col ImVec4 /* = ImVec4(1, 1, 1, 1)*/) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x000001fb)
	runtime.AddUintptrArg(_f, user_texture_id)
	runtime.AddComplex64Arg(_f, size)
	runtime.AddComplex64Arg(_f, uv0)
	runtime.AddComplex64Arg(_f, uv1)
	runtime.AddIntArg(_f, frame_padding)
	runtime.AddFloat32Array4Arg(_f, bg_col)
	runtime.AddFloat32Array4Arg(_f, tint_col)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func NewHexEditor() (r ImHexEditorPtr) {

	_f := currentFffiVar
	_f.AddFunctionId(0x000001fc)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImHexEditorPtr(runtime.GetUintptrRetr[uintptr](

	// readOnly           disable any editing.
	// cols               number of columns to display.
	// showOptions        display options button/context menu. when disabled, options will be locked unless you provide your own UI for them.
	// showDataPreview    display a footer previewing the decimal/binary/hex/float representation of the currently selected bytes.
	// showHexII          display values in HexII representation instead of regular hexadecimal: hide null/zero bytes, ascii values as ".X".
	// showAscii          display ASCII representation on the right side.
	// greyOutZeroes      display null/zero bytes using the TextDisabled color.
	// upperCaseHex       display hexadecimal values as "FF" instead of "ff".
	// midColsCount       set to 0 to disable extra spacing between every mid-cols.
	// addrDigitsCount    number of addr digits to display (default calculated based on maximum displayed addr).
	// footerExtraHeight  space to reserve at the bottom of the widget to add custom widgets
	// highlightColor     background color of highlighted bytes.
	//foreign code:
//  
//  auto e = ((HexEditor*)foreignptr);
//  auto t = e->memEditor;
//  #define ASSIGN(l,r) ((l) = (r))
//  ASSIGN(readOnly, t->ReadOnly);
//  ASSIGN(cols, t->Cols);
//  ASSIGN(showOptions, t->OptShowOptions);
//  ASSIGN(showDataPreview, t->OptShowDataPreview);
//  ASSIGN(showHexII, t->OptShowHexII);
//  ASSIGN(showAscii, t->OptShowAscii);
//  ASSIGN(greyOutZeroes, t->OptGreyOutZeroes);
//  ASSIGN(upperCaseHex, t->OptUpperCaseHex);
//  ASSIGN(midColsCount, t->OptMidColsCount);
//  ASSIGN(addrDigitsCount, t->OptAddrDigitsCount);
//  ASSIGN(footerExtraHeight, t->OptFooterExtraHeight);
//  ASSIGN(highlightColor, t->HighlightColor);
//  #undef ASSIGN
//
	_f))
	return
}

func (foreignptr ImHexEditorPtr) Destroy() {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x000001fd)
	runtime.AddUintptrArg(_f, foreignptr)
	_f.CallProcedure()

}

func (foreignptr ImHexEditorPtr) GetSettings() (readOnly bool, cols int, showOptions bool, showDataPreview bool, showHexII bool, showAscii bool, greyOutZeroes bool, upperCaseHex bool, midColsCount int, addrDigitsCount int, footerExtraHeight float32, highlightColor uint32) {
	_f := foreignptr.getFffi()
	_f.AddFunctionId(0x000001fe)
	runtime.AddUintptrArg(_f, foreignptr)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		foreignptr.handleError(_err_)
		return
	}
	readOnly = (runtime.GetBoolRetr[bool](_f))
	cols = (runtime.GetIntRetr[int](_f))
	showOptions = (runtime.GetBoolRetr[bool](_f))
	showDataPreview = (runtime.GetBoolRetr[bool](_f))
	showHexII = (runtime.GetBoolRetr[bool](_f))
	showAscii = (runtime.GetBoolRetr[bool](_f))
	greyOutZeroes = (runtime.GetBoolRetr[bool](_f))
	upperCaseHex = (runtime.GetBoolRetr[bool](_f))
	midColsCount = (runtime.GetIntRetr[int](_f))
	addrDigitsCount = (runtime.GetIntRetr[int](_f))
	footerExtraHeight = (runtime.GetFloat32Retr[float32](_f))
	highlightColor = (runtime.GetUint32Retr[uint32](_f))

	return
}

// readOnly           disable any editing.
// cols               number of columns to display.
// showOptions        display options button/context menu. when disabled, options will be locked unless you provide your own UI for them.
// showDataPreview    display a footer previewing the decimal/binary/hex/float representation of the currently selected bytes.
// showHexII          display values in HexII representation instead of regular hexadecimal: hide null/zero bytes, ascii values as ".X".
// showAscii          display ASCII representation on the right side.
// greyOutZeroes      display null/zero bytes using the TextDisabled color.
// upperCaseHex       display hexadecimal values as "FF" instead of "ff".
// midColsCount       set to 0 to disable extra spacing between every mid-cols.
// addrDigitsCount    number of addr digits to display (default calculated based on maximum displayed addr).
// footerExtraHeight  space to reserve at the bottom of the widget to add custom widgets
// highlightColor     background color of highlighted bytes.
//foreign code:
//  
//  auto e = ((HexEditor*)foreignptr);
//  auto t = e->memEditor;
//  #define ASSIGN(l,r) ((r) = (l))
//  ASSIGN(readOnly, t->ReadOnly);
//  ASSIGN(cols, t->Cols);
//  ASSIGN(showOptions, t->OptShowOptions);
//  ASSIGN(showDataPreview, t->OptShowDataPreview);
//  ASSIGN(showHexII, t->OptShowHexII);
//  ASSIGN(showAscii, t->OptShowAscii);
//  ASSIGN(greyOutZeroes, t->OptGreyOutZeroes);
//  ASSIGN(upperCaseHex, t->OptUpperCaseHex);
//  ASSIGN(midColsCount, t->OptMidColsCount);
//  ASSIGN(addrDigitsCount, t->OptAddrDigitsCount);
//  ASSIGN(footerExtraHeight, t->OptFooterExtraHeight);
//  ASSIGN(highlightColor, t->HighlightColor);
//  #undef ASSIGN
//
func (foreignptr ImHexEditorPtr) SetSettings(readOnly bool, cols int, showOptions bool, showDataPreview bool, showHexII bool, showAscii bool, greyOutZeroes bool, upperCaseHex bool, midColsCount int, addrDigitsCount int, footerExtraHeight float32, highlightColor uint32) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x000001ff)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddBoolArg(_f, readOnly)
	runtime.AddIntArg(_f, cols)
	runtime.AddBoolArg(_f, showOptions)
	runtime.AddBoolArg(_f, showDataPreview)
	runtime.AddBoolArg(_f, showHexII)
	runtime.AddBoolArg(_f, showAscii)
	runtime.AddBoolArg(_f, greyOutZeroes)
	runtime.AddBoolArg(_f, upperCaseHex)
	runtime.AddIntArg(_f, midColsCount)
	runtime.AddIntArg(_f, addrDigitsCount)
	runtime.AddFloat32Arg(_f, footerExtraHeight)
	runtime.AddUint32Arg(_f, highlightColor)
	_f.CallProcedure()

}

func (foreignptr ImHexEditorPtr) GotoAddrAndHighlight(addrMin Size_t, addrMax Size_t) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000200)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddUint64Arg(_f, addrMin)
	runtime.AddUint64Arg(_f, addrMax)
	_f.CallProcedure()

}

func (foreignptr ImHexEditorPtr) DrawWindow(title string, data []byte) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000201)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddStringArg(_f, title)
	runtime.AddBytesArg(_f, data)
	_f.CallProcedure()

}

func (foreignptr ImHexEditorPtr) DrawWindowV(title string, baseDisplayAddr Size_t) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000202)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddStringArg(_f, title)
	runtime.AddUint64Arg(_f, baseDisplayAddr)
	_f.CallProcedure()

}

func (foreignptr ImHexEditorPtr) DrawContents() {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000203)
	runtime.AddUintptrArg(_f, foreignptr)
	_f.CallProcedure()

}

func (foreignptr ImHexEditorPtr) DrawContentV(baseDisplayAddr Size_t) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000204)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddUint64Arg(_f, baseDisplayAddr)
	_f.CallProcedure()

}

func (foreignptr ImHexEditorPtr) SetData(data []byte) {
	_f := foreignptr.getFffi()
	_f.AddProcedureId(0x00000205)
	runtime.AddUintptrArg(_f, foreignptr)
	runtime.AddBytesArg(_f, data)
	_f.CallProcedure()

}

func (foreignptr ImHexEditorPtr) GetData() (data []byte) {
	_f := foreignptr.getFffi()
	_f.AddFunctionId(0x00000206)
	runtime.AddUintptrArg(_f, foreignptr)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		foreignptr.handleError(_err_)
		return
	}
	data = (runtime.GetBytesRetr[byte](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

// TextUnformatted
//foreign code:
//  ImGui::TextUnformatted(text,text+getStringLength(text))
func TextUnformatted(text string) {

	_f := currentFffiVar
	_f.AddProcedureId(0x00000207)
	runtime.AddStringArg(_f, text)
	_f.CallProcedure()
}

// TextUnformatted
//foreign code:
//  ImGui::LabelText(label,"%.*s",(int)getStringLength(text),text)
func LabelText(label string, text string) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000208)
	runtime.AddStringArg(_f, label)
	runtime.AddStringArg(_f, text)
	_f.CallProcedure()

}

// BulletText
//foreign code:
//  ImGui::BulletText("%.*s",(int)getStringLength(text),text)
func BulletText(text string) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000209)
	runtime.AddStringArg(_f, text)
	_f.CallProcedure()

}

func GetIoDeltaTime() (dt float32) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000020a)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	dt = (runtime.GetFloat32Retr[float32](_f))

	return
}

func CalcTextWidth(text string) (r ImVec2) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000020b)
	runtime.AddStringArg(_f, text)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImVec2(runtime.GetComplex64Retr[complex64](_f))

	return
}

func CalcTextWidthV(text string, hideTextAfterDoubleHash bool, floatWrapWidth float32) (r ImVec2) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000020c)
	runtime.AddStringArg(_f, text)
	runtime.AddBoolArg(_f, hideTextAfterDoubleHash)
	runtime.AddFloat32Arg(_f, floatWrapWidth)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImVec2(runtime.GetComplex64Retr[complex64](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func InputText(label string, textIn string, maxLength Size_t) (textOut string, changed bool) {

	_f := currentFffiVar
	_f.AddFunctionId(0x0000020d)
	runtime.AddStringArg(_f, label)
	runtime.AddStringArg(_f, textIn)
	runtime.AddUint64Arg(_f, maxLength)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	textOut = (runtime.GetStringRetr[string](_f))
	changed = (runtime.GetBoolRetr[bool](_f))

	return
}

func InputTextV(label string, textIn string, maxLength Size_t, flags ImGuiInputTextFlags) (textOut string, changed bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000020e)
	runtime.AddStringArg(_f, label)
	runtime.AddStringArg(_f, textIn)
	runtime.AddUint64Arg(_f, maxLength)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	textOut = (runtime.GetStringRetr[string](_f))
	changed = (runtime.GetBoolRetr[bool](_f))

	return
}

func InputTextWithHint(label string, hint string, textIn string, maxLength Size_t) (textOut string, changed bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000020f)
	runtime.AddStringArg(_f, label)
	runtime.AddStringArg(_f, hint)
	runtime.AddStringArg(_f, textIn)
	runtime.AddUint64Arg(_f, maxLength)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	textOut = (runtime.GetStringRetr[string](_f))
	changed = (runtime.GetBoolRetr[bool](_f))

	return
}

func InputTextWithHintV(label string, hint string, textIn string, maxLength Size_t, flags ImGuiInputTextFlags) (textOut string, changed bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000210)
	runtime.AddStringArg(_f, label)
	runtime.AddStringArg(_f, hint)
	runtime.AddStringArg(_f, textIn)
	runtime.AddUint64Arg(_f, maxLength)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	textOut = (runtime.GetStringRetr[string](_f))
	changed = (runtime.GetBoolRetr[bool](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func BringCurrentWindowToDisplayFront() {

	_f := currentFffiVar
	_f.AddProcedureId(0x00000211)
	_f.CallProcedure()
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func Knob(label string, valueP float32, v_min float32, v_max float32) (value float32, r bool) {

	_f := currentFffiVar
	_f.AddFunctionId(0x00000212)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, valueP)
	runtime.AddFloat32Arg(_f, v_min)
	runtime.AddFloat32Arg(_f, v_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	value = (runtime.GetFloat32Retr[float32](_f))
	r = (runtime.GetBoolRetr[bool](_f))
	return
}

func KnobV(label string, valueP float32, v_min float32, v_max float32,
	speed float32, format string, variant ImGuiKnobVariant, size float32, flags ImGuiKnobFlags, steps int) (value float32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000213)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, valueP)
	runtime.AddFloat32Arg(_f, v_min)
	runtime.AddFloat32Arg(_f, v_max)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, variant)
	runtime.AddFloat32Arg(_f, size)
	runtime.AddIntArg(_f, flags)
	runtime.AddIntArg(_f, steps)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	value = (runtime.GetFloat32Retr[float32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func KnobInt(label string, valueP int, v_min int, v_max int) (value int, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000214)
	runtime.AddStringArg(_f, label)
	runtime.AddIntArg(_f, valueP)
	runtime.AddIntArg(_f, v_min)
	runtime.AddIntArg(_f, v_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	value = (runtime.GetIntRetr[int](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func KnobIntV(label string, valueP int, v_min int, v_max int,
	speed float32, format string, variant ImGuiKnobVariant, size float32, flags ImGuiKnobFlags, steps int) (value int, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000215)
	runtime.AddStringArg(_f, label)
	runtime.AddIntArg(_f, valueP)
	runtime.AddIntArg(_f, v_min)
	runtime.AddIntArg(_f, v_max)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, variant)
	runtime.AddFloat32Arg(_f, size)
	runtime.AddIntArg(_f, flags)
	runtime.AddIntArg(_f, steps)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	value = (runtime.GetIntRetr[int](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func BeginPiePopup(name string) (r bool) {

	_f := currentFffiVar
	_f.AddFunctionId(0x00000216)
	runtime.AddStringArg(_f, name)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))
	return
}

func BeginPiePopupV(name string, iMouseButton int) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000217)
	runtime.AddStringArg(_f, name)
	runtime.AddIntArg(_f, iMouseButton)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func EndPiePopup() {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000218)
	_f.CallProcedure()

}

func PieMenuItem(name string) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000219)
	runtime.AddStringArg(_f, name)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func PieMenuItemV(name string, bEnabled /* = true */ bool) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000021a)
	runtime.AddStringArg(_f, name)
	runtime.AddBoolArg(_f, bEnabled)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func BeginPieMenu(name string) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000021b)
	runtime.AddStringArg(_f, name)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func BeginPieMenuV(name string, bEnabled /* = true */ bool) (r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000021c)
	runtime.AddStringArg(_f, name)
	runtime.AddBoolArg(_f, bEnabled)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func EndPieMenu() {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000021d)
	_f.CallProcedure()

}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func SliderFloat32(label string, vP float32, p_min float32, p_max float32) (v float32, r bool) {

	_f := currentFffiVar
	_f.AddFunctionId(0x0000021e)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, vP)
	runtime.AddFloat32Arg(_f, p_min)
	runtime.AddFloat32Arg(_f, p_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat32Retr[float32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderFloat32V(label string, vP float32, p_min float32, p_max float32, format string, flags ImGuiSliderFlags) (v float32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000021f)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, vP)
	runtime.AddFloat32Arg(_f, p_min)
	runtime.AddFloat32Arg(_f, p_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat32Retr[float32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderFloat32NV(label string, vP []float32, v_min float32, v_max float32, format string, flags ImGuiSliderFlags) (v []float32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000220)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32SliceArg(_f, vP)
	runtime.AddFloat32Arg(_f, v_min)
	runtime.AddFloat32Arg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat32SliceRetr[float32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderFloat32N(label string, vP []float32, v_min float32, v_max float32) (v []float32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000221)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32SliceArg(_f, vP)
	runtime.AddFloat32Arg(_f, v_min)
	runtime.AddFloat32Arg(_f, v_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat32SliceRetr[float32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func SliderFloat64(label string, vP float64, p_min float64, p_max float64) (v float64, r bool) {

	_f := currentFffiVar
	_f.AddFunctionId(0x00000222)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat64Arg(_f, vP)
	runtime.AddFloat64Arg(_f, p_min)
	runtime.AddFloat64Arg(_f, p_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat64Retr[float64](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderFloat64V(label string, vP float64, p_min float64, p_max float64, format string, flags ImGuiSliderFlags) (v float64, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000223)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat64Arg(_f, vP)
	runtime.AddFloat64Arg(_f, p_min)
	runtime.AddFloat64Arg(_f, p_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat64Retr[float64](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderFloat64NV(label string, vP []float64, v_min float64, v_max float64, format string, flags ImGuiSliderFlags) (v []float64, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000224)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat64SliceArg(_f, vP)
	runtime.AddFloat64Arg(_f, v_min)
	runtime.AddFloat64Arg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat64SliceRetr[float64](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderFloat64N(label string, vP []float64, v_min float64, v_max float64) (v []float64, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000225)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat64SliceArg(_f, vP)
	runtime.AddFloat64Arg(_f, v_min)
	runtime.AddFloat64Arg(_f, v_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetFloat64SliceRetr[float64](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func SliderInt(label string, vP int, p_min int, p_max int) (v int, r bool) {

	_f := currentFffiVar
	_f.AddFunctionId(0x00000226)
	runtime.AddStringArg(_f, label)
	runtime.AddIntArg(_f, vP)
	runtime.AddIntArg(_f, p_min)
	runtime.AddIntArg(_f, p_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetIntRetr[int](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderIntV(label string, vP int, p_min int, p_max int, format string, flags ImGuiSliderFlags) (v int, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000227)
	runtime.AddStringArg(_f, label)
	runtime.AddIntArg(_f, vP)
	runtime.AddIntArg(_f, p_min)
	runtime.AddIntArg(_f, p_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetIntRetr[int](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderIntNV(label string, vP []int, v_min int, v_max int, format string, flags ImGuiSliderFlags) (v []int, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000228)
	runtime.AddStringArg(_f, label)
	runtime.AddIntSliceArg(_f, vP)
	runtime.AddIntArg(_f, v_min)
	runtime.AddIntArg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetIntSliceRetr[int](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderIntN(label string, vP []int, v_min int, v_max int) (v []int, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000229)
	runtime.AddStringArg(_f, label)
	runtime.AddIntSliceArg(_f, vP)
	runtime.AddIntArg(_f, v_min)
	runtime.AddIntArg(_f, v_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetIntSliceRetr[int](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func SliderInt16(label string, vP int16, p_min int16, p_max int16) (v int16, r bool) {

	_f := currentFffiVar
	_f.AddFunctionId(0x0000022a)
	runtime.AddStringArg(_f, label)
	runtime.AddInt16Arg(_f, vP)
	runtime.AddInt16Arg(_f, p_min)
	runtime.AddInt16Arg(_f, p_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetInt16Retr[int16](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderInt16V(label string, vP int16, p_min int16, p_max int16, format string, flags ImGuiSliderFlags) (v int16, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000022b)
	runtime.AddStringArg(_f, label)
	runtime.AddInt16Arg(_f, vP)
	runtime.AddInt16Arg(_f, p_min)
	runtime.AddInt16Arg(_f, p_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetInt16Retr[int16](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderInt16NV(label string, vP []int16, v_min int16, v_max int16, format string, flags ImGuiSliderFlags) (v []int16, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000022c)
	runtime.AddStringArg(_f, label)
	runtime.AddInt16SliceArg(_f, vP)
	runtime.AddInt16Arg(_f, v_min)
	runtime.AddInt16Arg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetInt16SliceRetr[int16](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderInt16N(label string, vP []int16, v_min int16, v_max int16) (v []int16, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000022d)
	runtime.AddStringArg(_f, label)
	runtime.AddInt16SliceArg(_f, vP)
	runtime.AddInt16Arg(_f, v_min)
	runtime.AddInt16Arg(_f, v_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetInt16SliceRetr[int16](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func SliderInt32(label string, vP int32, p_min int32, p_max int32) (v int32, r bool) {

	_f := currentFffiVar
	_f.AddFunctionId(0x0000022e)
	runtime.AddStringArg(_f, label)
	runtime.AddInt32Arg(_f, vP)
	runtime.AddInt32Arg(_f, p_min)
	runtime.AddInt32Arg(_f, p_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetInt32Retr[int32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderInt32V(label string, vP int32, p_min int32, p_max int32, format string, flags ImGuiSliderFlags) (v int32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000022f)
	runtime.AddStringArg(_f, label)
	runtime.AddInt32Arg(_f, vP)
	runtime.AddInt32Arg(_f, p_min)
	runtime.AddInt32Arg(_f, p_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetInt32Retr[int32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderInt32NV(label string, vP []int32, v_min int32, v_max int32, format string, flags ImGuiSliderFlags) (v []int32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000230)
	runtime.AddStringArg(_f, label)
	runtime.AddInt32SliceArg(_f, vP)
	runtime.AddInt32Arg(_f, v_min)
	runtime.AddInt32Arg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetInt32SliceRetr[int32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderInt32N(label string, vP []int32, v_min int32, v_max int32) (v []int32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000231)
	runtime.AddStringArg(_f, label)
	runtime.AddInt32SliceArg(_f, vP)
	runtime.AddInt32Arg(_f, v_min)
	runtime.AddInt32Arg(_f, v_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetInt32SliceRetr[int32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func SliderInt8(label string, vP int8, p_min int8, p_max int8) (v int8, r bool) {

	_f := currentFffiVar
	_f.AddFunctionId(0x00000232)
	runtime.AddStringArg(_f, label)
	runtime.AddInt8Arg(_f, vP)
	runtime.AddInt8Arg(_f, p_min)
	runtime.AddInt8Arg(_f, p_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetInt8Retr[int8](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderInt8V(label string, vP int8, p_min int8, p_max int8, format string, flags ImGuiSliderFlags) (v int8, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000233)
	runtime.AddStringArg(_f, label)
	runtime.AddInt8Arg(_f, vP)
	runtime.AddInt8Arg(_f, p_min)
	runtime.AddInt8Arg(_f, p_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetInt8Retr[int8](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderInt8NV(label string, vP []int8, v_min int8, v_max int8, format string, flags ImGuiSliderFlags) (v []int8, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000234)
	runtime.AddStringArg(_f, label)
	runtime.AddInt8SliceArg(_f, vP)
	runtime.AddInt8Arg(_f, v_min)
	runtime.AddInt8Arg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetInt8SliceRetr[int8](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderInt8N(label string, vP []int8, v_min int8, v_max int8) (v []int8, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000235)
	runtime.AddStringArg(_f, label)
	runtime.AddInt8SliceArg(_f, vP)
	runtime.AddInt8Arg(_f, v_min)
	runtime.AddInt8Arg(_f, v_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetInt8SliceRetr[int8](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func SliderUInt(label string, vP uint, p_min uint, p_max uint) (v uint, r bool) {

	_f := currentFffiVar
	_f.AddFunctionId(0x00000236)
	runtime.AddStringArg(_f, label)
	runtime.AddUintArg(_f, vP)
	runtime.AddUintArg(_f, p_min)
	runtime.AddUintArg(_f, p_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUintRetr[uint](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderUIntV(label string, vP uint, p_min uint, p_max uint, format string, flags ImGuiSliderFlags) (v uint, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000237)
	runtime.AddStringArg(_f, label)
	runtime.AddUintArg(_f, vP)
	runtime.AddUintArg(_f, p_min)
	runtime.AddUintArg(_f, p_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUintRetr[uint](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderUIntNV(label string, vP []uint, v_min uint, v_max uint, format string, flags ImGuiSliderFlags) (v []uint, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000238)
	runtime.AddStringArg(_f, label)
	runtime.AddUintSliceArg(_f, vP)
	runtime.AddUintArg(_f, v_min)
	runtime.AddUintArg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUintSliceRetr[uint](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderUIntN(label string, vP []uint, v_min uint, v_max uint) (v []uint, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000239)
	runtime.AddStringArg(_f, label)
	runtime.AddUintSliceArg(_f, vP)
	runtime.AddUintArg(_f, v_min)
	runtime.AddUintArg(_f, v_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUintSliceRetr[uint](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func SliderUInt16(label string, vP uint16, p_min uint16, p_max uint16) (v uint16, r bool) {

	_f := currentFffiVar
	_f.AddFunctionId(0x0000023a)
	runtime.AddStringArg(_f, label)
	runtime.AddUint16Arg(_f, vP)
	runtime.AddUint16Arg(_f, p_min)
	runtime.AddUint16Arg(_f, p_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUint16Retr[uint16](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderUInt16V(label string, vP uint16, p_min uint16, p_max uint16, format string, flags ImGuiSliderFlags) (v uint16, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000023b)
	runtime.AddStringArg(_f, label)
	runtime.AddUint16Arg(_f, vP)
	runtime.AddUint16Arg(_f, p_min)
	runtime.AddUint16Arg(_f, p_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUint16Retr[uint16](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderUInt16NV(label string, vP []uint16, v_min uint16, v_max uint16, format string, flags ImGuiSliderFlags) (v []uint16, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000023c)
	runtime.AddStringArg(_f, label)
	runtime.AddUint16SliceArg(_f, vP)
	runtime.AddUint16Arg(_f, v_min)
	runtime.AddUint16Arg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUint16SliceRetr[uint16](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderUInt16N(label string, vP []uint16, v_min uint16, v_max uint16) (v []uint16, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000023d)
	runtime.AddStringArg(_f, label)
	runtime.AddUint16SliceArg(_f, vP)
	runtime.AddUint16Arg(_f, v_min)
	runtime.AddUint16Arg(_f, v_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUint16SliceRetr[uint16](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func SliderUInt32(label string, vP uint32, p_min uint32, p_max uint32) (v uint32, r bool) {

	_f := currentFffiVar
	_f.AddFunctionId(0x0000023e)
	runtime.AddStringArg(_f, label)
	runtime.AddUint32Arg(_f, vP)
	runtime.AddUint32Arg(_f, p_min)
	runtime.AddUint32Arg(_f, p_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUint32Retr[uint32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderUInt32V(label string, vP uint32, p_min uint32, p_max uint32, format string, flags ImGuiSliderFlags) (v uint32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000023f)
	runtime.AddStringArg(_f, label)
	runtime.AddUint32Arg(_f, vP)
	runtime.AddUint32Arg(_f, p_min)
	runtime.AddUint32Arg(_f, p_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUint32Retr[uint32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderUInt32NV(label string, vP []uint32, v_min uint32, v_max uint32, format string, flags ImGuiSliderFlags) (v []uint32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000240)
	runtime.AddStringArg(_f, label)
	runtime.AddUint32SliceArg(_f, vP)
	runtime.AddUint32Arg(_f, v_min)
	runtime.AddUint32Arg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUint32SliceRetr[uint32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderUInt32N(label string, vP []uint32, v_min uint32, v_max uint32) (v []uint32, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000241)
	runtime.AddStringArg(_f, label)
	runtime.AddUint32SliceArg(_f, vP)
	runtime.AddUint32Arg(_f, v_min)
	runtime.AddUint32Arg(_f, v_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUint32SliceRetr[uint32](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func SliderUInt8(label string, vP uint8, p_min uint8, p_max uint8) (v uint8, r bool) {

	_f := currentFffiVar
	_f.AddFunctionId(0x00000242)
	runtime.AddStringArg(_f, label)
	runtime.AddUint8Arg(_f, vP)
	runtime.AddUint8Arg(_f, p_min)
	runtime.AddUint8Arg(_f, p_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUint8Retr[uint8](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderUInt8V(label string, vP uint8, p_min uint8, p_max uint8, format string, flags ImGuiSliderFlags) (v uint8, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000243)
	runtime.AddStringArg(_f, label)
	runtime.AddUint8Arg(_f, vP)
	runtime.AddUint8Arg(_f, p_min)
	runtime.AddUint8Arg(_f, p_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUint8Retr[uint8](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderUInt8NV(label string, vP []uint8, v_min uint8, v_max uint8, format string, flags ImGuiSliderFlags) (v []uint8, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000244)
	runtime.AddStringArg(_f, label)
	runtime.AddUint8SliceArg(_f, vP)
	runtime.AddUint8Arg(_f, v_min)
	runtime.AddUint8Arg(_f, v_max)
	runtime.AddStringArg(_f, format)
	runtime.AddIntArg(_f, flags)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUint8SliceRetr[uint8](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}

func SliderUInt8N(label string, vP []uint8, v_min uint8, v_max uint8) (v []uint8, r bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000245)
	runtime.AddStringArg(_f, label)
	runtime.AddUint8SliceArg(_f, vP)
	runtime.AddUint8Arg(_f, v_min)
	runtime.AddUint8Arg(_f, v_max)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	v = (runtime.GetUint8SliceRetr[uint8](_f))
	r = (runtime.GetBoolRetr[bool](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func SpinnerDots(label string, nextdotP float32, radius float32, thickness float32) (nextdot float32) {

	_f := currentFffiVar
	_f.AddFunctionId(0x00000246)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, nextdotP)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	nextdot = (runtime.GetFloat32Retr[float32](_f))
	return
}

func SpinnerDotsV(label string, nextdotP float32, radius float32, thickness float32, color uint32, speed float32, dots Size_t, minth float32) (nextdot float32) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000247)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, nextdotP)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, dots)
	runtime.AddFloat32Arg(_f, minth)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	nextdot = (runtime.GetFloat32Retr[float32](_f))

	return
}

func SpinnerDemos() {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000248)
	_f.CallProcedure()

}
// -- deactivated -- // //go:build fffi_idl_code
// -- deactivated -- // package imgui

func SpinnerRainbow(label string, radius float32, thickness float32, color uint32, speed float32) {

	_f := currentFffiVar
	_f.AddProcedureId(0x00000249)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()
}

func SpinnerRainbowV(label string, radius float32, thickness float32, color uint32, speed float32, ang_min float32 /* = 0.f*/, ang_max float32 /* = PI_2*/, arcs int /* = 1*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000024a)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddFloat32Arg(_f, ang_min)
	runtime.AddFloat32Arg(_f, ang_max)
	runtime.AddIntArg(_f, arcs)
	_f.CallProcedure()
}

func SpinnerRainbowMix(label string, radius float32, thickness float32, color uint32, speed float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000024b)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerRainbowMixV(label string, radius float32, thickness float32, color uint32, speed float32, ang_min float32 /* = 0.f*/, ang_max float32 /* = PI_2*/, arcs int /* = 1*/, mode int /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000024c)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddFloat32Arg(_f, ang_min)
	runtime.AddFloat32Arg(_f, ang_max)
	runtime.AddIntArg(_f, arcs)
	runtime.AddIntArg(_f, mode)
	_f.CallProcedure()

}

func SpinnerRotatingHeart(label string, radius float32, thickness float32, color uint32, speed float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000024d)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerRotatingHeartV(label string, radius float32, thickness float32, color uint32, speed float32, ang_min float32 /* = 0.f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000024e)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddFloat32Arg(_f, ang_min)
	_f.CallProcedure()

}

func SpinnerAng(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000024f)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerAngV(label string, radius float32, thickness float32, color uint32 /* = white*/, bg uint32 /* = white*/, speed float32 /* = 2.8f*/, angle float32 /* = IM_PI*/, mode int /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000250)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddUint32Arg(_f, bg)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddFloat32Arg(_f, angle)
	runtime.AddIntArg(_f, mode)
	_f.CallProcedure()

}

func SpinnerAngMix(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000251)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerAngMixV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, angle float32 /* = IM_PI*/, arcs int /* = 4*/, mode int /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000252)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddFloat32Arg(_f, angle)
	runtime.AddIntArg(_f, arcs)
	runtime.AddIntArg(_f, mode)
	_f.CallProcedure()

}

func SpinnerLoadingRing(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000253)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerLoadingRingV(label string, radius float32, thickness float32, color uint32 /* = white*/, bg uint32 /* = half_white*/, speed float32 /* = 2.8f*/, segments int /* = 5*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000254)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddUint32Arg(_f, bg)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, segments)
	_f.CallProcedure()

}

func SpinnerClock(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000255)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerClockV(label string, radius float32, thickness float32, color uint32 /* = white*/, bg uint32 /* = half_white*/, speed float32 /* = 2.8f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000256)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddUint32Arg(_f, bg)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerPulsar(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000257)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerPulsarV(label string, radius float32, thickness float32, bg uint32 /* = half_white*/, speed float32 /* = 2.8f*/, sequence bool /* = true*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000258)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, bg)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddBoolArg(_f, sequence)
	_f.CallProcedure()

}

func SpinnerTwinPulsar(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000259)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerTwinPulsarV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, rings int /* = 2*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000025a)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, rings)
	_f.CallProcedure()

}

func SpinnerFadePulsar(label string, radius float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000025b)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	_f.CallProcedure()

}

func SpinnerFadePulsarV(label string, radius float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, rings int /* = 2*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000025c)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, rings)
	_f.CallProcedure()

}

func SpinnerCircularLines(label string, radius float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000025d)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	_f.CallProcedure()

}

func SpinnerCircularLinesV(label string, radius float32, color uint32 /* = white*/, speed float32 /* = 1.8f*/, lines int /* = 8*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000025e)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, lines)
	_f.CallProcedure()

}

func SpinnerVDots(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000025f)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerVDotsV(label string, radius float32, thickness float32, color uint32 /* = white*/, bgcolor uint32 /* = white*/, speed float32 /* = 2.8f*/, dots Size_t /* = 12*/, mdots Size_t /* = 6*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000260)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddUint32Arg(_f, bgcolor)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, dots)
	runtime.AddUint64Arg(_f, mdots)
	_f.CallProcedure()

}

func SpinnerBounceDots(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000261)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerBounceDotsV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, dots Size_t /* = 3*/, mode int /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000262)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, dots)
	runtime.AddIntArg(_f, mode)
	_f.CallProcedure()

}

func SpinnerZipDots(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000263)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerZipDotsV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, dots Size_t /* = 5*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000264)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, dots)
	_f.CallProcedure()

}

func SpinnerDotsToPoints(label string, radius float32, thickness float32, offset_k float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000265)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddFloat32Arg(_f, offset_k)
	_f.CallProcedure()

}

func SpinnerDotsToPointsV(label string, radius float32, thickness float32, offset_k float32, color uint32 /* = white*/, speed float32 /* = 1.8f*/, dots Size_t /* = 5*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000266)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddFloat32Arg(_f, offset_k)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, dots)
	_f.CallProcedure()

}

func SpinnerDotsToBar(label string, radius float32, thickness float32, offset_k float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000267)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddFloat32Arg(_f, offset_k)
	_f.CallProcedure()

}

func SpinnerDotsToBarV(label string, radius float32, thickness float32, offset_k float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, dots Size_t /* = 5*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000268)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddFloat32Arg(_f, offset_k)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, dots)
	_f.CallProcedure()

}

func SpinnerWaveDots(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000269)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerWaveDotsV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, lt int /* = 8*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000026a)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, lt)
	_f.CallProcedure()

}

func SpinnerFadeDots(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000026b)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerFadeDotsV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, lt int /* = 8*/, mode int /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000026c)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, lt)
	runtime.AddIntArg(_f, mode)
	_f.CallProcedure()

}

func SpinnerThreeDots(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000026d)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerThreeDotsV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, lt int /* = 8*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000026e)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, lt)
	_f.CallProcedure()

}

func SpinnerFiveDots(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000026f)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerFiveDotsV(label string, radius float32, thickness float32, color uint32 /* = 0xffffffff*/, speed float32 /* = 2.8f*/, lt int /* = 8*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000270)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, lt)
	_f.CallProcedure()

}

func Spinner4Caleidospcope(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000271)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func Spinner4CaleidospcopeV(label string, radius float32, thickness float32, color uint32 /* = 0xffffffff*/, speed float32 /* = 2.8f*/, lt int /* = 8*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000272)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, lt)
	_f.CallProcedure()

}

func SpinnerMultiFadeDots(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000273)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerMultiFadeDotsV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, lt int /* = 8*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000274)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, lt)
	_f.CallProcedure()

}

func SpinnerScaleDots(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000275)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerScaleDotsV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, lt int /* = 8*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000276)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, lt)
	_f.CallProcedure()

}

func SpinnerSquareSpins(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000277)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerSquareSpinsV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000278)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerMovingDots(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000279)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerMovingDotsV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, dots Size_t /* = 3*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000027a)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, dots)
	_f.CallProcedure()

}

func SpinnerRotateDots(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000027b)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerRotateDotsV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, dots int /* = 2*/, mode int /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000027c)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, dots)
	runtime.AddIntArg(_f, mode)
	_f.CallProcedure()

}

func SpinnerOrionDots(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000027d)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerOrionDotsV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, arcs int /* = 4*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000027e)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, arcs)
	_f.CallProcedure()

}

func SpinnerGalaxyDots(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000027f)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerGalaxyDotsV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, arcs int /* = 4*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000280)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, arcs)
	_f.CallProcedure()

}

func SpinnerTwinAng(label string, radius1 float32, radius2 float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000281)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius1)
	runtime.AddFloat32Arg(_f, radius2)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerTwinAngV(label string, radius1 float32, radius2 float32, thickness float32, color1 uint32 /* = white*/, color2 uint32 /* = red*/, speed float32 /* = 2.8f*/, angle float32 /* = IM_PI*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000282)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius1)
	runtime.AddFloat32Arg(_f, radius2)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color1)
	runtime.AddUint32Arg(_f, color2)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddFloat32Arg(_f, angle)
	_f.CallProcedure()

}

func SpinnerFilling(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000283)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerFillingV(label string, radius float32, thickness float32, color1 uint32 /* = white*/, color2 uint32 /* = red*/, speed float32 /* = 2.8f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000284)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color1)
	runtime.AddUint32Arg(_f, color2)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerTopup(label string, radius1 float32, radius2 float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000285)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius1)
	runtime.AddFloat32Arg(_f, radius2)
	_f.CallProcedure()

}

func SpinnerTopupV(label string, radius1 float32, radius2 float32, color uint32 /* = red*/, fg uint32 /* = white*/, bg uint32 /* = white*/, speed float32 /* = 2.8f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000286)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius1)
	runtime.AddFloat32Arg(_f, radius2)
	runtime.AddUint32Arg(_f, color)
	runtime.AddUint32Arg(_f, fg)
	runtime.AddUint32Arg(_f, bg)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerTwinAng180(label string, radius1 float32, radius2 float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000287)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius1)
	runtime.AddFloat32Arg(_f, radius2)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerTwinAng180V(label string, radius1 float32, radius2 float32, thickness float32, color1 uint32 /* = white*/, color2 uint32 /* = red*/, speed float32 /* = 2.8f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000288)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius1)
	runtime.AddFloat32Arg(_f, radius2)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color1)
	runtime.AddUint32Arg(_f, color2)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerTwinAng360(label string, radius1 float32, radius2 float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000289)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius1)
	runtime.AddFloat32Arg(_f, radius2)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerTwinAng360V(label string, radius1 float32, radius2 float32, thickness float32, color1 uint32 /* = white*/, color2 uint32 /* = red*/, speed1 float32 /* = 2.8f*/, speed2 float32 /* = 2.5f*/, mode int /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000028a)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius1)
	runtime.AddFloat32Arg(_f, radius2)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color1)
	runtime.AddUint32Arg(_f, color2)
	runtime.AddFloat32Arg(_f, speed1)
	runtime.AddFloat32Arg(_f, speed2)
	runtime.AddIntArg(_f, mode)
	_f.CallProcedure()

}

func SpinnerIncDots(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000028b)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerIncDotsV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, dots Size_t /* = 6*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000028c)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, dots)
	_f.CallProcedure()

}

func SpinnerIncFullDots(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000028d)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerIncFullDotsV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, dots Size_t /* = 4*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000028e)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, dots)
	_f.CallProcedure()

}

func SpinnerFadeBars(label string, w float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000028f)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, w)
	_f.CallProcedure()

}

func SpinnerFadeBarsV(label string, w float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, bars Size_t /* = 3*/, scale bool /* = false*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000290)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, w)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, bars)
	runtime.AddBoolArg(_f, scale)
	_f.CallProcedure()

}

func SpinnerFadeTris(label string, radius float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000291)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	_f.CallProcedure()

}

func SpinnerFadeTrisV(label string, radius float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, dim Size_t /* = 2*/, scale bool /* = false*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000292)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, dim)
	runtime.AddBoolArg(_f, scale)
	_f.CallProcedure()

}

func SpinnerBarsRotateFade(label string, rmin float32, rmax float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000293)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, rmin)
	runtime.AddFloat32Arg(_f, rmax)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerBarsRotateFadeV(label string, rmin float32, rmax float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, bars Size_t /* = 6*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000294)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, rmin)
	runtime.AddFloat32Arg(_f, rmax)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, bars)
	_f.CallProcedure()

}

func SpinnerBarsScaleMiddle(label string, w float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000295)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, w)
	_f.CallProcedure()

}

func SpinnerBarsScaleMiddleV(label string, w float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, bars Size_t /* = 3*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000296)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, w)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, bars)
	_f.CallProcedure()

}

func SpinnerAngTwin(label string, radius1 float32, radius2 float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000297)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius1)
	runtime.AddFloat32Arg(_f, radius2)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerAngTwinV(label string, radius1 float32, radius2 float32, thickness float32, color uint32 /* = white*/, bg uint32 /* = half_white*/, speed float32 /* = 2.8f*/, angle float32 /* = IM_PI*/, arcs Size_t /* = 1*/, mode int /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000298)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius1)
	runtime.AddFloat32Arg(_f, radius2)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddUint32Arg(_f, bg)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddFloat32Arg(_f, angle)
	runtime.AddUint64Arg(_f, arcs)
	runtime.AddIntArg(_f, mode)
	_f.CallProcedure()

}

func SpinnerArcRotation(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000299)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerArcRotationV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, arcs Size_t /* = 4*/, mode int /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000029a)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, arcs)
	runtime.AddIntArg(_f, mode)
	_f.CallProcedure()

}

func SpinnerArcFade(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000029b)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerArcFadeV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, arcs Size_t /* = 4*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000029c)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, arcs)
	_f.CallProcedure()

}

func SpinnerSimpleArcFade(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000029d)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerSimpleArcFadeV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000029e)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerSquareStrokeFade(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000029f)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerSquareStrokeFadeV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002a0)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerAsciiSymbolPoints(label string, text string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002a1)
	runtime.AddStringArg(_f, label)
	runtime.AddStringArg(_f, text)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerAsciiSymbolPointsV(label string, text string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002a2)
	runtime.AddStringArg(_f, label)
	runtime.AddStringArg(_f, text)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerTextFading(label string, text string, radius float32, fsize float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002a3)
	runtime.AddStringArg(_f, label)
	runtime.AddStringArg(_f, text)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, fsize)
	_f.CallProcedure()

}

func SpinnerTextFadingV(label string, text string, radius float32, fsize float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002a4)
	runtime.AddStringArg(_f, label)
	runtime.AddStringArg(_f, text)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, fsize)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerSevenSegments(label string, text string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002a5)
	runtime.AddStringArg(_f, label)
	runtime.AddStringArg(_f, text)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerSevenSegmentsV(label string, text string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002a6)
	runtime.AddStringArg(_f, label)
	runtime.AddStringArg(_f, text)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerSquareStrokeFill(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002a7)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerSquareStrokeFillV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002a8)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerSquareStrokeLoading(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002a9)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerSquareStrokeLoadingV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002aa)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerSquareLoading(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002ab)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerSquareLoadingV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002ac)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerFilledArcFade(label string, radius float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002ad)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	_f.CallProcedure()

}

func SpinnerFilledArcFadeV(label string, radius float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, arcs Size_t /* = 4*/, mode int /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002ae)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, arcs)
	runtime.AddIntArg(_f, mode)
	_f.CallProcedure()

}

func SpinnerPointsArcBounce(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002af)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerPointsArcBounceV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, points Size_t /* = 4*/, circles int /* = 2*/, rspeed float32 /* = 0.f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002b0)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, points)
	runtime.AddIntArg(_f, circles)
	runtime.AddFloat32Arg(_f, rspeed)
	_f.CallProcedure()

}

func SpinnerFilledArcColor(label string, radius float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002b1)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	_f.CallProcedure()

}

func SpinnerFilledArcColorV(label string, radius float32, color uint32 /* = red*/, bg uint32 /* = white*/, speed float32 /* = 2.8f*/, arcs Size_t /* = 4*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002b2)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddUint32Arg(_f, color)
	runtime.AddUint32Arg(_f, bg)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, arcs)
	_f.CallProcedure()

}

func SpinnerFilledArcRing(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002b3)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerFilledArcRingV(label string, radius float32, thickness float32, color uint32 /* = red*/, bg uint32 /* = white*/, speed float32 /* = 2.8f*/, arcs Size_t /* = 4*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002b4)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddUint32Arg(_f, bg)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, arcs)
	_f.CallProcedure()

}

func SpinnerArcWedges(label string, radius float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002b5)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	_f.CallProcedure()

}

func SpinnerArcWedgesV(label string, radius float32, color uint32 /* = red*/, speed float32 /* = 2.8f*/, arcs Size_t /* = 4*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002b6)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, arcs)
	_f.CallProcedure()

}

func SpinnerTwinBall(label string, radius1 float32, radius2 float32, thickness float32, b_thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002b7)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius1)
	runtime.AddFloat32Arg(_f, radius2)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddFloat32Arg(_f, b_thickness)
	_f.CallProcedure()

}

func SpinnerTwinBallV(label string, radius1 float32, radius2 float32, thickness float32, b_thickness float32, ball uint32 /* = white*/, bg uint32 /* = half_white*/, speed float32 /* = 2.8f*/, balls Size_t /* = 2*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002b8)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius1)
	runtime.AddFloat32Arg(_f, radius2)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddFloat32Arg(_f, b_thickness)
	runtime.AddUint32Arg(_f, ball)
	runtime.AddUint32Arg(_f, bg)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, balls)
	_f.CallProcedure()

}

func SpinnerSolarBalls(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002b9)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerSolarBallsV(label string, radius float32, thickness float32, ball uint32 /* = white*/, bg uint32 /* = half_white*/, speed float32 /* = 2.8f*/, balls Size_t /* = 4*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002ba)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, ball)
	runtime.AddUint32Arg(_f, bg)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, balls)
	_f.CallProcedure()

}

func SpinnerSolarScaleBalls(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002bb)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerSolarScaleBallsV(label string, radius float32, thickness float32, ball uint32 /* = white*/, speed float32 /* = 2.8f*/, balls Size_t /* = 4*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002bc)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, ball)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, balls)
	_f.CallProcedure()

}

func SpinnerSolarArcs(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002bd)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerSolarArcsV(label string, radius float32, thickness float32, ball uint32 /* = white*/, bg uint32 /* = half_white*/, speed float32 /* = 2.8f*/, balls Size_t /* = 4*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002be)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, ball)
	runtime.AddUint32Arg(_f, bg)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, balls)
	_f.CallProcedure()

}

func SpinnerMovingArcs(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002bf)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerMovingArcsV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, arcs Size_t /* = 4*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002c0)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, arcs)
	_f.CallProcedure()

}

func SpinnerRainbowCircle(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002c1)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerRainbowCircleV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, arcs Size_t /* = 4*/, mode float32 /* = 1*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002c2)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, arcs)
	runtime.AddFloat32Arg(_f, mode)
	_f.CallProcedure()

}

func SpinnerBounceBall(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002c3)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerBounceBallV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, dots int /* = 1*/, shadow bool /* = false*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002c4)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, dots)
	runtime.AddBoolArg(_f, shadow)
	_f.CallProcedure()

}

func SpinnerPulsarBall(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002c5)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerPulsarBallV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, shadow bool /* = false*/, mode int /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002c6)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddBoolArg(_f, shadow)
	runtime.AddIntArg(_f, mode)
	_f.CallProcedure()

}

func SpinnerIncScaleDots(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002c7)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerIncScaleDotsV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, dots Size_t /* = 6*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002c8)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, dots)
	_f.CallProcedure()

}

func SpinnerSomeScaleDots(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002c9)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerSomeScaleDotsV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, dots Size_t /* = 6*/, mode int /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002ca)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, dots)
	runtime.AddIntArg(_f, mode)
	_f.CallProcedure()

}

func SpinnerAngTriple(label string, radius1 float32, radius2 float32, radius3 float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002cb)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius1)
	runtime.AddFloat32Arg(_f, radius2)
	runtime.AddFloat32Arg(_f, radius3)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerAngTripleV(label string, radius1 float32, radius2 float32, radius3 float32, thickness float32, c1 uint32 /* = white*/, c2 uint32 /* = half_white*/, c3 uint32 /* = white*/, speed float32 /* = 2.8f*/, angle float32 /* = IM_PI*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002cc)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius1)
	runtime.AddFloat32Arg(_f, radius2)
	runtime.AddFloat32Arg(_f, radius3)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, c1)
	runtime.AddUint32Arg(_f, c2)
	runtime.AddUint32Arg(_f, c3)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddFloat32Arg(_f, angle)
	_f.CallProcedure()

}

func SpinnerAngEclipse(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002cd)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerAngEclipseV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, angle float32 /* = IM_PI*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002ce)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddFloat32Arg(_f, angle)
	_f.CallProcedure()

}

func SpinnerIngYang(label string, radius float32, thickness float32, reverse bool, yang_detlta_r float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002cf)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddBoolArg(_f, reverse)
	runtime.AddFloat32Arg(_f, yang_detlta_r)
	_f.CallProcedure()

}

func SpinnerIngYangV(label string, radius float32, thickness float32, reverse bool, yang_detlta_r float32, colorI uint32 /* = white*/, colorY uint32 /* = white*/, speed float32 /* = 2.8f*/, angle float32 /* = IM_PI *0.7f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002d0)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddBoolArg(_f, reverse)
	runtime.AddFloat32Arg(_f, yang_detlta_r)
	runtime.AddUint32Arg(_f, colorI)
	runtime.AddUint32Arg(_f, colorY)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddFloat32Arg(_f, angle)
	_f.CallProcedure()

}

func SpinnerGooeyBalls(label string, radius float32, color uint32, speed float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002d1)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerGooeyBallsV(label string, radius float32, color uint32, speed float32, mode int /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002d2)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, mode)
	_f.CallProcedure()

}

func SpinnerDotsLoading(label string, radius float32, thickness float32, color uint32, bg uint32, speed float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002d3)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddUint32Arg(_f, bg)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerRotateGooeyBalls(label string, radius float32, thickness float32, color uint32, speed float32, balls int) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002d4)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, balls)
	_f.CallProcedure()

}

func SpinnerHerbertBalls(label string, radius float32, thickness float32, color uint32, speed float32, balls int) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002d5)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, balls)
	_f.CallProcedure()

}

func SpinnerHerbertBalls3D(label string, radius float32, thickness float32, color uint32, speed float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002d6)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerRotateTriangles(label string, radius float32, thickness float32, color uint32, speed float32, tris int) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002d7)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, tris)
	_f.CallProcedure()

}

func SpinnerRotateShapes(label string, radius float32, thickness float32, color uint32, speed float32, shapes int, pnt int) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002d8)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, shapes)
	runtime.AddIntArg(_f, pnt)
	_f.CallProcedure()

}

func SpinnerSinSquares(label string, radius float32, thickness float32, color uint32, speed float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002d9)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerMoonLine(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002da)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerMoonLineV(label string, radius float32, thickness float32, color uint32 /* = white*/, bg uint32 /* = red*/, speed float32 /* = 2.8f*/, angle float32 /* = IM_PI*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002db)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddUint32Arg(_f, bg)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddFloat32Arg(_f, angle)
	_f.CallProcedure()

}

func SpinnerCircleDrop(label string, radius float32, thickness float32, thickness_drop float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002dc)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddFloat32Arg(_f, thickness_drop)
	_f.CallProcedure()

}

func SpinnerCircleDropV(label string, radius float32, thickness float32, thickness_drop float32, color uint32 /* = white*/, bg uint32 /* = half_white*/, speed float32 /* = 2.8f*/, angle float32 /* = IM_PI*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002dd)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddFloat32Arg(_f, thickness_drop)
	runtime.AddUint32Arg(_f, color)
	runtime.AddUint32Arg(_f, bg)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddFloat32Arg(_f, angle)
	_f.CallProcedure()

}

func SpinnerSurroundedIndicator(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002de)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerSurroundedIndicatorV(label string, radius float32, thickness float32, color uint32 /* = white*/, bg uint32 /* = half_white*/, speed float32 /* = 2.8f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002df)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddUint32Arg(_f, bg)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerWifiIndicator(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002e0)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerWifiIndicatorV(label string, radius float32, thickness float32, color uint32 /* = red*/, bg uint32 /* = half_white*/, speed float32 /* = 2.8f*/, cangle float32 /* = 0.f*/, dots int /* = 3*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002e1)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddUint32Arg(_f, bg)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddFloat32Arg(_f, cangle)
	runtime.AddIntArg(_f, dots)
	_f.CallProcedure()

}

func SpinnerTrianglesSelector(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002e2)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerTrianglesSelectorV(label string, radius float32, thickness float32, color uint32 /* = white*/, bg uint32 /* = half_white*/, speed float32 /* = 2.8f*/, bars Size_t /* = 8*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002e3)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddUint32Arg(_f, bg)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, bars)
	_f.CallProcedure()

}

func SpinnerFlowingGradient(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002e4)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerFlowingGradientV(label string, radius float32, thickness float32, color uint32 /* = white*/, bg uint32 /* = red*/, speed float32 /* = 2.8f*/, angle float32 /* = IM_PI*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002e5)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddUint32Arg(_f, bg)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddFloat32Arg(_f, angle)
	_f.CallProcedure()

}

func SpinnerRotateSegments(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002e6)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerRotateSegmentsV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, arcs Size_t /* = 4*/, layers Size_t /* = 1*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002e7)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, arcs)
	runtime.AddUint64Arg(_f, layers)
	_f.CallProcedure()

}

func SpinnerLemniscate(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002e8)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerLemniscateV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, angle float32 /* = IM_PI/2.0f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002e9)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddFloat32Arg(_f, angle)
	_f.CallProcedure()

}

func SpinnerRotateGear(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002ea)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerRotateGearV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, pins Size_t /* = 12*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002eb)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, pins)
	_f.CallProcedure()

}

func SpinnerRotateWheel(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002ec)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerRotateWheelV(label string, radius float32, thickness float32, bg_color uint32 /* = white*/, color uint32 /* = white*/, speed float32 /* = 2.8f*/, pins Size_t /* = 12*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002ed)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, bg_color)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, pins)
	_f.CallProcedure()

}

func SpinnerAtom(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002ee)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerAtomV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, elipses int /* = 3*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002ef)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, elipses)
	_f.CallProcedure()

}

func SpinnerPatternRings(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002f0)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerPatternRingsV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, elipses int /* = 3*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002f1)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, elipses)
	_f.CallProcedure()

}

func SpinnerPatternEclipse(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002f2)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerPatternEclipseV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, elipses int /* = 3*/, delta_a float32 /* = 2.f*/, delta_y float32 /* = 0.f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002f3)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, elipses)
	runtime.AddFloat32Arg(_f, delta_a)
	runtime.AddFloat32Arg(_f, delta_y)
	_f.CallProcedure()

}

func SpinnerPatternSphere(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002f4)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerPatternSphereV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, elipses int /* = 3*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002f5)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, elipses)
	_f.CallProcedure()

}

func SpinnerRingSynchronous(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002f6)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerRingSynchronousV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, elipses int /* = 3*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002f7)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, elipses)
	_f.CallProcedure()

}

func SpinnerRingWatermarks(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002f8)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerRingWatermarksV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, elipses int /* = 3*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002f9)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, elipses)
	_f.CallProcedure()

}

func SpinnerRotatedAtom(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002fa)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerRotatedAtomV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, elipses int /* = 3*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002fb)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, elipses)
	_f.CallProcedure()

}

func SpinnerRainbowBalls(label string, radius float32, thickness float32, color uint32, speed float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002fc)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerRainbowBallsV(label string, radius float32, thickness float32, color uint32, speed float32, balls int /* = 5*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002fd)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, balls)
	_f.CallProcedure()

}

func SpinnerRainbowShot(label string, radius float32, thickness float32, color uint32, speed float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002fe)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerRainbowShotV(label string, radius float32, thickness float32, color uint32, speed float32, balls int /* = 5*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x000002ff)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, balls)
	_f.CallProcedure()

}

func SpinnerSpiral(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000300)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerSpiralV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, arcs Size_t /* = 4*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000301)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, arcs)
	_f.CallProcedure()

}

func SpinnerSpiralEye(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000302)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerSpiralEyeV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000303)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerBarChartSine(label string, radius float32, thickness float32, color uint32, speed float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000304)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerBarChartSineV(label string, radius float32, thickness float32, color uint32, speed float32, bars int /* = 5*/, mode int /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000305)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, bars)
	runtime.AddIntArg(_f, mode)
	_f.CallProcedure()

}

func SpinnerBarChartAdvSine(label string, radius float32, thickness float32, color uint32, speed float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000306)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerBarChartAdvSineV(label string, radius float32, thickness float32, color uint32, speed float32, mode int /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000307)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, mode)
	_f.CallProcedure()

}

func SpinnerBarChartAdvSineFade(label string, radius float32, thickness float32, color uint32, speed float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000308)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerBarChartAdvSineFadeV(label string, radius float32, thickness float32, color uint32, speed float32, mode int /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000309)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, mode)
	_f.CallProcedure()

}

func SpinnerBarChartRainbow(label string, radius float32, thickness float32, color uint32, speed float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000030a)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerBarChartRainbowV(label string, radius float32, thickness float32, color uint32, speed float32, bars int /* = 5*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000030b)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, bars)
	_f.CallProcedure()

}

func SpinnerBlocks(label string, radius float32, thickness float32, bg uint32, color uint32, speed float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000030c)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, bg)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerTwinBlocks(label string, radius float32, thickness float32, bg uint32, color uint32, speed float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000030d)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, bg)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerSquareRandomDots(label string, radius float32, thickness float32, bg uint32, color uint32, speed float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000030e)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, bg)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerScaleBlocks(label string, radius float32, thickness float32, color uint32, speed float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000030f)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerScaleBlocksV(label string, radius float32, thickness float32, color uint32, speed float32, mode int /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000310)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, mode)
	_f.CallProcedure()

}

func SpinnerScaleSquares(label string, radius float32, thikness float32, color uint32, speed float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000311)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thikness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerSquishSquare(label string, radius float32, color uint32, speed float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000312)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerFluid(label string, radius float32, color uint32, speed float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000313)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerFluidV(label string, radius float32, color uint32, speed float32, bars int /* = 3*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000314)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, bars)
	_f.CallProcedure()

}

func SpinnerFluidPoints(label string, radius float32, thickness float32, color uint32, speed float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000315)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerFluidPointsV(label string, radius float32, thickness float32, color uint32, speed float32, dots Size_t /* = 6*/, delta float32 /* = 0.35f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000316)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, dots)
	runtime.AddFloat32Arg(_f, delta)
	_f.CallProcedure()

}

func SpinnerArcPolarFade(label string, radius float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000317)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	_f.CallProcedure()

}

func SpinnerArcPolarFadeV(label string, radius float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, arcs Size_t /* = 4*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000318)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, arcs)
	_f.CallProcedure()

}

func SpinnerArcPolarRadius(label string, radius float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000319)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	_f.CallProcedure()

}

func SpinnerArcPolarRadiusV(label string, radius float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, arcs Size_t /* = 4*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000031a)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, arcs)
	_f.CallProcedure()

}

func SpinnerCaleidoscope(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000031b)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerCaleidoscopeV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, arcs Size_t /* = 6*/, mode int /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000031c)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, arcs)
	runtime.AddIntArg(_f, mode)
	_f.CallProcedure()

}

func SpinnerHboDots(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000031d)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerHboDotsV(label string, radius float32, thickness float32, color uint32 /* = white*/, minfade float32 /* = 0.0f*/, ryk float32 /* = 0.f*/, speed float32 /* = 1.1f*/, dots Size_t /* = 6*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000031e)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, minfade)
	runtime.AddFloat32Arg(_f, ryk)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, dots)
	_f.CallProcedure()

}

func SpinnerMoonDots(label string, radius float32, thickness float32, first uint32, second uint32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000031f)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, first)
	runtime.AddUint32Arg(_f, second)
	_f.CallProcedure()

}

func SpinnerMoonDotsV(label string, radius float32, thickness float32, first uint32, second uint32, speed float32 /* = 1.1f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000320)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, first)
	runtime.AddUint32Arg(_f, second)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerTwinHboDots(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000321)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerTwinHboDotsV(label string, radius float32, thickness float32, color uint32 /* = white*/, minfade float32 /* = 0.0f*/, ryk float32 /* = 0.f*/, speed float32 /* = 1.1f*/, dots Size_t /* = 6*/, delta float32 /* = 0.f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000322)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, minfade)
	runtime.AddFloat32Arg(_f, ryk)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, dots)
	runtime.AddFloat32Arg(_f, delta)
	_f.CallProcedure()

}

func SpinnerThreeDotsStar(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000323)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerThreeDotsStarV(label string, radius float32, thickness float32, color uint32 /* = white*/, minfade float32 /* = 0.0f*/, ryk float32 /* = 0.f*/, speed float32 /* = 1.1f*/, delta float32 /* = 0.f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000324)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, minfade)
	runtime.AddFloat32Arg(_f, ryk)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddFloat32Arg(_f, delta)
	_f.CallProcedure()

}

func SpinnerSineArcs(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000325)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerSineArcsV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000326)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerTrianglesShift(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000327)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerTrianglesShiftV(label string, radius float32, thickness float32, color uint32 /* = white*/, bg uint32 /* = half_white*/, speed float32 /* = 2.8f*/, bars Size_t /* = 8*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000328)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddUint32Arg(_f, bg)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, bars)
	_f.CallProcedure()

}

func SpinnerPointsShift(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000329)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerPointsShiftV(label string, radius float32, thickness float32, color uint32 /* = white*/, bg uint32 /* = half_white*/, speed float32 /* = 2.8f*/, bars Size_t /* = 8*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000032a)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddUint32Arg(_f, bg)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, bars)
	_f.CallProcedure()

}

func SpinnerSwingDots(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000032b)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerSwingDotsV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000032c)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerCircularPoints(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000032d)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerCircularPointsV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 1.8f*/, lines int /* = 8*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000032e)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, lines)
	_f.CallProcedure()

}

func SpinnerCurvedCircle(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x0000032f)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerCurvedCircleV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, circles Size_t /* = 1*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000330)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, circles)
	_f.CallProcedure()

}

func SpinnerModCircle(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000331)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerModCircleV(label string, radius float32, thickness float32, color uint32 /* = white*/, ang_min float32 /* = 1.f*/, ang_max float32 /* = 1.f*/, speed float32 /* = 2.8f*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000332)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, ang_min)
	runtime.AddFloat32Arg(_f, ang_max)
	runtime.AddFloat32Arg(_f, speed)
	_f.CallProcedure()

}

func SpinnerDnaDots(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000333)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerDnaDotsV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, lt int /* = 8*/, delta float32 /* = 0.5f*/, mode bool /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000334)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, lt)
	runtime.AddFloat32Arg(_f, delta)
	runtime.AddBoolArg(_f, mode)
	_f.CallProcedure()

}

func Spinner3SmuggleDots(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000335)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func Spinner3SmuggleDotsV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 4.8f*/, lt int /* = 8*/, delta float32 /* = 0.5f*/, mode bool /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000336)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddIntArg(_f, lt)
	runtime.AddFloat32Arg(_f, delta)
	runtime.AddBoolArg(_f, mode)
	_f.CallProcedure()

}

func SpinnerRotateSegmentsPulsar(label string, radius float32, thickness float32) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000337)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	_f.CallProcedure()

}

func SpinnerRotateSegmentsPulsarV(label string, radius float32, thickness float32, color uint32 /* = white*/, speed float32 /* = 2.8f*/, arcs Size_t /* = 4*/, layers Size_t /* = 1*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000338)
	runtime.AddStringArg(_f, label)
	runtime.AddFloat32Arg(_f, radius)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddUint32Arg(_f, color)
	runtime.AddFloat32Arg(_f, speed)
	runtime.AddUint64Arg(_f, arcs)
	runtime.AddUint64Arg(_f, layers)
	_f.CallProcedure()

}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func Splitter(split_vertically bool, thickness float32, size1P float32, size2P float32, min_size1 float32, min_size2 float32) (r bool, size1 float32, size2 float32) {

	_f := currentFffiVar
	_f.AddFunctionId(0x00000339)
	runtime.AddBoolArg(_f, split_vertically)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddFloat32Arg(_f, size1P)
	runtime.AddFloat32Arg(_f, size2P)
	runtime.AddFloat32Arg(_f, min_size1)
	runtime.AddFloat32Arg(_f, min_size2)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))
	size1 = (runtime.GetFloat32Retr[float32](_f))
	size2 = (runtime.GetFloat32Retr[float32](_f))
	return
}

func SplitterV(split_vertically bool, thickness float32, size1P float32, size2P float32, min_size1 float32, min_size2 float32, splitter_long_axis float32) (r bool, size1 float32, size2 float32) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000033a)
	runtime.AddBoolArg(_f, split_vertically)
	runtime.AddFloat32Arg(_f, thickness)
	runtime.AddFloat32Arg(_f, size1P)
	runtime.AddFloat32Arg(_f, size2P)
	runtime.AddFloat32Arg(_f, min_size1)
	runtime.AddFloat32Arg(_f, min_size2)
	runtime.AddFloat32Arg(_f, splitter_long_axis)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = (runtime.GetBoolRetr[bool](_f))
	size1 = (runtime.GetFloat32Retr[float32](_f))
	size2 = (runtime.GetFloat32Retr[float32](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func loadStyle(ptr ImGuiStyleForeignPtr, bs []bool, fs []float32, vec2s []float32, cols []float32, dirs []ImGuiDir, hovers []ImGuiHoveredFlags) {

	_f := currentFffiVar
	_f.AddProcedureId(0x0000033b)
	runtime.AddUintptrArg(_f, ptr)
	runtime.AddBoolSliceArg(_f, bs)
	runtime.AddFloat32SliceArg(_f, fs)
	runtime.AddFloat32SliceArg(_f, vec2s)
	runtime.AddFloat32SliceArg(_f, cols)
	runtime.AddIntSliceArg(_f, dirs)
	runtime.AddIntSliceArg(_f, hovers)
	_f.CallProcedure()

	return
}

func GetStyle() (r ImGuiStyleForeignPtr) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000033c)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	r = ImGuiStyleForeignPtr(runtime.GetUintptrRetr[uintptr](_f))

	return
}

func dumpStyle(ptr ImGuiStyleForeignPtr) (bs []bool, fs []float32, vec2s []float32, cols []float32, dirs []ImGuiDir, hovers []ImGuiHoveredFlags) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000033d)
	runtime.AddUintptrArg(_f, ptr)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	bs = (runtime.GetBoolSliceRetr[bool](_f))
	fs = (runtime.GetFloat32SliceRetr[float32](_f))
	vec2s = (runtime.GetFloat32SliceRetr[float32](_f))
	cols = (runtime.GetFloat32SliceRetr[float32](_f))
	dirs = runtime.GetIntSliceRetr[ImGuiDir](_f)
	hovers = runtime.GetIntSliceRetr[ImGuiHoveredFlags](_f)

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

func TableGetSortSpecs() (sort bool, dirty bool, userIds []ImGuiID, columnIndices []int16, directions []ImGuiSortDirection) {

	_f := currentFffiVar
	_f.AddFunctionId(0x0000033e)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	sort = (runtime.GetBoolRetr[bool](_f))
	dirty = (runtime.GetBoolRetr[bool](_f))
	userIds = runtime.GetUint32SliceRetr[ImGuiID](_f)
	columnIndices = (runtime.GetInt16SliceRetr[int16](_f))
	directions = runtime.GetIntSliceRetr[ImGuiSortDirection](_f)

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

// ImGuiToggleFlags: A set of flags that adjust behavior and display for ImGui::Toggle().
type ImGuiTogglerFlags int

const (
	ImGuiToggleFlags_None     ImGuiTogglerFlags = 0
	ImGuiToggleFlags_Animated ImGuiTogglerFlags = 1 << 0 // The toggle's knob should be animated.
	// Bits 1-2 reserved.
	ImGuiToggleFlags_BorderedFrame ImGuiTogglerFlags = 1 << 3 // The toggle should have a border drawn on the frame.
	ImGuiToggleFlags_BorderedKnob  ImGuiTogglerFlags = 1 << 4 // The toggle should have a border drawn on the knob.
	ImGuiToggleFlags_ShadowedFrame ImGuiTogglerFlags = 1 << 5 // The toggle should have a shadow drawn under the frame.
	ImGuiToggleFlags_ShadowedKnob  ImGuiTogglerFlags = 1 << 6 // The toggle should have a shadow drawn under the knob.
	// Bit 7 reserved.
	ImGuiToggleFlags_A11y     ImGuiTogglerFlags = 1 << 8                                                         // The toggle should draw on and off glyphs to help indicate its state.
	ImGuiToggleFlags_Bordered ImGuiTogglerFlags = ImGuiToggleFlags_BorderedFrame | ImGuiToggleFlags_BorderedKnob // Shorthand for bordered frame and knob.
	ImGuiToggleFlags_Shadowed ImGuiTogglerFlags = ImGuiToggleFlags_ShadowedFrame | ImGuiToggleFlags_ShadowedKnob // Shorthand for shadowed frame and knob.
	ImGuiToggleFlags_Default  ImGuiTogglerFlags = ImGuiToggleFlags_None                                          // The default flags used when no ImGuiToggleFlags_ are specified.
)

// Toggles behave similarly to ImGui::Checkbox()
// Sometimes called a toggle switch, see also: https://en.wikipedia.org/wiki/Toggle_switch_(widget)
// They represent two mutually exclusive states, with an optional animation on the UI when toggled.
//foreign code:
//  changed = ImGui::Toggle(label,&val);
//  valR = val
func Toggle(label string, val bool) (valR bool, changed bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x0000033f)
	runtime.AddStringArg(_f, label)
	runtime.AddBoolArg(_f, val)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	valR = (runtime.GetBoolRetr[bool](_f))
	changed = (runtime.GetBoolRetr[bool](_f))

	return
}

// ToggleV:
// Toggles behave similarly to ImGui::Checkbox()
// Sometimes called a toggle switch, see also: https://en.wikipedia.org/wiki/Toggle_switch_(widget)
// They represent two mutually exclusive states, with an optional animation on the UI when toggled.
// - flags: Values from the ImGuiToggleFlags_ enumeration to set toggle modes.
// - animation_duration: Animation duration. Amount of time in seconds the toggle should animate. (0,...] default: 1.0f (Overloads with this parameter imply ImGuiToggleFlags_Animated)
// - frame_rounding: A scalar that controls how rounded the toggle frame is. 0 is square, 1 is round. (0, 1) default 1.0f
// - knob_rounding: A scalar that controls how rounded the toggle knob is. 0 is square, 1 is round. (0, 1) default 1.0f
// - size: A width and height to draw the toggle at. Defaults to `ImGui::GetFrameHeight()` and that height * Phi for the width.
//foreign code:
//  changed = ImGui::Toggle(label,&val,flags,animationDuration,frameRounding,knobRounding,size);
//  valR = val
func ToggleV(label string, val bool, flags ImGuiTogglerFlags, animationDuration float32, frameRounding float32, knobRounding float32, size ImVec2) (valR bool, changed bool) {
	_f := currentFffiVar
	_f.AddFunctionId(0x00000340)
	runtime.AddStringArg(_f, label)
	runtime.AddBoolArg(_f, val)
	runtime.AddIntArg(_f, flags)
	runtime.AddFloat32Arg(_f, animationDuration)
	runtime.AddFloat32Arg(_f, frameRounding)
	runtime.AddFloat32Arg(_f, knobRounding)
	runtime.AddComplex64Arg(_f, size)
	_err_ := _f.CallFunction()
	if _err_ != nil {
		currentFffiErrorHandler(_err_)
		return
	}
	valR = (runtime.GetBoolRetr[bool](_f))
	changed = (runtime.GetBoolRetr[bool](_f))

	return
}
// -- deactivated -- // //go:build fffi_idl_code

// -- deactivated -- // package imgui

// InvisibleButtonP flexible button behavior without the visuals, frequently useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)
//foreign code:
//  ImGui::InvisibleButton(str_id, size)
func InvisibleButtonP(str_id string, size ImVec2) {

	_f := currentFffiVar
	_f.AddProcedureId(0x00000341)
	runtime.AddStringArg(_f, str_id)
	runtime.AddComplex64Arg(_f, size)
	_f.CallProcedure()
}

// InvisibleButtonVP flexible button behavior without the visuals, frequently useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)
// * flags ImGuiButtonFlags = 0
//foreign code:
//  ImGui::InvisibleButton(str_id, size, flags)
func InvisibleButtonVP(str_id string, size ImVec2, flags ImGuiButtonFlags /* = 0*/) {
	_f := currentFffiVar
	_f.AddProcedureId(0x00000342)
	runtime.AddStringArg(_f, str_id)
	runtime.AddComplex64Arg(_f, size)
	runtime.AddIntArg(_f, flags)
	_f.CallProcedure()

}
